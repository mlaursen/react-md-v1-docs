webpackJsonp([1],{CY29:function(e,t){e.exports={autocompletes:[{id:"autocomplete",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Autocompletes/Autocomplete.js",component:"Autocomplete",functions:[{name:"fuzzyFilter",type:"function",description:"This function does a simple fuzzy search of some `needle` for every\nitem in a `haystack`. It will only include items that are:\n - not null or undefined\n - valid React Components\n - a number or string that contains each letter/number in order ignoring case\n - an object's `dataLabel` value that contains each letter/number in order ignoring case.\n\nExample:\n```js\nconst haystack = ['Apple', 'Banana', 'Orange'];\nfuzzyFilter(haystack, 'An') // ['Banana', 'Orange'];\nfuzzyFilter(haystack, 'ae') // ['Apple']\n```",params:[{name:"haystack",description:"the haystack to search",type:"Array.<(string|number|Object|function())>",required:!0},{name:"needle",description:"the filter text to use.",type:"string",required:!0},{name:"dataLabel",description:"the data label to use if the element is an object.",type:"string",required:!1}],returns:{type:"Array.<(string|number|Object|function())>",description:"a filtered list."}},{name:"caseInsensitiveFilter",type:"function",description:"This function does a simple ignore case search of some `filterText` for every\nitem in a `haystack`. It will only include items that are:\n - not null or undefined\n - valid React Components\n - a number or string that contains each letter/number in exact order ignoring case\n - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\n\nExample:\n\n```js\nconst haystack = ['Apple', 'Banana', 'Orange'];\ncaseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\ncaseInsensitiveFilter(haystack, 'ae') // []\n```",params:[{name:"haystack",description:"the haystack to search",type:"Array.<(string|number|Object|function())>",required:!0},{name:"filterText",description:"the filter text to use.",type:"string",required:!0},{name:"dataLabel",description:"the data label to use if the element is an object.",type:"string",required:!1}],returns:{type:"Array.<(string|number|Object|function())>",description:"a filtered list."}},{name:"findIgnoreCase",type:"function",description:"This function finds the first item in a `haystack` that starts with every\nletter of the `value` in order. It will ignore:\n - null or undefined\n - valid React components",params:[{name:"haystack",description:"the haystack to search.",type:"Array.<(string|number|Object|function())>",required:!0},{name:"value",description:"the current value to use.",type:"string",required:!0},{name:"dataLabel",description:"the object key to use to extract the comparing value.",type:"string",required:!1}],returns:{type:"string",description:"the found element or the empty string."}}],enums:[{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]},{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]}],getters:[{name:"value",type:"getter",description:"Gets the current value from the text field. This is used when you have an uncontrolled\ntext field and simply need the value from a ref callback.",returns:{description:"the text field's value",type:"String"},params:[]}],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An id to give the autocomplete. Either this or the `menuId` is required for accessibility.\n\n@see [menuId](#autocomplete-proptypes-menu-id)",required:!1},{propName:"menuId",type:"oneRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'id')",description:"The menu id to provide to the autocomplete. Either this prop or the `id` prop is required. If\nthis props is omitted, the menuId will become: `${id}-menu`",required:!1},{propName:"listId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the menu's list.\n\n@see [Menu#listId](/components/menus?tab=1#menu-proptypes-list-id)",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the menu that contains the autocomplete.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the menu that contains the autocomplete.",required:!1},{propName:"textFieldStyle",type:"object",description:"An optional style to apply to the autocomplete's text field.",required:!1},{propName:"textFieldClassName",type:"string",description:"An optional className to apply to the autocomplete's text field.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the autocomplete's text field input itself.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the autocomplete's input field itself.",required:!1},{propName:"listStyle",type:"object",description:"The optional style to apply to the opened menu List if the\n`Autocomplete` is not using `inline` suggestions.",required:!1},{propName:"listClassName",type:"string",description:"The optional className to apply to the opened menu List if the\n`Autocomplete` is not using `inline` suggestions.",required:!1},{propName:"inlineSuggestionStyle",type:"object",description:"An optional style to apply to the inline suggestion when using `inline` mode.",required:!1},{propName:"inlineSuggestionClassName",type:"string",description:"An optional className to apply to the inline suggestion when using `inline` mode.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the autocomplete is disabled.",required:!1},{propName:"label",type:"node",description:"A label to display with the autocomplete.",required:!1},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n]), 'onChange')",description:"An optional value to use for the text field. This will force this component\nto be controlled and require the `onChange` function.",required:!1},{propName:"defaultValue",type:"oneOfType([\n  string,\n  number\n])",description:"The default value for the autocomplete's text field.",required:!1,defaultValue:"''"},{propName:"dataLabel",type:"string",description:"An object key to use to extract the text to be compared for filtering.\nThis will only be applied if the given `data` prop is an array of objects.",required:!0,defaultValue:"'primaryText'"},{propName:"dataValue",type:"string",description:"An optional object key to use to extract the `value` of the given `data` prop.\nThis is really only used with generating a unique react key. The unique react\nkey with either be:\n- the datum if it is a string or number\n- the `key` attribute of the datum object\n- the `datum[dataValue]`\n- or the `datum[dataLabel]`",required:!1},{propName:"deleteKeys",type:"oneOfType([\n  string,\n  arrayOf(string)\n])",description:"A single key or an array of keys to delete from your data object before passing\nto the `ListItem` component.",required:!1},{propName:"data",type:"arrayOf(oneOfType([\n  element,\n  string,\n  number,\n  shape({\n    [dataLabel]: oneOfType([\n      string,\n      number,\n      node,\n    ]).isRequired,\n  }),\n])).isRequired",description:"The data that will be used for autocomplete suggestions. This can either be\nan array of string, number, or object. If it is an array of objects, the key\n`dataLabel` is required.\n\n",required:!1},{propName:"total",type:"invalidIf(PropTypes.number, 'inline')",description:"An optional number representing the total number of results in the `data` prop.\nThis should really only be used when the data is paginated. When this is set,\neach item in the suggestion menu will be updated with the `aria-setsize` and\n`aria-posinset`.\n\n@see [offset](#autocomplete-proptypes-offset)",required:!1},{propName:"offset",type:"number",description:"An optional number representing the data's offset if the results were paginated.\nThis is used for accessibility with the `aria-posinset` attribute.\n\n@see [total](#autocomplete-proptypes-total)",required:!0,defaultValue:"0"},{propName:"filter",type:"func",description:"An optional function to use to filter the `data`. If you have a sexy backend\nusing solr or some other search/indexer, it is recommended to set this prop to\n`null`.",required:!1,defaultValue:"Autocomplete.fuzzyFilter"},{propName:"onKeyDown",type:"func",description:"An optional function to call when the `Autocomplete`'s text field has a `keydown` event.",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when the `Autocomplete`'s text field has a `mousedown` event.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the `Autocomplete`'s text field value changes.\nThe callback will be given the new value and the change event.\n\n`onChange(textFeldValue, event)`",required:!1},{propName:"onFocus",type:"func",description:"An optional function to call when the `Autocomplete`'s text field is focused.",required:!1},{propName:"onBlur",type:"func",description:"An optional function to call when the entire `Autocomplete` component is blurred.\nThis will be triggered when the window is clicked or when a user tabs away from\nthe autocomplete.",required:!1},{propName:"block",type:"bool",description:"Boolean if this text field should be styled as a full width text field.\nFloating labels and the text field indicator will be removed automatically.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the autocomplete should span the entire width.",required:!1,defaultValue:"true"},{propName:"inline",type:"bool",description:"Boolean if the `Autocomplete` should display suggestions inline instead\nof in a `Menu`.",required:!1},{propName:"inlineSuggestionPadding",type:"number",description:"The amount of padding to use between the current text and the inline suggestion text.",required:!0,defaultValue:"6"},{propName:"findInlineSuggestion",type:"func",description:"The function to call to find a suggestion for an inline autocomplete. This function\nexpects to return a single result of a number or a string.\n\n```js\n@param {Array<Object|String|Number>} data - The data prop to search.\n@param {String} value - The current value to use for searching.\n@param {String} dataLabel - The `dataLabel` prop to use if a datum is an object.\n@return {String|Number} the found suggestion or false-ish\n```",required:!1,defaultValue:"Autocomplete.findIgnoreCase"},{propName:"onAutocomplete",type:"func",description:"An optional function to call when an autocomplete suggestion is clicked either\nby using the mouse, the enter/space key, or touch. The match index and current\n`dataLabel` will be given back.\n\n`onAutocomplete(suggestion, suggestionIndex, matches);`\n\n@see [autocompleteWithLabel](#autocomplete-proptypes-autocomplete-with-label)",required:!1},{propName:"autocompleteWithLabel",type:"bool",description:"Boolean if the `onAutocomplete` should attempt send the `suggestion[dataLabel]` instead\nof `suggestion[dataValue]` when the data is an object.\n\n@see [onAutocomplete](#autocomplete-proptypes-on-autocomplete)",required:!1,defaultValue:"false"},{propName:"clearOnAutocomplete",type:"bool",description:"A boolean if the text field's value should be reset to the empty string when\nan item is auto-completed. This is useful if you do not want a fully controlled\ncomponent and the values are stored outside of the `TextField`. (like `Chips`).",required:!1},{propName:"onMenuOpen",type:"func",description:"An optional function to call when the `Autocomplete` suggestion menu opens.",required:!1},{propName:"onMenuClose",type:"func",description:"An optional function to call when the `Autocomplete` suggestion menu closes.",required:!1},{propName:"autoComplete",type:"string",description:"This prop is used for disabling the browser's default autocomplete suggestions\nof previously typed values in the text field. By default, this is set to `'off'`\nwhich most browsers will ignore when in forms. See the MDN Link on disabling\nautocomplete for some workarounds or fixes.\n\n@see [Disabling autocomplete](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#Disabling_autocompletion)",required:!1,defaultValue:"'off'"},{propName:"focusInputOnAutocomplete",type:"bool",description:"Boolean if the `input` should be focused again after a suggestion was clicked.\n\nThis is really only added for keyboard support and the fact that each of suggestions\nare focusable.",required:!1},{propName:"anchor",type:"custom",description:"This is how the menu's `List` gets anchored to the `toggle` element.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)",required:!1},{propName:"belowAnchor",type:"custom",description:"This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n\n@see [Layover#belowAnchor](/components/helpers/layovers?tab=1#layover-proptypes-below-anchor)",required:!1},{propName:"position",type:"custom",description:"This is the animation position for the list that appears.\n\n@see [Layover#animationPosition](/components/helpers/layovers?tab=1#layover-proptypes-animation-position)",required:!1,defaultValue:"Menu.Positions.BELOW"},{propName:"fixedTo",type:"custom",description:'This is how the menu\'s list will be "fixed" to the `toggle` component.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)',required:!1},{propName:"listInline",type:"bool",description:"Boolean if the menu's list should appear horizontally instead of vertically.",required:!1},{propName:"listZDepth",type:"number",description:"The list's z-depth for applying box shadow. This should be a number from 0 to 5.",required:!1},{propName:"listHeightRestricted",type:"bool",description:"Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/\n`$md-menu-desktop-max-height` values.\n\n@see [md-menu-mobile-max-height](/components/menus?tab=2#variable-md-menu-mobile-max-height)\n@see [md-menu-desktop-max-height](/components/menus?tab=2#variable-md-menu-desktop-max-height)",required:!1},{propName:"xThreshold",type:"number",description:"@see [Layover#xThreshold](/components/helpers/layovers?tab=1#layover-proptypes-x-threshold)",required:!1},{propName:"yThreshold",type:"number",description:"@see [Layover#yThreshold](/components/helpers/layovers?tab=1#layover-proptypes-y-threshold)",required:!1},{propName:"closeOnOutsideClick",type:"bool",description:"@see [Layover#closeOnOutsideClick](/components/helpers/layovers?tab=1#layover-proptypes-close-on-outside-click)",required:!1},{propName:"transitionName",type:"string",description:"An optional transition name to use for the list appearing/disappearing.\n\n@see [Layover#transitionName](/components/helpers/layovers?tab=1#layover-proptypes-transition-name)",required:!1},{propName:"transitionEnterTimeout",type:"number",description:"@see [Layover#transitionEnterTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-enter-timeout)",required:!1},{propName:"transitionLeaveTimeout",type:"number",description:"@see [Layover#transitionLeaveTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-leave-timeout)",required:!1},{propName:"centered",type:"custom",description:"@see [Layover#centered](/components/helpers/layovers?tab=1#layover-proptypes-centered)",required:!1},{propName:"sameWidth",type:"custom",description:"@see [Layover#sameWidth](/components/helpers/layovers?tab=1#layover-proptypes-same-width)",required:!1,defaultValue:"true"},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"true"},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1},{propName:"minLeft",type:"number",description:"@see [Layover#minLeft](/components/helpers/layovers?tab=1#layover-proptypes-min-left)",required:!1},{propName:"minRight",type:"number",description:"@see [Layover#minRight](/components/helpers/layovers?tab=1#layover-proptypes-min-right)",required:!1},{propName:"minBottom",type:"number",description:"@see [Layover#minBottom](/components/helpers/layovers?tab=1#layover-proptypes-min-bottom)",required:!1},{propName:"fillViewportWidth",type:"bool",description:"@see [Layover#fillViewportWidth](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-width)",required:!1},{propName:"fillViewportHeight",type:"bool",description:"@see [Layover#fillViewportHeight](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-height)",required:!1},{propName:"toolbar",type:"bool",description:"@see [TextFields#toolbar](/components/text-fields?tab=1#text-fields-proptypes-toolbar)",required:!1},{propName:"showUnfilteredData",type:"bool",description:"Boolean if the list of data should be shown on focus when no filter value has been\nprovided.",required:!1,defaultValue:"false"}],description:"The `Autocomplete` component is useful for presenting real-time suggestions, completions,\nor filtering."}],avatars:[{id:"avatar",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Avatars/Avatar.js",component:"Avatar",functions:[],enums:[],getters:[],props:[{propName:"className",type:"string",description:"An optional className to apply to the avatar.",required:!1},{propName:"contentStyle",type:"object",description:"An optional style to apply to either the `<img>` or `<div>` surrounding the content. The `<img>` tag\nwill be used with the `src` prop is defined.",required:!1},{propName:"contentClassName",type:"string",description:"An optional className to apply to either the `<img>` or `<div>` surrounding the content. The `<img>` tag\nwill be used with the `src` prop is defined.",required:!1},{propName:"src",type:"oneRequiredForA11yIf(PropTypes.string, 'role', 'alt')",description:"An optional image source to use for the avatar.",required:!1},{propName:"alt",type:"string",description:"An optional image alt to use for the avatar if it is\nan image.",required:!1},{propName:"icon",type:"node",description:"An optional `FontIcon` to convert into an avatar.",required:!1},{propName:"children",type:"node",description:"An optional letter to display in the avatar.",required:!1},{propName:"random",type:"bool",description:"A boolean if a random color should be applied to the avatar.\nThis will be one of the `suffixes`.",required:!1},{propName:"suffixes",type:"arrayOf(string)",description:"A list of available suffixes to use when generating a random\ncolor for the avatar.",required:!1,defaultValue:"[\n  'red',\n  'pink',\n  'purple',\n  'deep-purple',\n  'indigo',\n  'blue',\n  'light-blue',\n  'cyan',\n  'teal',\n  'green',\n  'light-green',\n  'lime',\n  'yellow',\n  'amber',\n  'orange',\n  'deep-orange',\n  'brown',\n  'grey',\n  'blue-grey',\n]"},{propName:"suffix",type:"string",description:"The suffix to use for a color. This can be any value but\n*should* be one of the available `suffixes`.",required:!1},{propName:"iconSized",type:"bool",description:"Boolean if the `Avatar` should be sized to a `FontIcon` size. This\nwill just set the width and height to the `$md-font-icon-size`.",required:!1},{propName:"role",type:"oneOf([\n  'presentation'\n])",description:"A role for the avatar's image. When the `src` prop is set, either a `role` of `presentation`\nor the `alt` prop must be defined for a11y.",required:!1}],description:"The avatar component is used to convert a `FontIcon`, an image, or\na letter into an avatar.\n\nAny other props given to the Avatar component such as event listeners\nor styles will also be applied."}],badges:[{id:"badge",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Badges/Badge.js",component:"Badge",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the badge's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the badge's container.",required:!1},{propName:"badgeStyle",type:"object",description:"An optional style to apply to the badge.",required:!1},{propName:"badgeClassName",type:"string",description:"An optional className to apply to the badge.",required:!1},{propName:"badgeId",type:"custom",description:"The id to give the badge's content. This is required to help with the\n`aria-describedby` attribute that should be applied to one of the children.\n\nIf there is only one child that is a valid React element, the `aria-describedby`\nwill automatically be cloned into that child (so make sure your component passes\nthat prop correctly).\n\nIf there is only one child, but it is a string or number, the badge's container\nwill be updated to include the `aria-describedby`.\n\nIf there is more than child, you are required to add it to a child yourself.",required:!1},{propName:"children",type:"node",description:"The content to display with the badge's content. The size of this\nelement is determinate of the location of the content. You might have\nto update the positioning yourself.",required:!0},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the badge as.",required:!0,defaultValue:"'div'"},{propName:"badgeContent",type:"oneOfType([\n  number,\n  string,\n  node\n])",description:"The content to display in the badge. If the content is a number or a number string,\nthe number will be normalized if `normalizeContent` is enabled.",required:!0},{propName:"max",type:"number",description:"This will basically update the display value of the content to only be 2 digits. If\na number is greater than 99, 99+ will be displayed instead. This is really just to\nkeep the count inside the circular bubble.",required:!1,defaultValue:"99"},{propName:"primary",type:"bool",description:"Boolean if the primary color background should get applied to the badge's content.",required:!1},{propName:"secondary",type:"bool",description:"Boolean if the secondary color background should get applied to the badge's content.",required:!1},{propName:"default",type:"bool",description:"Boolean if the default styles should be applied.",required:!1},{propName:"circular",type:"bool",description:"Boolean if the badge's content should appear in a circular container. If this is\nundefined, the content will be in a circular container if the badgeContent is a number.",required:!1},{propName:"invisibleOnZero",type:"bool",description:"Boolean if the badge's notification should be invisible when the count is 0.",required:!1}],description:"The main use case of the `Badge` component is for notifications. It can\nhowever also place any content floating to whatever children are supplied."}],"bottom-navigations":[{id:"bottom-navigation",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/BottomNavigations/BottomNavigation.js",component:"BottomNavigation",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"links",type:"(props,propName,component,...args)=>{constlinks=props[propName]||props.actions;constlen=links.length;if(len<3){returnnewError(`Only${len}\\`${propName}\\`weregiventothe${component}.Atleast3arerequired.`);}elseif(len>5){returnnewError(`${len}\\`${propName}\\`weregiventothe${component}.Nomorethan5maybegiven.`);}returnPropTypes.arrayOf(PropTypes.shape({label:PropTypes.node.isRequired,icon:PropTypes.element,iconChildren:deprecated(PropTypes.node)",description:"A list of objects to generate a bottom navigation link. There must be at least 3 and no more\nthan 5 links. A link gets rendered as the `AccessibleFakeButton` component, so any additional\nprops in the link's shape will be passed along.\n\n",required:!1},{propName:"colored",type:"bool",description:"Boolean if the bottom navigation should be colored with the primary color or whatever color\nwas a result of the `react-md-theme-bottom-navigations-colored` mixin.",required:!1},{propName:"dynamic",type:"bool",description:"Boolean if the bottom navigation should dynamically appear based on scrolling. When the user\nscrolls the `dynamicThreshold` amount, this component will either disappear (scrolling down)\nor appear (scrolling up).",required:!1},{propName:"dynamicThreshold",type:"number",description:"The distance a user must scroll before the bottom navigation appears or disappears when it is `dynamic`.",required:!0,defaultValue:"5"},{propName:"onNavChange",type:"func",description:"An optional function to call when a link has been clicked. The callback will\ninclude the new active index and the click event.\n\n```js\nonNavChange(newActiveIndex, event);\n```",required:!1},{propName:"activeIndex",type:"controlled(PropTypes.number, 'onNavChange', 'defaultActiveIndex')",description:"An optional active index to use. This will make the component controlled and require the\n`onNavChange` prop to be defined.",required:!1},{propName:"defaultActiveIndex",type:"number",description:"The index for the link that is active by default.",required:!0,defaultValue:"0"},{propName:"defaultVisible",type:"bool",description:"Boolean if the bottom navigation is visible by default. This *should* probably always\nbe true.",required:!0,defaultValue:"true"},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the bottom navigation as.",required:!0,defaultValue:"'footer'"},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the bottom navigation.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1,defaultValue:"false"},{propName:"renderNode",type:"object",description:"Since the `BottomNavigation` component uses the `Portal` component, you can pass an optional\nHTML Node to render in.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the bottom navigation should render as the last child in the `renderNode` or `body`\ninstead of as the first.",required:!1},{propName:"transitionDuration",type:"number",description:"The transition duration for the dynamic bottom navigation to appear or disappear. This should\nmatch the `$md-bottom-navigation-transition-time` variable.",required:!0,defaultValue:"300"},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the visibility of the bottom navigation changes. The callback\nwill include the new visibility.\n\n```js\nonVisibilityChange(!visible);\n```",required:!1},{propName:"animate",type:"bool",description:"Boolean if the label on a shifting navigation should animate in and out.",required:!1,defaultValue:"true"},{propName:"onChange",type:"deprecated(PropTypes.func)",description:"The `onChange` prop has been deprecated and will be removed in the next major release.\n    \nUse `onNavChange` instead.",required:!1},{propName:"initiallyVisible",type:"deprecated(PropTypes.bool)",description:"The `initiallyVisible` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"initialActiveIndex",type:"deprecated(PropTypes.number)",description:"The `initialActiveIndex` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultActiveIndex` instead.",required:!1},{propName:"containerStyle",type:"deprecated(PropTypes.object)",description:"The `containerStyle` prop has been deprecated and will be removed in the next major release.\n    \nUse `style` instead.",required:!1},{propName:"containerClassName",type:"deprecated(PropTypes.string)",description:"The `containerClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `className` instead.",required:!1},{propName:"transitionName",type:"deprecated(PropTypes.string)",description:"The `transitionName` prop has been deprecated and will be removed in the next major release.\n    \nThere is no CSSTransitionGroup used anymore.",required:!1},{propName:"transitionEnterTimeout",type:"deprecated(PropTypes.number)",description:"The `transitionEnterTimeout` prop has been deprecated and will be removed in the next major release.\n    \nUse `transitionDuration` instead.",required:!1},{propName:"transitionLeaveTimeout",type:"deprecated(PropTypes.number)",description:"The `transitionLeaveTimeout` prop has been deprecated and will be removed in the next major release.\n    \nUse `transitionDuration` instead.",required:!1},{propName:"actions",type:"deprecated(PropTypes.array)",description:"The `actions` prop has been deprecated and will be removed in the next major release.\n    \nUse `links` instead.",required:!1}],description:"The `BottomNavigation` component is an alternative to the `NavigationDrawer` for handling navigation\nonly on mobile devices."}],buttons:[{id:"button",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Buttons/Button.js",component:"Button",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the button.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the button.",required:!1},{propName:"iconBefore",type:"bool",description:"A boolean if the icon should appear before or after the text for a `FlatButton` or\na `RaisedButton`.",required:!1,defaultValue:"true"},{propName:"children",type:"node",description:"Any children used to display the button. When the button type is `icon` or `floating`,\nthis can be used to render the `FontIcon` instead of the `iconChildren` prop.\n\nWhen the button type is `raised` or `flat`, this will be the label or any other elements\nyou'd like to display in the button. This can work hand-in-hand with the `iconClassName`\nand `iconChildren` to make a button with an icon and text.",required:!1},{propName:"iconClassName",type:"string",description:"An icon className to use in an optional `FontIcon` in any version of the button. This will\nbe used with the `children` prop. If the `floating` or `icon` props are set to true, this or\nthe children are required.\n\n@see [iconEl](#button-proptypes-icon-el)",required:!1},{propName:"iconChildren",type:"node",description:"Any children to use to display an icon in the button.\n\n@see [iconEl](#button-proptypes-icon-el)",required:!1},{propName:"iconEl",type:"element",description:"An optional icon to display. This prop is recommended over the `iconClassName` and `iconChildren`\nprops since it allows more control for you. There is also better SVG support since it won't wrap\nthe SVG with the `FontIcon` element.",required:!1},{propName:"type",type:"custom",description:"The type for the button. This is required when the `component` prop is not\nthe 'a' tag, a `function`, or when the `href` prop is defined.",required:!1,defaultValue:"'button'"},{propName:"primary",type:"bool",description:"Boolean if the button should be styled with the primary color.",required:!1},{propName:"secondary",type:"bool",description:"Boolean if the button should be styled with the secondary color.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the button is disabled.",required:!1},{propName:"href",type:"string",description:"An optional href for the button. This will style the `a` tag as a button.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"An optional component to render the button as. This allows you to get all the styles and functionality\nof the Button, but as a custom React component.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when the `click` event is triggered.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the `touchstart` event is triggered.",required:!1},{propName:"onTouchEnd",type:"func",description:"An optional function to call when the `touchend` event is triggered.",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when the `mousedown` event is triggered.",required:!1},{propName:"onMouseUp",type:"func",description:"An optional function to call when the `mouseup` event is triggered.",required:!1},{propName:"onKeyUp",type:"func",description:"An optional function to call when the `keyup` event is triggered.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the `keydown` event is triggered.",required:!1},{propName:"onMouseEnter",type:"func",description:"An optional function to call when the `mouseenter` event is triggered.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the `mouseleave` event is triggered.",required:!1},{propName:"fixed",type:"invalidIf(PropTypes.bool, 'flat', 'raised', 'icon')",description:"Boolean if the `FloatingButton` should be fixed to the page. This prop can\nonly be enabled if the `floating` prop is true.",required:!1},{propName:"fixedPosition",type:"oneOf([\n  'tr',\n  'tl',\n  'br',\n  'bl'\n])",description:"The position that the `FloatingButton` should be fixed to the page. It will\neither be fixed to the top right, top left, bottom right, or bottom left of\nthe page. This prop is only used if the `floating` prop and `fixed` prop are\n`true`.",required:!0,defaultValue:"'br'"},{propName:"mini",type:"invalidIf(PropTypes.bool, 'flat', 'raised', 'icon')",description:"Boolean if the `FloatingButton` should be `mini`. This prop can only be used\nwhen the `floating` prop is true.",required:!1},{propName:"flat",type:"bool",description:"Boolean if the `Button` should be styled as a `FlatButton`.",required:!1},{propName:"raised",type:"bool",description:"Boolean if the `Button` should be styled as a `RaisedButton`.",required:!1},{propName:"icon",type:"bool",description:"Boolean if the `Button` should be styled as a `IconButton`.\n\n@see [svg](#button-proptypes-svg)",required:!1},{propName:"floating",type:"bool",description:"Boolean if the `Button` should be styled as a `FloatingButton`.\n\n@see [svg](#button-proptypes-svg)",required:!1},{propName:"swapTheming",type:"bool",description:"Boolean if the theming of `primary` or `secondary` should be swapped. By default,\nonly flat and icon buttons can gain the theme colors as text color while the raised\nand floating buttons can gain the theme colors as background color.\n\nIf this prop is enabled, the flat and icon buttons will gain the theme background colors\nwhile the raised and icon will gain the theme text colors instead.\n\n@see [primary](#button-proptypes-primary)\n@see [secondary](#button-proptypes-secondary)",required:!1},{propName:"tooltipLabel",type:"node",description:"An optional label to use for the tooltip. This is normally only used for\n`IconButton`s or `FloatingButton`s, but can be used on `FlatButton`s and\n`RaisedButton`s if you wish. Knock yourself out!\n\nIf this prop is omitted, no tooltip will be included.",required:!1},{propName:"tooltipDelay",type:"number",description:"An optional delay before the tooltip appears on mouse over.",required:!1},{propName:"tooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The position for the tooltip.",required:!1},{propName:"forceIconSize",type:"custom",description:"Either a boolean that will enforce the 24x24 size of the font icon or a number of the size\nto enforce. This is useful when using other font icon libraries that do not have a consistent\nsize.",required:!1},{propName:"forceIconFontSize",type:"bool",description:"Boolean if the `forceIconSize` prop should also force the `font-size` instead of only `width` and `height`.",required:!1},{propName:"svg",type:"bool",description:"Boolean if the child is an SVGIcon or FontIcon when using the `icon` or `floating` props. This is only needed\nuntil the next release when the `label` migration can be removed.",required:!1},{propName:"label",type:"deprecated(PropTypes.node)",description:"The `label` prop has been deprecated and will be removed in the next major release.\n    \nUse the `children` prop instead.",required:!1},{propName:"noIcon",type:"deprecated(PropTypes.bool)",description:"The `noIcon` prop has been deprecated and will be removed in the next major release.\n    \nThis has been removed during the alpha release. Children will always attempt to be rendered outside of an icon by default for flat and raised buttons.",required:!1}],description:"The `Button` component can either be a `FlatButton`, `RaisedButton`, `IconButton`, or a\n`FloatingButton`.\n\nA `FlatButton` is a button with no depth on the screen that is ideally used in `Dialog`s\nor `CardActions`. The text can be optionally styled with the `primary` or `secondary` colors.\n\nA `RaisedButton` is a button with some depth to help actions have more prominent in flat\nlayouts or layouts with varying content. The background can be styled by the light/dark theme,\nor optionally the `primary` or `secondary` color.\n\nAn `IconButton` is a button that just displays a `FontIcon` as the child in a circle.\nThe `FontIcon` can be optionally styled with the `primary` or `secondary` color.\n\nA `FloatingButton` is a special case. Woop"}],cards:[{id:"card",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Cards/Card.js",component:"Card",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the card.",required:!1},{propName:"children",type:"node",description:"Any Card parts that should be rendered.",required:!1},{propName:"defaultExpanded",type:"bool",description:"Boolean if the card is expanded by default when there is an expander\ncomponent.",required:!1},{propName:"raise",type:"bool",description:"Boolean if the card should raise on hover when on a desktop display.",required:!1},{propName:"expanded",type:"controlled(PropTypes.bool, 'onExpanderClick', 'defaultExpanded')",description:"Boolean if the card is currently expanded. This will require the `onExpanderClick` function\nto toggle the state. The card will become controlled if this is not `undefined`.",required:!1},{propName:"onExpanderClick",type:"func",description:"An optional function to call when the expander is clicked.",required:!1},{propName:"expanderIcon",type:"element",description:"The icon to use for the expander button. It is recommended to use this prop over\nthe `expaderIconChildren` and `expanderIconClassName` since it provides more control.",required:!1,defaultValue:"<FontIcon>keyboard_arrow_down</FontIcon>"},{propName:"expanderTooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The tooltip position for the expander icon.",required:!1,defaultValue:"'left'"},{propName:"expanderTooltipLabel",type:"node",description:"The optional tooltip to display for the expander icon.",required:!1},{propName:"expanderTooltipDelay",type:"number",description:"An optional delay before the tooltip appears for the expander icon on hover.",required:!1},{propName:"tableCard",type:"bool",description:'Boolean if the card contains a table. It will update the styling accordingly.\nWhen using the `DataTable` component, do not wrap it in a `CardText` component.\n\n```js\n<Card tableCard={true}>\n  <CardTitle title="Example />\n  <DataTable>\n    ...\n  </DataTable>\n</Card>\n```',required:!1},{propName:"onMouseOver",type:"func",description:"An optional function to call when the mouseover event is triggered.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the mouseleave event is triggered.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the touchstart event is triggered.",required:!1},{propName:"animate",type:"bool",description:"Boolean if the card expansion should be animated.",required:!1,defaultValue:"true"},{propName:"expanderIconClassName",type:"deprecated(PropTypes.string)",description:"The `expanderIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `expanderIcon` instead.",required:!1},{propName:"expanderIconChildren",type:"deprecated(PropTypes.node)",description:"The `expanderIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `expanderIcon` instead.",required:!1},{propName:"initiallyExpanded",type:"deprecated(PropTypes.bool)",description:"The `initiallyExpanded` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultExpanded` instead.",required:!1},{propName:"isExpanded",type:"deprecated(PropTypes.bool)",description:"The `isExpanded` prop has been deprecated and will be removed in the next major release.\n    \nUse `expanded` instead.",required:!1},{propName:"iconChildren",type:"deprecated(PropTypes.node)",description:"The `iconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `expanderIconChildren` prop instead.",required:!1},{propName:"iconClassName",type:"deprecated(PropTypes.string)",description:"The `iconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `expanderIconClassName` prop instead.",required:!1}],description:""},{id:"card-title",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Cards/CardTitle.js",component:"CardTitle",functions:[],enums:[],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to add to the `title`.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"title",type:"node",description:"The title to display.",required:!0},{propName:"subtitle",type:"node",description:"An optional subtitle to display.",required:!1},{propName:"children",type:"node",description:"Any additional children to display in the title block\nafter the avatar, title, and subtitle.",required:!1},{propName:"avatar",type:"element",description:"An optional avatar to display before the title and subtitle.",required:!1},{propName:"expander",type:"bool",description:"Boolean if the `CardTitle` component should inject a button\nfor expanding all children below it.",required:!1},{propName:"isExpander",type:"deprecated(PropTypes.bool)",description:"The `isExpander` prop has been deprecated and will be removed in the next major release.\n    \nUse `expander` instead.",required:!1}],description:"The `CardTitle` component is used to render a title in a Card along\nwith an optional subtitle or avatar."},{id:"card-actions",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Cards/CardActions.js",component:"CardActions",functions:[],enums:[],getters:[],props:[{propName:"expander",type:"bool",description:"Boolean if this component should act as an expander and inject the\n`CardExpander`.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the actions container.",required:!1},{propName:"children",type:"node",description:"An actions to display.",required:!1},{propName:"centered",type:"bool",description:"Boolean if the actions should be centered.",required:!1},{propName:"stacked",type:"bool",description:"Boolean if the actions should be stacked.",required:!1},{propName:"isExpander",type:"deprecated(PropTypes.bool)",description:"The `isExpander` prop has been deprecated and will be removed in the next major release.\n    \nUse `expander` instead.",required:!1}],description:"The `CardActions` component is used for adding actions on your card.\nThe actions should be `FlatButton`s or `IconButton`s.\n\nThis component can act as a `CardExpander`."},{id:"card-text",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Cards/CardText.js",component:"CardText",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"children",type:"node",description:"The children to display.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render as.",required:!0,defaultValue:"'section'"},{propName:"expandable",type:"bool",description:"Boolean if this component should be expandable when there is a `CardExpander`\nabove it in the `Card`.",required:!1}],description:"The `CardText` component is a simple wrapper for text or any content in a `Card`.\nIt really just adds correct padding and font color."},{id:"card-action-overlay",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Cards/CardActionOverlay.js",component:"CardActionOverlay",functions:[],enums:[],getters:[],props:[{propName:"title",type:"node",description:"The title to use.",required:!1},{propName:"subtitle",type:"node",description:"The optional subtitle to use.",required:!1},{propName:"actions",type:"arrayOf(shape({\n  label: node.isRequired\n}))",description:"An array of flat button props.",required:!1},{propName:"children",type:"node",description:"Any children to display in the `CardTitle` component.",required:!1},{propName:"deprecated",type:"componentDeprecated(\n  'It is not a worthwhile component since the same thing can be accomplished with the `MediaOverlay` component.'\n)",description:"",required:!1}],description:"The `CardActionOverlay` component is a simple wrapper for generating an overlay\nfor the `CardMedia` component by having a `CardTitle` and an array of props\nfor generating `FlatButton` for the `CardActions` component."}],chips:[{id:"chip",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Chips/Chip.js",component:"Chip",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"labelStyle",type:"object",description:"An optional style to apply to the chip's label.",required:!1},{propName:"labelClassName",type:"string",description:"An optional className to apply to the chip's label.",required:!1},{propName:"rotateIcon",type:"bool",description:"Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.\nThe `.md-chip-icon--rotate` just rotates the icon 45 degrees.",required:!1,defaultValue:"true"},{propName:"children",type:"node",description:"Any children used to display the remove icon when `removable`.",required:!1,defaultValue:"<FontIcon>add_circle</FontIcon>"},{propName:"label",type:"node",description:"The label to display on the chip.",required:!0},{propName:"removable",type:"bool",description:"Boolean if the chip is removable.",required:!1},{propName:"avatar",type:"element",description:"An optional avatar to display on the chip.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when the `click` event is triggered.",required:!1},{propName:"onMouseEnter",type:"func",description:"An optional function to call when the `mouseenter` event is triggered.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the `mouseleave` event is triggered.",required:!1},{propName:"iconClassName",type:"deprecated(PropTypes.string)",description:"The `iconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `children` prop as a single FontIcon or SVGIcon instead.",required:!1},{propName:"remove",type:"deprecated(PropTypes.func)",description:"The `remove` prop has been deprecated and will be removed in the next major release.\n    \nUse `removable` and `onClick` instead.",required:!1},{propName:"removeIconChildren",type:"deprecated(PropTypes.node)",description:"The `removeIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `children` instead.",required:!1},{propName:"removeIconClassName",type:"deprecated(PropTypes.string)",description:"The `removeIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `children` prop as a single FontIcon or SVGIcon instead.",required:!1}],description:""}],"data-tables":[{id:"data-table",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/DataTable.js",component:"DataTable",functions:[],enums:[],getters:[],props:[{propName:"baseId",type:"requiredForA11yIfNot(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'plain')",description:"A base id to use for every checkbox or `EditDialogColumn` in the data table. This is\nrequired for a11y if the data table is not plain. It is recommended to always provide\nthis prop if you are using any of the advanced table components to auto-generate unique\nids for each element.\n\n@see [EditDialogColumn](/components/data-tables?tab=1#edit-dialog-column-proptypes)\n@see [SelectFieldColumn](/components/data-tables?tab=1#select-field-column-proptypes)\n@see [DropdownMenuColumn](/components/data-tables?tab=1#dropdown-menu-column-proptypes)\n@see [MenuButtonColumn](/components/data-tables?tab=1#menu-button-column-proptypes)\n@see [TablePagination](/components/data-tables?tab=1#table-pagination-proptypes)",required:!1},{propName:"style",type:"object",description:"Optional style to apply to the table. If the table is `responsive`, this will be applied to the surrounding `div`\ninstead of the table itself. Use the `tableStyle` in this case.\n\n@see [tableStyle](#data-table-proptypes-table-style)\n@see [responsive](#data-table-proptypes-responsive)",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the table. If the table is `responsive`, this will be applied to the\nsurrounding `div` instead of the table itself. Use the `tableClassName` in this case.\n\n@see [tableClassName](#data-table-proptypes-table-class-name)\n@see [responsive](#data-table-proptypes-responsive)",required:!1},{propName:"tableStyle",type:"object",description:"An optional style to apply to the `table` itself when the `responsive` prop is enabled. If the table is not\n`responsive`, use the `style` prop.\n\n@see [style](#data-table-proptypes-style)\n@see [responsive](#data-table-proptypes-responsive)",required:!1},{propName:"tableClassName",type:"string",description:"An optional className to apply to the `table` itself when the `responsive` prop is enabled. If the table is not\n`responsive`, use the `className` prop.\n\n@see [className](#data-table-proptypes-class-name)\n@see [responsive](#data-table-proptypes-responsive)",required:!1},{propName:"fixedWrapperStyle",type:"object",description:"An optional style to apply to the fixed table wrapper that appears when there is a fixed\nheader or a fixed footer.\n\n@see [fixedHeader](#data-table-proptypes-fixed-header)\n@see [fixedFooter](#data-table-proptypes-fixed-footer)\n@see [fixedWrapperClassName](#data-table-proptypes-fixed-wrapper-class-name)\n@see [fixedScrollWrapperStyle](#data-table-proptypes-fixed-scroll-wrapper-style)\n@see [fixedScrollWrapperClassName](#data-table-proptypes-fixed-scroll-wrapper-class-name)",required:!1},{propName:"fixedWrapperClassName",type:"string",description:"An optional className to apply to the fixed table wrapper that appears when there is a fixed\nheader or a fixed footer.\n\n@see [fixedHeader](#data-table-proptypes-fixed-header)\n@see [fixedFooter](#data-table-proptypes-fixed-footer)\n@see [fixedWrapperStyle](#data-table-proptypes-fixed-wrapper-style)\n@see [fixedScrollWrapperStyle](#data-table-proptypes-fixed-scroll-wrapper-style)\n@see [fixedScrollWrapperClassName](#data-table-proptypes-fixed-scroll-wrapper-class-name)",required:!1},{propName:"fixedScrollWrapperStyle",type:"object",description:"An optional style to apply to the fixed table wrapper's scroll container that appears when there is a fixed\nheader or a fixed footer.\n\n@see [fixedHeader](#data-table-proptypes-fixed-header)\n@see [fixedFooter](#data-table-proptypes-fixed-footer)\n@see [fixedWrapperStyle](#data-table-proptypes-fixed-wrapper-style)\n@see [fixedWrapperClassName](#data-table-proptypes-fixed-wrapper-class-name)\n@see [fixedScrollWrapperStyle](#data-table-proptypes-fixed-scroll-wrapper-style)",required:!1},{propName:"fixedScrollWrapperClassName",type:"string",description:"An optional className to apply to the fixed table wrapper's scroll container that appears when there is a fixed\nheader or a fixed footer.\n\n@see [fixedHeader](#data-table-proptypes-fixed-header)\n@see [fixedFooter](#data-table-proptypes-fixed-footer)\n@see [fixedWrapperStyle](#data-table-proptypes-fixed-wrapper-style)\n@see [fixedWrapperClassName](#data-table-proptypes-fixed-wrapper-class-name)\n@see [fixedScrollWrapperStyle](#data-table-proptypes-fixed-scroll-wrapper-style)",required:!1},{propName:"children",type:"node",description:"The table contents to display. This *should* be a list of `TableHeader` and `TableBody`\ncomponents.",required:!0},{propName:"defaultSelectedRows",type:"arrayOf(bool)",description:"An optional array of booleans denoting if a row is selected.\nThis is an associative array so the index must match the row\nnumber in the `TableBody` component.",required:!0,defaultValue:"[]"},{propName:"responsive",type:"bool",description:"Boolean if the table is responsive. This will wrap the table in a container\nthat allows scrolling to the right if overflow exists.",required:!0,defaultValue:"true"},{propName:"plain",type:"bool",description:"Boolean if this table should not include the checkboxes on each row.\nThis really means that the entire table is unselectable and you wish\nto display as a normal table.",required:!1},{propName:"checkedIcon",type:"element",description:"The checked checkbox icon to display when a row is selected. This really defaults\nto the `checkedCheckboxIcon` prop from the `SelectionControl`.\n\n@see [SelectionControl#checkedCheckboxIcon](/components/selection-controls?tab=1#selection-control-proptypes-checked-checkbox-icon)",required:!1},{propName:"uncheckedIcon",type:"element",description:"The unchecked checkbox icon to display when a row is selected. This really defaults\nto the `uncheckedCheckboxIcon` prop from the `SelectionControl`.\n\n@see [SelectionControl#uncheckedCheckboxIcon](/components/selection-controls?tab=1#selection-control-proptypes-unchecked-checkbox-icon)",required:!1},{propName:"onRowToggle",type:"invalidIf(PropTypes.func, 'plain')",description:"An optional function to call when a non-plain data table has a row toggled. The callback\nwill include:\n- the row id\n- boolean if the row is now checked\n- the total count of rows selected\n- the change event\n\nAll rows will be toggled on or off when the row id is 0 and a `thead` exists in the table.",required:!1},{propName:"selectableRows",type:"bool",description:"Boolean if the `DataTable` should inject checkboxes at the start of each row.",required:!1,defaultValue:"true"},{propName:"indeterminate",type:"bool",description:"Boolean if the checkboxes in the table should also include an _indeterminate_ state.\nIt will use the `indeterminateIconChildren` and `indeterminateIconClassName` when at least\n1 row has been checked, but not all rows.",required:!1},{propName:"indeterminateIcon",type:"element",description:"An optional icon to display when the selected state is indeterminate.\n\n@see [indeterminate](#data-table-proptypes-indeterminate)",required:!1,defaultValue:"<FontIcon>indeterminate_check_box</FontIcon>"},{propName:"checkboxHeaderLabel",type:"string",description:"This is the aria-label to apply to the checkbox in the table's header. This\nis just used for accessibility since the checkboxes have no visible label.",required:!0,defaultValue:"'Toggle All Rows'"},{propName:"checkboxLabelTemplate",type:"oneOfType([\n  func,\n  string\n])",description:"This is the aria-label to apply to a checkbox in the table's body. This can either\nbe a constant string that will replace `{{row}}` with the current row index, or\na function that takes the row index and returns a string.\n\n```js\ncheckboxLabelTemplate={rowIndex => `Toggle row ${row}`}\n```",required:!0,defaultValue:"'Toggle row {{row}}'"},{propName:"fixedHeader",type:"bool",description:"Boolean if the table should include a fixed header. This will allow the `TableHeader` component\nto stay fixed to the top of the table while the `TableBody` scrolls horizontally.\n\n@see [fixedFooter](#data-table-proptypes-fixed-footer)\n@see [react-md-make-fixed-table](/components/data-tables?tab=2#mixin-react-md-make-fixed-table)",required:!1,defaultValue:"false"},{propName:"fixedFooter",type:"bool",description:"Boolean if the table should include a fixed footer. This will allow the `TableFooter` component\nto stay fixed to the bottom of the table while the `TableBody` scrolls horizontally.\n\n@see [fixedHeader](#data-table-proptypes-fixed-header)\n@see [react-md-make-fixed-table](/components/data-tables?tab=2#mixin-react-md-make-fixed-table)",required:!1,defaultValue:"false"},{propName:"fixedDividers",type:"oneOfType([\n  bool,\n    shape({\n    header: bool,\n    footer: bool\n  })\n])",description:"Either a boolean or a shape of booleans for if a divider should appear at the top or bottom of the table\nwhen there is a fixed header/footer. By default, this will automatically create dividers.\n\n@see [fixedHeader](#data-table-proptypes-fixed-header)\n@see [fixedFooter](#data-table-proptypes-fixed-footer)",required:!1,defaultValue:"true"},{propName:"fixedHeight",type:"number",description:"An optional height to set for a table with a fixed header and/or a fixed footer. It is recommended to use\nthe related `react-md-make-fixed-table` mixin instead.\n\n@see [headerHeight](#data-table-proptypes-header-height)\n@see [footerHeight](#data-table-proptypes-footer-height)",required:!1},{propName:"fixedWidth",type:"number",description:"An optional width to set for a table with a fixed header and/or a fixed footer. It is recommended to use\nthe related `react-md-make-fixed-table` mixin instead.",required:!1},{propName:"headerHeight",type:"number",description:"This is the height of the table's header columns. This should be equal to the `md-data-table-header-height`\nvariable.\n\n@see [md-data-table-header-height](/components/data-tables?tab=2#variable-md-data-table-header-height)\n@see [fixedHeight](#data-table-proptypes-fixed-height)",required:!0,defaultValue:"56"},{propName:"footerHeight",type:"number",description:"This is the height of the table's header columns. This should be equal to the `md-data-table-header-height`\nvariable.\n\n@see [md-data-table-column-height](/components/data-tables?tab=2#variable-md-data-table-column-height)\n@see [fixedHeight](#data-table-proptypes-fixed-height)",required:!0,defaultValue:"48"},{propName:"fullWidth",type:"bool",description:"Boolean if the `<table>` element should always span the entire width of its container.",required:!1,defaultValue:"true"},{propName:"indeterminateIconChildren",type:"deprecated(PropTypes.node)",description:"The `indeterminateIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `indeterminateIcon` prop instead.",required:!1},{propName:"indeterminateIconClassName",type:"deprecated(PropTypes.string)",description:"The `indeterminateIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `indeterminateIcon` prop instead.",required:!1},{propName:"checkedIconClassName",type:"deprecated(PropTypes.string)",description:"The `checkedIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checkedIcon` prop instead.",required:!1},{propName:"checkedIconChildren",type:"deprecated(PropTypes.node)",description:"The `checkedIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checkedIcon` prop instead.",required:!1},{propName:"uncheckedIconClassName",type:"deprecated(PropTypes.string)",description:"The `uncheckedIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `uncheckedIcon` prop instead.",required:!1},{propName:"uncheckedIconChildren",type:"deprecated(PropTypes.node)",description:"The `uncheckedIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `uncheckedIcon` prop instead.",required:!1}],description:"The `DataTable` component is used to manage the state of all rows.\nThis can either be a __plain__ table or a __data__ table.\n\nA __data__ table will include checkboxes on each row while a __plain__ table\nwill not."},{id:"table-header",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TableHeader.js",component:"TableHeader",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the table header",required:!1},{propName:"children",type:"custom",description:"This should be a single `TableRow` component. The `custom` validation will\nwarn you if there are more than one children given or none at all.",required:!1}],description:"A `thead` component to use in the `DataTable` component. This\nwill automatically update the header row to check if it is selected\nand inject a function to toggle all rows selected if the row is\nuncontrolled. It will also automatically attempt to set the `TableColumn`\ncomponents to be the header type."},{id:"table-body",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TableBody.js",component:"TableBody",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the tbody.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the tbody.",required:!1},{propName:"children",type:"oneOfType([\n  element,\n  arrayOf(element)\n])",description:"A list or a single item of `TableRow` components to render.",required:!1}],description:"The `TableBody` component is used for managing the state of all\n`TableRow` inside of it."},{id:"table-row",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TableRow.js",component:"TableRow",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the row.",required:!1},{propName:"children",type:"oneOfType([\n  element,\n  arrayOf(element),\n  node\n])",description:'A single or list of `TableColumn` to display in the table.\n\n> The specs "require" at least 3 columns for a non-plain data table, but that isn\'t\nstrictly enforced here.',required:!0},{propName:"onClick",type:"func",description:"An optional onClick function to call when a row is clicked.",required:!1},{propName:"onCheckboxClick",type:"func",description:"A function to call when the checkbox is clicked. This\nfunction will will be called with `(rowIndex, checked, event)`.\nThe `TableBody` and `TableHeader` components will automatically\nmerge in a function to toggle the checkbox.",required:!1},{propName:"onMouseOver",type:"func",description:"An optional function to call onMouseOver.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call onMouseLeave.",required:!1},{propName:"selected",type:"bool",description:"Boolean if the row is currently selected. If this value will be\ninjected by the `TableHeader` or `TableBody` component.",required:!1},{propName:"selectable",type:"bool",description:"Boolean if the current row is selectable. This value will take precedence over anything inherited\nby the `DataTable`.",required:!1},{propName:"autoAdjust",type:"deprecated(PropTypes.bool)",description:"The `autoAdjust` prop has been deprecated and will be removed in the next major release.\n    \nManually specify `grow` on one of the columns instead.",required:!1}],description:"A component for displaying a row in a `DataTable`. This will\nautomatically add a `Checkbox` component to the row if it is not\na `plain` table."},{id:"table-column",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TableColumn.js",component:"TableColumn",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"The optional className for the table column",required:!1},{propName:"fixedStyle",type:"object",description:"An optional style to apply to the surrounding div when the DataTable has been\nset to include a fixed header or a fixed footer.",required:!1},{propName:"fixedClassName",type:"string",description:"An optional className to apply to the surrounding div when the DataTable has been\nset to include a fixed header or a fixed footer.",required:!1},{propName:"children",type:"node",description:"The children to display in the column.",required:!1},{propName:"sorted",type:"bool",description:"Boolean if the column is currently sorted. If this prop is not `undefined`,\nit will add the sort icon unto this column. You will also need to use the\n`onClick` function to toggle the `sorted` prop as well as handling the sorting\nof data.\n\nThis value should really only be set in the `TableHeader` component.",required:!1},{propName:"sortIcon",type:"element",description:"The icon to show when a column is sortable.",required:!1,defaultValue:"<FontIcon>arrow_upward</FontIcon>"},{propName:"sortIconBefore",type:"bool",description:"Boolean if the sortIcon should appear before the text in the column.",required:!1,defaultValue:"true"},{propName:"numeric",type:"bool",description:"A boolean if the column has numeric data. It will right-align the data.",required:!1},{propName:"adjusted",type:"bool",description:"Boolean if the table column should gain the `.md-data-table--adjusted` class name. By default,\nevery column will gain this class name unless it is an `EditDialogColumn`, a `SelectFieldColumn`,\nor the `grow` prop is enabled.",required:!1,defaultValue:"true"},{propName:"grow",type:"bool",description:"Boolean if the column should expand to fill any remaining width in the container. There should\nreally only be one column with the `grow` prop enabled. In addition, it should really only be\napplied to one of the columns in the TableHeader.",required:!1},{propName:"selectColumnHeader",type:"bool",description:"Boolean if this column is the `th` for a column of `SelectFieldColumn`. This will apply\nadditional styling to the column to position with the select field.",required:!1},{propName:"header",type:"bool",description:"Boolean if this is a `th` component. This value **should** be set\nautomatically for you if it is in the `TableHeader` component.",required:!0,defaultValue:"false"},{propName:"tooltipLabel",type:"node",description:"The optional tooltip to render on hover.",required:!1},{propName:"tooltipDelay",type:"number",description:"An optional delay to apply to the tooltip before it appears.",required:!1},{propName:"tooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The position of the tooltip.",required:!1},{propName:"plain",type:"bool",description:"Boolean if the `TableColumn` should gain the `plain` styles. This means that the text\nin the column can wrap and there is no height limit enforced with some additional padding.",required:!1},{propName:"scope",type:"oneOf([\n  'row',\n  'col'\n])",description:"An optional scope to apply to the table column. If omitted, the scope will be set to\n`'col'` if inside of the `TableHeader` component. This is really only needed for\nheader columns.",required:!1},{propName:"sortIconChildren",type:"deprecated(PropTypes.node)",description:"The `sortIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `sortIcon` prop instead.",required:!1},{propName:"sortIconClassName",type:"deprecated(PropTypes.string)",description:"The `sortIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `sortIcon` prop instead.",required:!1}],description:"A column in a table. This is either the `th` or `td` component."},{id:"table-footer",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TableFooter.js",component:"TableFooter",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"children",type:"node",description:"The children to display. This should really be one or a list of `TableRow`\ncomponents.",required:!1}],description:"This is just a simple <tfoot> component."},{id:"table-pagination",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TablePagination.js",component:"TablePagination",functions:[],enums:[],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the select field. If this is omitted, it will be\nthe `DataTable`'s `baseId` with '-pagination'.\n\n@see [DataTable#baseId](/components/data-tables?tab=1#data-table-proptypes-base-id)",required:!1},{propName:"incrementId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the increment icon button. If this is omitted, it will be\nthe `id` with '-increment-btn'.\n\n@see [id](#table-pagination-proptypes-id)",required:!1},{propName:"decrementId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the decrement icon button. If this is omitted, it will be\nthe `id` with '-decrement-btn'.\n\n@see [id](#table-pagination-proptypes-id)",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the `tfoot` tag.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the `tfoot` tag.",required:!1},{propName:"selectFieldStyle",type:"object",description:"An optional style to apply to the select field.\n\n@see [SelectField#style](/components/select-fields?tab=1#select-field-proptypes-style)",required:!1},{propName:"selectFieldClassName",type:"string",description:"An optional className to apply to the select field.\n\n@see [SelectField#className](/components/select-fields?tab=1#select-field-proptypes-class-name)",required:!1},{propName:"selectFieldInputStyle",type:"object",description:"An optional style to apply to the select field's input.\n\n@see [SelectField#inputStyle](/components/select-fields?tab=1#select-field-proptypes-input-style)",required:!1},{propName:"selectFieldInputClassName",type:"string",description:"An optional className to apply to the select field's input.\n\n@see [SelectField#inputClassName](/components/select-fields?tab=1#select-field-proptypes-input-class-name)",required:!1},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the select field should use the simplified menu logic.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1,defaultValue:"false"},{propName:"onPagination",type:"func",description:"A function to call when a user clicks the increment or decrement pagination\nicon button. This function will be given the new start index and the number\nor rows per page as well as the current page.\n\n```js\nonPagination(newStart, rowsPerPage, currentPage);\n```",required:!0},{propName:"rowsPerPage",type:"number",description:"The current value for the select field holding the number of rows per page.",required:!1},{propName:"page",type:"number",description:"The current page for the pagination. This will make the component controlled, so the only way to get pagination\nis making sure you are updating this prop after the `onPagination` callback is called.\n\nPages start from 1 instead of 0.",required:!1},{propName:"defaultPage",type:"number",description:"The default page to start from for the pagination. Pages start from 1 instead of 0.",required:!0,defaultValue:"1"},{propName:"defaultRowsPerPage",type:"number",description:"The default number of rows per page to display. This will be the value for the\n`SelectField`.",required:!0,defaultValue:"10"},{propName:"rowsPerPageLabel",type:"node",description:"The label to use for the rows per page `SelectField`.",required:!0,defaultValue:"'Rows per page:'"},{propName:"rowsPerPageItems",type:"arrayOf(number)",description:"A list of numbers for the amount of rows per page to display at a time.\nThis will be rendered into the `SelectField`.",required:!0,defaultValue:"[10, 20, 30, 40, 50, 100]"},{propName:"rows",type:"number",description:"The total number of rows that can be displayed. This is the unfiltered/non-subset\nnumber of rows. This is used to help calculate the increment/decrement values to\ndisplay and determine if the user can increment/decrement again.",required:!0},{propName:"incrementIcon",type:"element",description:"The icon to use for the increment icon button.",required:!1,defaultValue:"<FontIcon>keyboard_arrow_right</FontIcon>"},{propName:"decrementIcon",type:"element",description:"The icon to use for the decrement icon button.",required:!1,defaultValue:"<FontIcon>keyboard_arrow_left</FontIcon>"},{propName:"paginationLabel",type:"func",description:"Function to return the label text (or node) used to display start row and last row\nof the current page and total rows. The function has to accept three number parameters\ni.e.: (startRow, lastRow, totalRows) => `${startRow}-${lastRow} of ${totalRows}`\nand to return a string (or node) to display the label. If you do not return pure text\nmake sure, the node is allowed to mount inside a <span> node to avoid DOM warnings or\ndefective layout.",required:!1,defaultValue:"(startRow, lastRow, totalRows) => `${startRow}-${lastRow} of ${totalRows}`"},{propName:"incrementIconChildren",type:"deprecated(PropTypes.node)",description:"The `incrementIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `incrementIcon` prop instead.",required:!1},{propName:"incrementIconClassName",type:"deprecated(PropTypes.string)",description:"The `incrementIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `incrementIcon` prop instead.",required:!1},{propName:"decrementIconChildren",type:"deprecated(PropTypes.node)",description:"The `decrementIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `decrementIcon` prop instead.",required:!1},{propName:"decrementIconClassName",type:"deprecated(PropTypes.string)",description:"The `decrementIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `decrementIcon` prop instead.",required:!1}],description:"The `TablePagination` component is used to generate the table footer that helps\npagination through a large dataset by limiting the number of rows per page.\nThe pagination will always be placed persistently at the bottom of the table\nso that when a user scrolls to the right, they will always be able to use the\npagination."},{id:"table-card-header",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/TableCardHeader.js",component:"TableCardHeader",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render as.",required:!0,defaultValue:"'header'"},{propName:"transitionName",type:"string",description:"The transition name to use when the contextual header appears.",required:!0,defaultValue:"'md-drop-down'"},{propName:"transitionEnterTimeout",type:"number",description:"The transition time to use when the contextual header appears.",required:!0,defaultValue:"150"},{propName:"transitionLeaveTimeout",type:"number",description:"The transition time to use when the contextual header disappears.",required:!0,defaultValue:"150"},{propName:"title",type:"oneRequired(PropTypes.node, 'leftChildren', 'children')",description:"An optional title to display. It is invalid to have both `title` and `leftChildren`\ndefined as only one will be used.",required:!1},{propName:"titleId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the title.",required:!1},{propName:"contextualTitle",type:"node",description:"An optional title to display in the contextual header. This will get wrapped in an `h2`\ntag and additional styles applied.",required:!1},{propName:"contextualTitleId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the contextual title.",required:!1},{propName:"contextualChildren",type:"node",description:"Any additional children to display in the contextual header. This will be displayed after\nthe optional `contextualTile` and before the `actions`.",required:!1},{propName:"leftChildren",type:"invalidIf(PropTypes.oneOfType([\n  PropTypes.element,\n  PropTypes.arrayOf(PropTypes.element),\n]), 'title')",description:"An optional button or list of buttons to display instead of a title.",required:!1},{propName:"children",type:"node",description:"An additional children to display after the `title` or `leftChildren` prop.\nThis is _normally_ a list of icon button or menu button.",required:!1},{propName:"actions",type:"oneOfType([\n  element,\n  arrayOf(element)\n])",description:"An optional button/menu button or a list of button/menu button to display in the\ncontextual header once the user has selected a row or multiple rows.",required:!1},{propName:"noActionsAdjust",type:"bool",description:"Boolean if the `actions` prop should not have each element cloned with additional\nclass names.",required:!1},{propName:"noChildrenAdjust",type:"bool",description:"Boolean if the `children` prop should not have each element cloned with additional\nclass names.",required:!1},{propName:"noLeftChildrenClone",type:"bool",description:"Boolean if the `leftChildren` prop should not have each element cloned with additional\nclass names.",required:!1},{propName:"visible",type:"bool",description:"Boolean if the contextual header is currently visible.",required:!0}],description:"The `TableCardHeader` is used when contextual actions should appear when\na user selects a row."},{id:"edit-dialog-column",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/EditDialogColumn.js",component:"EditDialogColumn",functions:[],enums:[{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]},{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to use for the text field in the column. If this is omitted,\nthe id will be `${dialogId}-field`.\n\n@see [dialogId](#edit-dialog-column-proptypes-dialog-id)",required:!1},{propName:"dialogId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to use for the dialog that appears in the column. If this is omitted,\nthe id will be `${rowId}-${cellIndex}-edit-dialog-field`.",required:!1},{propName:"style",type:"object",description:"The optional style to apply to the edit dialog's column.",required:!1},{propName:"className",type:"string",description:"The optional className to apply to the edit dialog's column.",required:!1},{propName:"layoverStyle",type:"object",description:"An optional style to apply to the dialog's surrounding `Layover` component.",required:!1},{propName:"layoverClassName",type:"string",description:"An optional className to the dialog's surrounding `Layover` component.",required:!1},{propName:"dialogStyle",type:"object",description:"The optional style to apply to the edit dialog.",required:!1},{propName:"dialogClassName",type:"string",description:"The optional className to apply to the edit dialog.",required:!1},{propName:"dialogContentStyle",type:"object",description:"An optional style to apply to the dialog's content area. This is the area\nthat holds the text field.",required:!1},{propName:"dialogContentClassName",type:"string",description:"An optional class name to apply to the dialog's content area. This is the area\nthat holds the text field.",required:!1},{propName:"dialogZDepth",type:"number",description:"The zDepth to apply to the dialog when not inline.\n\n@see [Paper#zDepth](/components/papers?tab=1#paper-proptypes-z-depth)",required:!0,defaultValue:"1"},{propName:"textFieldStyle",type:"object",description:"An optional style to apply to the text field.",required:!1},{propName:"textFieldClassName",type:"string",description:"An optional class name to apply to the text field.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the text field's input.",required:!1},{propName:"inputClassName",type:"string",description:"An optional class name to apply to the text field's input.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the edit dialog is currently disabled.",required:!1},{propName:"inline",type:"bool",description:"Boolean if the text field should be editable inline instead of in a dialog.\n\n@see [inlineIcon](#edit-dialog-column-proptypes-inline-icon)",required:!1},{propName:"inlineIcon",type:"element",description:"An optional icon to set for the inline edit dialog column. Setting this prop to null\nwill not render an icon.",required:!1,defaultValue:"<FontIcon>edit</FontIcon>"},{propName:"defaultValue",type:"oneOfType([\n  number,\n  string\n])",description:"The default value to use for the text field.",required:!0,defaultValue:"''"},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'onChange', 'defaultValue')",description:"A value to use for the edit dialog text field. This will make the component controlled\nso you will need to provide an `onChange` function.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the text field's value has changed. This is required\nif the `value` prop has been defined.\n\n@see [TextField#onChange](/components/text-fields?tab=1#text-field-proptypes-on-change)",required:!1},{propName:"onFocus",type:"func",description:"An optional function to call when the text field gains focus.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the keydown event is triggered on the text field.",required:!1},{propName:"label",type:"node",description:"An optional label for the text field. When displaying an `inline` edit dialog column,\nthe `placeholder` prop should be used instead. This is because the text field changes\nto the `block` type when `inline`.\n\n@see [inline](#edit-dialog-column-proptypes-inline)\n@see [placeholder](#edit-dialog-column-proptypes-placeholder)\n@see [TextField#block](/components/text-fields?tab=1#text-field-proptypes-block)",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder for the text field.",required:!1},{propName:"large",type:"bool",description:"Boolean if the edit dialog should become a large dialog. When the dialog is large,\nthe `title` prop is required.\n\nA large dialog has a Title followed by the text field, and then a cancel and ok action\nbuttons below.",required:!1},{propName:"title",type:"node",description:"The title to use for the large edit dialog. This prop is required if the `large` prop\nis enabled.",required:!1},{propName:"maxLength",type:"number",description:"An optional `maxLength` to apply to the text field.\n\n@see [TextField#maxLength](/components/text-fields?tab=1#text-field-proptypes-max-length)",required:!1},{propName:"onOkClick",type:"func",description:'An optional function to call when the "Ok" button has been clicked, the user presses enter\non * the text field or when the `okOnOutsideClick` prop has been enabled and the user clicks\nsomewhere on the page.\n\nThe callback will include the current value and the click or keypress event.\n```js\nonOkClick(value, event)\n```\n\n@see [large](#edit-dialog-column-proptypes-large)',required:!1},{propName:"okLabel",type:"node",description:'The label to use for the "Ok" button in large dialogs.\n\n@see [large](#edit-dialog-column-proptypes-large)',required:!0,defaultValue:"'Save'"},{propName:"okPrimary",type:"bool",description:'Boolean if the "Ok" button in large dialogs should be styled with the primary color.\nTo get a `default` styled button, set both `okPrimary` and `okSecondary` (or omit `okSecondary`)\nto `false`.\n\n@see [large](#edit-dialog-column-proptypes-large)\n@see [okSecondary](#edit-dialog-column-proptypes-ok-secondary)',required:!1,defaultValue:"true"},{propName:"okSecondary",type:"bool",description:'Boolean if the "Ok" button in large dialogs should be styled with the secondary color.\n\n@see [large](#edit-dialog-column-proptypes-large)\n@see [okPrimary](#edit-dialog-column-proptypes-ok-primary)',required:!1},{propName:"okProps",type:"object",description:'Any additional props to apply to the "Ok" button. This will override any of the other\nbutton props.\n\n@see [okLabel](#edit-dialog-column-proptypes-ok-label)\n@see [okPrimary](#edit-dialog-column-proptypes-ok-primary)\n@see [okSecondary](#edit-dialog-column-proptypes-ok-secondary)',required:!1},{propName:"onCancelClick",type:"func",description:'An optional function to call when the "Cancel" button has been clicked in large edit dialogs.\nThe callback will include the text field\'s value before any edits occurred and the click event.\n\n```js\nonCancelClick(previousValue, event)\n```\n\n@see [large](#edit-dialog-column-proptypes-large)',required:!1},{propName:"cancelLabel",type:"node",description:'The label to give to the "Cancel" button in large edit dialogs.\n\n@see [large](#edit-dialog-column-proptypes-large)',required:!0,defaultValue:"'Cancel'"},{propName:"cancelPrimary",type:"bool",description:'Boolean if the "Cancel" button in large dialogs should be styled with the primary color.\nTo get a `default` styled button, set both `cancelPrimary` and `cancelSecondary` (or\nomit `cancelSecondary`) to `false`.\n\n@see [large](#edit-dialog-column-proptypes-large)\n@see [cancelSecondary](#edit-dialog-column-proptypes-cancel-secondary)',required:!1,defaultValue:"true"},{propName:"cancelSecondary",type:"bool",description:'Boolean if the "Cancel" button in large dialogs should be styled with the secondary color.\n\n@see [large](#edit-dialog-column-proptypes-large)\n@see [cancelPrimary](#edit-dialog-column-proptypes-cancel-primary)',required:!1},{propName:"cancelProps",type:"object",description:'Any additional props to apply to the "Cancel" button. This will override any of the other\nbutton props.\n\n@see [cancelLabel](#edit-dialog-column-proptypes-cancel-label)\n@see [cancelPrimary](#edit-dialog-column-proptypes-cancel-primary)\n@see [cancelSecondary](#edit-dialog-column-proptypes-cancel-secondary)',required:!1},{propName:"okOnOutsideClick",type:"bool",description:"Boolean if the action for clicking somewhere on on the page while the dialog is open\nsaves the changes or cancels to the previous value before opening the dialog.\n\n@see [onOkClick](#edit-dialog-column-proptypes-on-ok-click)\n@see [onCancelClick](#edit-dialog-column-proptypes-on-cancel-click)",required:!1,defaultValue:"true"},{propName:"onOutsideClick",type:"func",description:"An optional function to call when a user clicks out of the text field.",required:!1},{propName:"closeOnOutsideClick",type:"bool",description:"Boolean if the edit dialog should be closed if the user clicks somewhere else on the page\nwhile the dialog is open.",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the Edit Dialog should be visible by default. This only applies when the `inline` prop\nis not enabled.",required:!1,defaultValue:"false"},{propName:"visibleOnFocus",type:"bool",description:"Boolean if the edit dialog should automatically open when the text field is focused for non-inline\ndialogs. This is enabled by default for backwards compatibility.",required:!1,defaultValue:"true"},{propName:"type",type:"string",description:"The type for the text field in the edit dialog.\n\n@see [TextField#type](/components/text-fields?tab=1#text-field-proptypes-type)",required:!1,defaultValue:"'text'"},{propName:"anchor",type:"custom",description:'This is how the dialog gets "anchored" to the table column.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)',required:!1},{propName:"belowAnchor",type:"custom",description:"This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n\n@see [Layover#belowAnchor](/components/helpers/layovers?tab=1#layover-proptypes-below-anchor)",required:!1},{propName:"animationPosition",type:"custom",description:"This is the animation position to use for the dialog.\n\n@see [Layover#animationPosition](/components/helpers/layovers?tab=1#layover-proptypes-animation-position)",required:!1,defaultValue:"EditDialogColumn.Positions.BELOW"},{propName:"fixedTo",type:"custom",description:"This is how the dialog should be fixed within the table. When this is omitted, it will\nautomatically use the responsive table as the fixture so that the dialog will close/adjust itself\nto the scrolling of the table.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)",required:!1},{propName:"xThreshold",type:"number",description:"@see [Layover#xThreshold](/components/helpers/layovers?tab=1#layover-proptypes-x-threshold)",required:!1},{propName:"yThreshold",type:"number",description:"@see [Layover#yThreshold](/components/helpers/layovers?tab=1#layover-proptypes-y-threshold)",required:!1},{propName:"centered",type:"bool",description:"@see [Layover#centered](/components/helpers/layovers?tab=1#layover-proptypes-centered)",required:!1},{propName:"sameWidth",type:"bool",description:"@see [Layover#sameWidth](/components/helpers/layovers?tab=1#layover-proptypes-same-width)",required:!1},{propName:"transitionName",type:"string",description:"@see [Layover#transitionName](/components/helpers/layovers?tab=1#layover-proptypes-transition-name)",required:!1},{propName:"transitionEnterTimeout",type:"number",description:"@see [Layover#transitionEnterTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-enter-timeout)",required:!1},{propName:"transitionLeaveTimeout",type:"number",description:"@see [Layover#transitionLeaveTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-leave-timeout)",required:!1},{propName:"tooltipLabel",type:"node",description:"The optional tooltip to render on hover.",required:!1},{propName:"tooltipDelay",type:"number",description:"An optional delay to apply to the tooltip before it appears.",required:!1},{propName:"tooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The position of the tooltip.",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"false"},{propName:"simplifiedDialog",type:"bool",description:"Boolean if the dialog logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the dialog.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1},{propName:"minLeft",type:"custom",description:"@see [Layover#minLeft](/components/helpers/layovers?tab=1#layover-proptypes-min-left)",required:!1,defaultValue:"0"},{propName:"minRight",type:"custom",description:"@see [Layover#minRight](/components/helpers/layovers?tab=1#layover-proptypes-min-right)",required:!1,defaultValue:"0"},{propName:"minBottom",type:"custom",description:"@see [Layover#minBottom](/components/helpers/layovers?tab=1#layover-proptypes-min-bottom)",required:!1,defaultValue:"0"},{propName:"scrollIntoView",type:"bool",description:"Boolean if the edit dialog should attempt to scroll into view if the full\ndialog can not be displayed in the viewport when it was toggled open.\n\n@see [scrollIntoViewPadding](#edit-dialog-column-proptypes-scroll-into-view-padding)",required:!1,defaultValue:"true"},{propName:"scrollIntoViewPadding",type:"number",description:"The amount of padding that should be applied when the cell is scrolled into view.\nThis will be applied to the left of the cell.",required:!1,defaultValue:"16"},{propName:"onClick",type:"func",description:"An optional function to call when the `click` event is triggered in the column.",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when the `mousedown` event is triggered in the column.",required:!1},{propName:"onMouseUp",type:"func",description:"An optional function to call when the `mouseup` event is triggered in the column.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the `touchstart` event is triggered in the column.",required:!1},{propName:"onTouchEnd",type:"func",description:"An optional function to call when the `touchend` event is triggered in the column.",required:!1},{propName:"onMouseEnter",type:"func",description:"An optional function to call when the `mouseenter` event is triggered in the column.",required:!1},{propName:"onMouseOver",type:"func",description:"An optional function to call when the `mouseover` event is triggered in the column.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the `mouseleave` event is triggered in the column.",required:!1},{propName:"onTouchMove",type:"func",description:"An optional function to call when the `touchmove` event is triggered in the column.",required:!1},{propName:"inlineIconChildren",type:"deprecated(PropTypes.node)",description:"The `inlineIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `inlineIcon` prop instead.",required:!1},{propName:"inlineIconClassName",type:"deprecated(PropTypes.string)",description:"The `inlineIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `inlineIcon` prop instead.",required:!1},{propName:"noIcon",type:"deprecated(PropTypes.bool)",description:"The `noIcon` prop has been deprecated and will be removed in the next major release.\n    \nSet the `inlineIcon` prop to `null` instead.",required:!1},{propName:"enforceMinWidth",type:"deprecated(PropTypes.bool)",description:"The `enforceMinWidth` prop has been deprecated and will be removed in the next major release.\n    \nThe min width will always be enforced based on the `$md-edit-dialog-min-width` Sass variable.",required:!1},{propName:"scrollThreshold",type:"deprecated(PropTypes.number)",description:"The `scrollThreshold` prop has been deprecated and will be removed in the next major release.\n    \nUse `xThreshold` and `yThreshold` instead.",required:!1},{propName:"transitionDuration",type:"deprecated(PropTypes.number)",description:"The `transitionDuration` prop has been deprecated and will be removed in the next major release.\n    \nuse `transitionEnterTimeout` and `transitionLeaveTimeout` instead.",required:!1}],description:"The `EditDialogColumn` is used when there should be used when a table column's value\ncan be changed. It can either be displayed as a dialog or inline.\n\nAll props that are not documented but provided will be passed on to the `TextField`\ncomponent."},{id:"select-field-column",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/SelectFieldColumn.js",component:"SelectFieldColumn",functions:[],enums:[{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]},{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to use for the select field in the column. If this is omitted, it's value will be\n`${rowId}-${cellIndex}-select-field`",required:!1},{propName:"style",type:"object",description:"This is the optional style to apply to the `TableColumn`.",required:!1},{propName:"className",type:"string",description:"This is the optional className to apply to the `TableColumn`.",required:!1},{propName:"menuStyle",type:"object",description:"The is the optional style to apply to the select field's menu container.\n\n@see [SelectField#style](/components/select-fields?tab=1#select-field-proptypes-style)",required:!1},{propName:"menuClassName",type:"string",description:"The is the optional class name to apply to the select field's menu container.\n\n@see [SelectField#className](/components/select-fields?tab=1#select-field-proptypes-class-name)",required:!1},{propName:"fixedTo",type:"custom",description:"This is how the select field should be fixed within the table. When this is omitted,\nit will automatically use the responsive table as the fixture so that the select field\nwill close/adjust itself to the scrolling of the table.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the select field should span the entire width of the column.",required:!1,defaultValue:"true"},{propName:"position",type:"custom",description:"The position for the select field.\n\n@see [SelectField#position](/components/select-fields?tab=1#select-field-proptypes-position)",required:!1,defaultValue:"SelectFieldColumn.Positions.BELOW"},{propName:"tooltipLabel",type:"string",description:"The optional tooltip to render on hover.\n\n@see [TableColumn#tooltipLabel](/components/data-tables?tab=1#table-column-proptypes-tooltip-label)",required:!1},{propName:"tooltipDelay",type:"number",description:"An optional delay to apply to the tooltip before it appears.\n\n@see [TableColumn#tooltipDelay](/components/data-tables?tab=1#table-column-proptypes-tooltip-delay)",required:!1},{propName:"tooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The position of the tooltip.\n\n@see [TableColumn#tooltipPosition](/components/data-tables?tab=1#table-column-proptypes-tooltip-position)",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"false"},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1,defaultValue:"false"},{propName:"wrapperStyle",type:"deprecated(PropTypes.object)",description:"The `wrapperStyle` prop has been deprecated and will be removed in the next major release.\n    \nThere is no longer a wrapper.",required:!1},{propName:"wrapperClassName",type:"deprecated(PropTypes.string)",description:"The `wrapperClassName` prop has been deprecated and will be removed in the next major release.\n    \nThere is no longer a wrapper.",required:!1}],description:"The `SelectFieldColumn` component is just a simple wrapper between a `SelectField` and\nthe `TableColumn` components.\n\nAll props that are on the `SelectField` are also available here (except the naming of style or className).\nSee the [SelectField](/components/select-fields?tab=1#select-field-proptypes) for remaining prop descriptions."},{id:"menu-button-column",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/MenuButtonColumn.js",component:"MenuButtonColumn",functions:[],enums:[{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]},{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to use for the menu button in the column. If this is omitted, it's value will be\n`${rowId}-${cellIndex}-menu-button`",required:!1},{propName:"style",type:"object",description:"This is the optional style to apply to the `TableColumn`.",required:!1},{propName:"className",type:"string",description:"This is the optional className to apply to the `TableColumn`.",required:!1},{propName:"menuStyle",type:"object",description:"The is the optional style to apply to the menu button's menu container.\n\n@see [MenuButton#style](/components/menus?tab=1#menu-button-proptypes-style)",required:!1},{propName:"menuClassName",type:"string",description:"The is the optional class name to apply to the menu button's menu container.\n\n@see [MenuButton#className](/components/menus?tab=1#menu-button-proptypes-class-name)",required:!1},{propName:"fixedTo",type:"custom",description:"This is how the select field should be fixed within the table. When this is omitted,\nit will automatically use the responsive table as the fixture so that the select field\nwill close/adjust itself to the scrolling of the table.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)",required:!1},{propName:"tooltipLabel",type:"string",description:"The optional tooltip to render on hover.\n\n@see [TableColumn#tooltipLabel](/components/data-tables?tab=1#table-column-proptypes-tooltip-label)",required:!1},{propName:"tooltipDelay",type:"number",description:"An optional delay to apply to the tooltip before it appears.\n\n@see [TableColumn#tooltipDelay](/components/data-tables?tab=1#table-column-proptypes-tooltip-delay)",required:!1},{propName:"tooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The position of the tooltip.\n\n@see [TableColumn#tooltipPosition](/components/data-tables?tab=1#table-column-proptypes-tooltip-position)",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1,defaultValue:"false"}],description:""},{id:"dropdown-menu-column",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/DataTables/DropdownMenuColumn.js",component:"DropdownMenuColumn",functions:[],enums:[{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]},{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to use for the menu button in the column. If this is omitted, it's value will be\n`${rowId}-${cellIndex}-menu-button`",required:!1},{propName:"style",type:"object",description:"This is the optional style to apply to the `TableColumn`.",required:!1},{propName:"className",type:"string",description:"This is the optional className to apply to the `TableColumn`.",required:!1},{propName:"menuStyle",type:"object",description:"The is the optional style to apply to the menu button's menu container.\n\n@see [DropdownMenu#style](/components/menus?tab=1#dropdown-menu-proptypes-style)",required:!1},{propName:"menuClassName",type:"string",description:"The is the optional class name to apply to the menu button's menu container.\n\n@see [DropdownMenu#className](/components/menus?tab=1#dropdown-menu-proptypes-class-name)",required:!1},{propName:"fixedTo",type:"custom",description:"This is how the select field should be fixed within the table. When this is omitted,\nit will automatically use the responsive table as the fixture so that the select field\nwill close/adjust itself to the scrolling of the table.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)",required:!1},{propName:"tooltipLabel",type:"string",description:"The optional tooltip to render on hover.\n\n@see [TableColumn#tooltipLabel](/components/data-tables?tab=1#table-column-proptypes-tooltip-label)",required:!1},{propName:"tooltipDelay",type:"number",description:"An optional delay to apply to the tooltip before it appears.\n\n@see [TableColumn#tooltipDelay](/components/data-tables?tab=1#table-column-proptypes-tooltip-delay)",required:!1},{propName:"tooltipPosition",type:"oneOf([\n  'top',\n  'right',\n  'bottom',\n  'left'\n])",description:"The position of the tooltip.\n\n@see [TableColumn#tooltipPosition](/components/data-tables?tab=1#table-column-proptypes-tooltip-position)",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1,defaultValue:"false"}],description:""}],dialogs:[{id:"dialog-container",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Dialogs/DialogContainer.js",component:"DialogContainer",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id to use for the `Dialog` once it has been opened. This is used for the\n[dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).\nThis is used to generate an `id` for the `title` prop when it has been defined.",required:!1},{propName:"aria-describedby",type:"oneRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'title', 'aria-labelledby', 'aria-label')",description:'An optional accessibility prop to use when the `Dialog` is opened. This should be an id\npointing to some text that describes the content of the dialog. For accessibility\nreasons, one of the following props must be defined:\n- `title`\n- `aria-describedby`\n- `aria-labelledby`\n- `aria-label`\n\nAn example usage:\n\n```js\n<Dialog id="accessible-example" visible aria-describedby="accessible-content">\n  <p id="accessible-content">This is some content that describes the dialog.</p>\n</Dialog>\n```',required:!1},{propName:"aria-labelledby",type:"oneOfType([\n  number,\n  string\n])",description:'An optional accessibility prop to use when the `title` prop is not given. This should be\nan id pointing to a `h` tag that labels the dialog.\n\nAn example usage:\n\n```js\n<Dialog visible id="accessible-example" aria-labelledby="accessible-dialog-label">\n  <h2 id="accessible-dialog-label">Some Accessible Dialog</h2>\n</Dialog>\n```',required:!1},{propName:"aria-label",type:"string",description:'An optional accessibility prop to use when the `title` and `aria-labelledby` props are\nnot defined. This should be a string that describes what is in the `Dialog`.\n\nAn example usage:\n\n```js\n<Dialog visible id="accessible-example" aria-label="Some Accessible Dialog">\n  <p>Lorem Ipsum</p>\n</Dialog>\n```',required:!1},{propName:"style",type:"object",description:"An optional style to apply to the dialog's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the dialog's container.",required:!1},{propName:"dialogStyle",type:"object",description:"An optional style to apply to the dialog itself when the `visible` prop is `true`.",required:!1},{propName:"dialogClassName",type:"string",description:"An optional className to apply to the dialog itself when the `visible` prop is `true`.",required:!1},{propName:"titleStyle",type:"object",description:"An optional styke to apply to the title.",required:!1},{propName:"titleClassName",type:"string",description:"An optional className to apply to the title.",required:!1},{propName:"footerStyle",type:"object",description:"An optional style to apply to the footer. This is used when the `actions`\nprop is defined.",required:!1},{propName:"footerClassName",type:"string",description:"An optional className to apply to the footer. This is used when the `actions`\nprop is defined.",required:!1},{propName:"contentStyle",type:"object",description:"An optional style to apply to the dialog's content.",required:!1},{propName:"contentClassName",type:"string",description:"An optional className to apply to the dialog's content.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the dialog's container in.",required:!0,defaultValue:"'span'"},{propName:"contentComponent",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the dialog's content in.",required:!0,defaultValue:"'section'"},{propName:"children",type:"node",description:"The content to display in the dialog once open.",required:!1},{propName:"actions",type:"oneOfType([\n  element,\n  object,\n  arrayOf(  oneOfType([\n    element,\n    object\n  ]))\n])",description:"A single action or a list of actions to display in the dialog. This can either be a list\nof `FlatButton` props or `<Button flat {...props} />` elements.",required:!1},{propName:"visible",type:"bool",description:"Boolean if the `Dialog` is current visible.",required:!0},{propName:"onShow",type:"func",description:"An optional function to call when the `visible` prop is changed from `false` to `true`.",required:!1},{propName:"onHide",type:"custom",description:"A function to call that will close the dialog. This is required when the `modal` and `fullPage`\nprops are not `true`.",required:!1},{propName:"modal",type:"bool",description:"Boolean if the dialog should behave like a modal. This means that the dialog can only\nbe closed by clicking on an action instead of also clicking on the overlay.\n\nNOTE: Unless the `closeOnEsc` prop is disabled as well, the user can still press the escape\nkey to close this modal.",required:!1},{propName:"fullPage",type:"custom",description:"Boolean if the dialog should be displayed as a full page dialog.",required:!1},{propName:"pageX",type:"number",description:"An optional pageX location to use when rendering a full page dialog. This is used to set the location\nthe dialog should appear from.",required:!1},{propName:"pageY",type:"number",description:"An optional pageY location to use when rendering a full page dialog. This is used to set the location\nthe dialog should appear from.",required:!1},{propName:"additionalFocusKeys",type:"custom",description:"@see [FocusContainer#additionalFocusKeys](/components/helpers/focus-containers?tab=1#focus-container-proptypes-additional-focus-keys)",required:!1},{propName:"initialFocus",type:"custom",description:"@see [FocusContainer#initialFocus](/components/helpers/focus-containers?tab=1#focus-container-proptypes-initial-focus)",required:!1},{propName:"focusOnMount",type:"custom",description:"@see [FocusContainer#focusOnMount](/components/helpers/focus-containers?tab=1#focus-container-proptypes-focus-on-mount)",required:!1,defaultValue:"true"},{propName:"containFocus",type:"custom",description:"@see [FocusContainer#containFocus](/components/helpers/focus-containers?tab=1#focus-container-proptypes-contain-focus)",required:!1},{propName:"transitionEnterTimeout",type:"number",description:"The transition enter timeout for the dialog.",required:!0,defaultValue:"300"},{propName:"transitionLeaveTimeout",type:"number",description:"The transition leave timeout for the dialog.",required:!0,defaultValue:"300"},{propName:"closeOnEsc",type:"bool",description:"Boolean if the dialog should be closable by pressing the escape key.",required:!1,defaultValue:"true"},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the dialog.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render\nthe dialog in instead of the `document.body`.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the dialog should be rendered as the last child in the `renderNode` or `body` instead\nof as the first.",required:!1},{propName:"title",type:"node",description:"An optional title for the dialog.",required:!1},{propName:"defaultVisibleTransitionable",type:"bool",description:"Boolean if the dialog should animate into view if it is constructed with `visible` enabled.\n\nThis basically means that if the `Dialog` has `visible` enabled on initial page load, does it animate?\nIn some cases, it can also mean if the `Dialog` is added to the render tree with `visible` enabled,\ndoes it animate?",required:!1,defaultValue:"false"},{propName:"disableScrollLocking",type:"bool",description:"Boolean if the Dialog should no longer try to prevent the parent container from scrolling while visible.\nIn most cases, this will attempt to prevent the main window scrolling. If this dialog is nested in another\ndialog, it will attempt to prevent the parent dialog from scrolling.",required:!1},{propName:"autopadContent",type:"bool",description:"Boolean if the dialog should automatically try to determine if the content\nshould be padded. It will be padded if the dialog does not contain a `List`.",required:!1,defaultValue:"true"},{propName:"autosizeContent",type:"bool",description:"Boolean if the dialog content's size should automatically be resized to overflow\ncorrectly when there is a lot of content. This will calculate and apply some `maxHeight`\nto the `contentStyle`.",required:!1,defaultValue:"true"},{propName:"height",type:"oneOfType([\n  number,\n  string\n])",description:"An optional height to apply to the dialog. This is used if it is easier to just apply height/width\nwith for specific dialogs instead of in CSS.\n\n**This prop should not be used if the `fullPage` prop is enabled.**\n\n@see [fullPage](#dialog-container-proptypes-full-page)\n@see [width](#dialog-container-proptypes-width)",required:!1},{propName:"width",type:"oneOfType([\n  number,\n  string\n])",description:"An optional width to apply to the dialog. This is used if it is easier to just apply height/width\nwith for specific dialogs instead of in CSS.\n\n**This prop should not be used if the `fullPage` prop is enabled.**\n\n@see [fullPage](#dialog-container-proptypes-full-page)\n@see [height](#dialog-container-proptypes-height)",required:!1},{propName:"stackedActions",type:"bool",description:"Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will\nautomatically attempt to guess if the items should be stacked.",required:!1},{propName:"activeElementFocus",type:"bool",description:"Boolean if the active element should be focused after closing the dialog. It is generally recommended to\nkeep this enabled so that keyboard users do not lose their place within the application after a dialog is\nclosed. When this is set to false, you should implement your own focus logic.",required:!1,defaultValue:"true"},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"transitionName",type:"deprecated(PropTypes.string)",description:"The `transitionName` prop has been deprecated and will be removed in the next major release.\n    \nThe transition name will be managed by the component.",required:!1},{propName:"transitionEnter",type:"deprecated(PropTypes.bool)",description:"The `transitionEnter` prop has been deprecated and will be removed in the next major release.\n    \nThe transition will always be enforced.",required:!1},{propName:"transitionLeave",type:"deprecated(PropTypes.bool)",description:"The `transitionLeave` prop has been deprecated and will be removed in the next major release.\n    \nThe transition will always be enforced.",required:!1},{propName:"actionLeft",type:"deprecated(PropTypes.node)",description:"The `actionLeft` prop has been deprecated and will be removed in the next major release.\n    \nUse the `fullPage` prop instead.",required:!1},{propName:"actionRight",type:"deprecated(PropTypes.node)",description:"The `actionRight` prop has been deprecated and will be removed in the next major release.\n    \nUse the `fullPage` prop instead.",required:!1},{propName:"close",type:"deprecated(PropTypes.func)",description:"The `close` prop has been deprecated and will be removed in the next major release.\n    \nUse `onHide` instead.",required:!1}],description:"The `DialogContainer` component is used for dynamically creating the `Dialog` with\ntransitions."},{id:"dialog",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Dialogs/Dialog.js",component:"Dialog",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"@see [DialogContainer#id](/components/dialogs?tab=1#dialog-container-proptypes-id)",required:!1},{propName:"aria-describedby",type:"oneRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'title', 'aria-labelledby', 'aria-label')",description:"@see [DialogContainer#aria-describedby](/components/dialogs?tab=1#dialog-container-proptypes-aria-describedby)",required:!1},{propName:"aria-labelledby",type:"oneOfType([\n  number,\n  string\n])",description:"@see [DialogContainer#aria-labelledby](/components/dialogs?tab=1#dialog-container-proptypes-aria-labelledby)",required:!1},{propName:"aria-label",type:"string",description:"@see [DialogContainer#aria-label](/components/dialogs?tab=1#dialog-container-proptypes-aria-label)",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the dialog.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the dialog.",required:!1},{propName:"titleStyle",type:"object",description:"An optional styke to apply to the title.",required:!1},{propName:"titleClassName",type:"string",description:"An optional className to apply to the title.",required:!1},{propName:"footerStyle",type:"object",description:"An optional style to apply to the footer. This is used when the `actions`\nprop is defined.",required:!1},{propName:"footerClassName",type:"string",description:"An optional className to apply to the footer. This is used when the `actions`\nprop is defined.",required:!1},{propName:"contentStyle",type:"object",description:"An optional style to apply to the dialog's content.",required:!1},{propName:"contentClassName",type:"string",description:"An optional className to apply to the dialog's content.",required:!1},{propName:"contentComponent",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the content as. This is helpful if you would like to use\nthe CSSTransitionGroup. This really just saves a tiny bit of markup.\n\n```js\n<Dialog\n  contentComponent={CSSTransitionGroup}\n  contentProps={{\n    transitionName: 'md-cross-fade',\n    transitionLeave: false,\n    transitionEnterTimeout: 150,\n  }}\n>\n  {dynamicContent}\n</Dialog>\n```",required:!0,defaultValue:"'section'"},{propName:"contentProps",type:"object",description:"Any additional props to pass to the content component.",required:!1},{propName:"title",type:"node",description:"An optional title to display in the dialog.",required:!1},{propName:"children",type:"node",description:"Any children to display in the content of the dialog.",required:!1},{propName:"actions",type:"oneOfType([\n  element,\n  object,\n  arrayOf(  oneOfType([\n    element,\n    object\n  ]))\n])",description:"A single action or a list of actions to display in the dialog. This can either be a list\nof `FlatButton` props or `<Button flat {...props} />` elements.",required:!1},{propName:"additionalFocusKeys",type:"custom",description:"@see [FocusContainer#additionalFocusKeys](/components/helpers/focus-containers?tab=1#focus-container-proptypes-additional-focus-keys)",required:!1},{propName:"initialFocus",type:"custom",description:"@see [FocusContainer#initialFocus](/components/helpers/focus-containers?tab=1#focus-container-proptypes-initial-focus)",required:!1},{propName:"focusOnMount",type:"custom",description:"@see [FocusContainer#focusOnMount](/components/helpers/focus-containers?tab=1#focus-container-proptypes-focus-on-mount)",required:!1},{propName:"containFocus",type:"custom",description:"@see [FocusContainer#containFocus](/components/helpers/focus-containers?tab=1#focus-container-proptypes-contain-focus)",required:!1},{propName:"pageX",type:"number",description:"An optional x coordinate on the page that caused a full page dialog\nto be created. This is really just used for a `transformOrigin` style.",required:!1},{propName:"pageY",type:"number",description:"An optional y coordinate on the page that caused a full page dialog\nto be created. This is really just used for a `transformOrigin` style.",required:!1},{propName:"containerX",type:"number",description:"An optional x scroll position of the container holding the dialog. This\nis really just used for a `transformOrigin` style on full page dialogs.",required:!1},{propName:"containerY",type:"number",description:"An optional y scroll position of the container holding the dialog. This\nis really just used for a `transformOrigin` style on full page dialogs.",required:!1},{propName:"fullPage",type:"bool",description:"Boolean if the dialog should be rendered as a full page dialog.",required:!1},{propName:"zDepth",type:"number",description:"The zDepth to use for the dialog.",required:!0,defaultValue:"5"},{propName:"onOpen",type:"func",description:"An optional function to call when the dialog has been opened. This is\nreally just used for the `DialogContainer`.",required:!1},{propName:"onLeave",type:"func",description:"An optional function to call when the dialog has been closed. This is\nreally just used for the `DialogContainer`.",required:!1},{propName:"centered",type:"bool",description:"Boolean if the dialog should be centered in the page.",required:!1},{propName:"paddedContent",type:"bool",description:"Boolean if the content should be padded. This will take precedence\nover the `autopadContent` prop. So if this is defined, that value\nwill be used instead of any thing that was was calculated in this\ncomponent.\n\n@see [autopadContent](#dialog-proptypes-autopad-content)",required:!1},{propName:"autopadContent",type:"bool",description:"Boolean if the dialog should automatically try to determine if the content\nshould be padded. It will be padded if the dialog does not contain a `List`.",required:!1,defaultValue:"true"},{propName:"autosizeContent",type:"bool",description:"Boolean if the dialog content's size should automatically be resized to overflow\ncorrectly when there is a lot of content. This will calculate and apply some `maxHeight`\nto the `contentStyle`.",required:!1,defaultValue:"true"},{propName:"height",type:"oneOfType([\n  number,\n  string\n])",description:"An optional height to apply to the dialog. This is used if it is easier to just apply height/width\nwith for specific dialogs instead of in CSS.\n\n**This prop should not be used if the `fullPage` prop is enabled.**\n\n@see [fullPage](#dialog-proptypes-full-page)\n@see [width](#dialog-proptypes-width)",required:!1},{propName:"width",type:"oneOfType([\n  number,\n  string\n])",description:"An optional width to apply to the dialog. This is used if it is easier to just apply height/width\nwith for specific dialogs instead of in CSS.\n\n**This prop should not be used if the `fullPage` prop is enabled.**\n\n@see [fullPage](#dialog-proptypes-full-page)\n@see [height](#dialog-proptypes-height)",required:!1},{propName:"stackedActions",type:"bool",description:"Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will\nautomatically attempt to guess if the items should be stacked.",required:!1}],description:"The `Dialog` is just a static component for creating dialogs. Dialogs\nseemed like they could be used outside of the `DialogContainer` component,\nso it was exposed as well. In *most* cases, you will still want to use\nthe `DialogContainer` component."}],dividers:[{id:"divider",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Dividers/Divider.js",component:"Divider",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the divider.",required:!1},{propName:"inset",type:"bool",description:"Boolean if this divider should be inset relative to it's container\ncomponent. This means that if it is in a `List` with `Avatar`, it\nwill start the divider  to the left of the main text in the list.",required:!1},{propName:"vertical",type:"bool",description:"Boolean if the divider should be vertical instead of horizontal.",required:!1}],description:"The divider component will pass all other props such as style or\nevent listeners on to the component."}],drawers:[{id:"drawer",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Drawers/Drawer.js",component:"Drawer",functions:[{name:"getCurrentMedia",type:"function",description:"Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,\nand the current drawer type. This expects a `props` object of the drawer.\n\nIf this is used server side, it will default to only matching mobile.",returns:{description:"an object containing the media matches and the current type to use for the drawer.",type:"Object"},params:[{name:"props",description:"The current drawer's prop shape to extract the mobile, tablet,\n   and desktop type/min widths. This defaults to the drawer's default props.",type:"Object",required:!1}]},{name:"matchesMedia",type:"function",description:"Simply does a `window.matchMedia(query)` where the query gets defined as a min width\nand optional max width.",returns:{description:"true if the media matches.",type:"boolean"},params:[{name:"min",description:"The min width for the media query.",type:"number",required:!1},{name:"max",description:"An optional max width to include for the media query.",type:"number",required:!1}]}],enums:[{name:"DrawerTypes",type:"constant",description:"An enum for all the different type of drawers.",properties:[{name:"FULL_HEIGHT",description:"This is the default drawer type. It will always be on the screen and takes\nup the entire height. This is very helpful for main navigation on desktops\nwhen you do not need an expandable workspace.",value:"full-height"},{name:"CLIPPED",description:"This drawer type will always be on the screen, but it will appear under the\nmain toolbar.",value:"clipped"},{name:"FLOATING",description:"This drawer type will always be on the screen, but it will appear under the\nmain toolbar and have a transparent background. This is useful if you want\na persistent drawer on desktop screens, but do not want the main focus to be\nthe drawer.",value:"floating"},{name:"PERSISTENT",description:"A persistent drawer changes between being hidden and being fixed on the page like\na permanent drawer. When it is visible, it will take up the same amount of room\nas a permanent drawer, and will not go away until closed.\n\nThis drawer type is helpful when you need to have a dynamic workspace size.",value:"persistent"},{name:"PERSISTENT_MINI",description:'This is a modification of the persistent drawer. It will behave as the persistent drawer\nbut it will always have a "mini" drawer visible. This is helpful when you want to have\na dynamic workspace size and keep certain actions available at all times.',value:"persistent-mini"},{name:"TEMPORARY",description:"A temporary drawer will not be visible by default. When it is visible, it will overlay\nthe page to get the main focus on the drawer. When the user touches the overlay or\none of the navigation items, the drawer will be closed. The overlay can be disabled on\ndesktop and tablets.",value:"temporary"},{name:"TEMPORARY_MINI",description:'This is a modification of the temporary drawer. It will behave like a temporary drawer,\nbut it will always have a "mini" drawer visible. Just like the `PERSISTENT_MINI` drawer\ntype, this is useful when certain actions should be available at all times but additional\nactions are available when the drawer is visible.',value:"temporary-mini"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the drawer. This is generally a good idea to provide if\nthere are any `navItems` defined.\n\n@see [navItemsId](#drawer-proptypes-nav-items-id)",required:!1},{propName:"navItemsId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the navItems list. If this is omitted and the `id` prop is\ndefined, it will be defaulted to `${id}-nav-items`.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"navStyle",type:"object",description:"An optional style to apply to the `List` surrounding the `navItems`.",required:!1},{propName:"navClassName",type:"string",description:"An optional className to apply to the `List` surrounding the `navItems`.",required:!1},{propName:"overlayStyle",type:"object",description:"An optional style to apply to the overlay.",required:!1},{propName:"overlayClassName",type:"string",description:"An optional className to apply to the overlay.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  element,\n  object\n])",description:"An optional component to render the drawer in. When this prop is undefined, the drawer\nwill be rendered as a `nav` if the `navItems` prop is defined, otherwise an `aside`.",required:!1},{propName:"navItems",type:"arrayOf(oneOfType([\n  element,\n    shape({\n    divider: bool,\n    subheader: bool,\n    primaryText: node\n  })\n]))",description:"An optional list of navigation items to display in the drawer. This list can either contain\na valid child component for a `List` or an object used to create a `Divider`, `Subheader`,\nor `ListItem`.\n\n- To create a divider in the list, set a `divider` key to `true`. Any other keys will be\npassed to the `Divider` component.\n- To create a subheader in the list, set the `subheader` key to `true`. Any other keys will\nbe passed to the `Subheader` component.\n- To create a list item, just create an object with any normal `ListItem` props.",required:!1},{propName:"autoclose",type:"bool",description:"Boolean if a temporary drawer should close when a nav item is clicked.",required:!1,defaultValue:"true"},{propName:"header",type:"node",description:"An optional header to display. This _should_ normally be a toolbar.",required:!1},{propName:"children",type:"node",description:"Any additional children to display after the `header` and `navItems`.",required:!1},{propName:"mobileType",type:"oneOf([\n  Drawer.DrawerTypes.TEMPORARY,\n  Drawer.DrawerTypes.TEMPORARY_MINI\n])",description:"The drawer type to use when the current device matches the mobile\nmedia query.",required:!0,defaultValue:"Drawer.DrawerTypes.TEMPORARY"},{propName:"mobileMinWidth",type:"number",description:"The min-width to use for the mobile media query.",required:!0,defaultValue:"MOBILE_MIN_WIDTH"},{propName:"tabletType",type:"custom",description:"The drawer type to use when the current device matches the tablet\nmedia query.",required:!1,defaultValue:"Drawer.DrawerTypes.PERSISTENT"},{propName:"tabletMinWidth",type:"number",description:"The min-width to use for the tablet media query.",required:!0,defaultValue:"TABLET_MIN_WIDTH"},{propName:"desktopType",type:"custom",description:"The drawer type to use when the current device matches the desktop media\nquery.",required:!1,defaultValue:"Drawer.DrawerTypes.FULL_HEIGHT"},{propName:"desktopMinWidth",type:"number",description:"The min-width for a desktop screen.",required:!0,defaultValue:"DESKTOP_MIN_WIDTH"},{propName:"type",type:"custom",description:"An optional type to enforce across all media sizes. Since `mobile` devices are\nincluded, you are required to manually specify when the `type` should be `temporary`.\n\nWhen the `type` is not one of the `temporary` types, the `onMediaTypeChange` prop\nmust be provided.",required:!1},{propName:"onMediaTypeChange",type:"func",description:"An optional function to call when the drawer's type changes when the screen resizes.\nThe callback will include the new `type` that should be used for the screen size,\nand an object containing the media matches for `mobile`, `tablet`, and `desktop`.\n\n```js\nthis.props.onMediaTypeChange(Drawer.DrawerTypes.TEMPORARY, {\n  mobile: true,\n  tablet: false,\n  desktop: false,\n});\n```",required:!1},{propName:"defaultMedia",type:"oneOf([\n  'mobile',\n  'tablet',\n  'desktop'\n])",description:"The default drawer type to display on initial render. The drawer will automatically\nadjust itself to the correct media once it has mounted. This prop is really only useful\nfor server side rendering.",required:!0,defaultValue:"'mobile'"},{propName:"overlay",type:"bool",description:"Boolean if there should be a visible overlay when the drawer is visible. The default behavior\nis to only include a visible overlay when the `type` is `TEMPORARY` or `TEMPORARY_MINI` and\nthe device is not a desktop.\n\nDefinining this variable as `true` or `false` will override any default behavior. This means that\nif this is enabled for a full-height drawer, an overlay will still be created.",required:!1},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the drawer. The overlay that appears for temporary type drawers will still appear in the\nseparate subtree.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the drawer into. The default is to render as\nthe first child in the `body`.\n\n> This prop will not be used when the drawer is of the permanent type or `inline` is specified\nsince the `Portal` component will not be used.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the drawer should be rendered as the last child instead of the first child\nin the `renderNode` or `body`.\n\n> This prop will not be used when the drawer is of the permanent type or `inline` is specified\nsince the `Portal` component will not be used.",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the drawer is visible by default. If this is omitted, the drawer will be visible\nif the current drawer type is NOT `Drawer.DrawerTypes.TEMPORARY` or `Drawer.DrawerTypes.TEMPORARY_MINI`.\n\nThis basically means that if you are using the default configuration, a mobile device's drawer\nwill be hidden while tablets and desktops will be visible.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"Boolean if the drawer is visible. This will force the component to define the `onVisibilityChange`\nprop as well as manually updating the drawer's visibility.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the visibility of the drawer is changed. The function will\nbe called with the new visibility state.\n\n```js\nonVisibilityChange(!currentlyVisible);\n```",required:!1},{propName:"position",type:"oneOf([\n  'left',\n  'right'\n])",description:"The drawer's position on the page when it is not `inline`. When the drawer's position is `left`,\nthe width will be `calc(100vw - 56px)` on mobile devices and `$md-drawer-desktop-width` on desktops.\n\nWhen the position is `right`, the width will be `100vw` for mobile devices and scaling to the drawer's\nchildren width on desktops.",required:!0,defaultValue:"'left'"},{propName:"inline",type:"bool",description:"Boolean if the drawer should be displayed inline instead of fixed to the page. When this prop\nis enabled, the `position` prop will not be used.",required:!1},{propName:"transitionDuration",type:"number",description:"The `$md-drawer-transition-time` value from sass.",required:!0,defaultValue:"300"},{propName:"clickableDesktopOverlay",type:"bool",description:"Boolean if the temporary drawer's overlay should be created on desktop screens. This is really used so that\nthe drawer will close when a user clicks anywhere on the page except in the drawer.",required:!1,defaultValue:"true"},{propName:"autocloseAfterInk",type:"bool",description:"Boolean if the `autoclose` feature should wait for the ink transition to finish before automatically\nclosing the drawer. This will add a `300ms` delay. If this is `false`, there will only be a `17ms` delay.\n\n> The delay is required so that any event listeners will still be correctly invoked when an item is clicked.",required:!1},{propName:"constantType",type:"bool",description:"Boolean if the `type` prop should be constant across all media sizes. This is only valid if the `type` is\none of the temporary types.\n\nThis will basically mean that when attempting to do a media adjustment, it will use the `type` prop instead of\n`mobileType`, `tabletType`, and `desktopType` to determine the next drawer type.",required:!0,defaultValue:"true"},{propName:"zDepth",type:"number",description:"An optional zDepth to apply to the drawer. If this is omitted, the value will be set as follows:\n- floating || inline = 1\n- temporary = 5\n- all others = 1\n\n@see [Paper#zDepth](/components/papers?tab=1#paper-proptypes-z-depth)",required:!1},{propName:"closeOnNavItemClick",type:"deprecated(PropTypes.bool)",description:"The `closeOnNavItemClick` prop has been deprecated and will be removed in the next major release.\n    \nUse `autoclose` instead.",required:!1},{propName:"onVisibilityToggle",type:"deprecated(PropTypes.func)",description:"The `onVisibilityToggle` prop has been deprecated and will be removed in the next major release.\n    \nUse `onVisibilityChange` instead.",required:!1}],description:"The `Drawer` component is used for having a sliding panel of content or navigation\nthat appears from the side of a screen.\n\nIf the `Drawer` uses any of the `_MINI` drawer types, you will need to also create another\n`Drawer` that is not `_MINI`. Transitioning the `width` on mobile devices is very sluggish,\nand it isn't much more work to create another drawer."}],"expansion-panels":[{id:"expansion-panel",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/ExpansionPanels/ExpansionPanel.js",component:"ExpansionPanel",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the panel.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the panel.",required:!1},{propName:"headerStyle",type:"object",description:"An options style to apply to the panel's header content. This is the\nsection that toggles the children to be visible and label columns.",required:!1},{propName:"headerClassName",type:"string",description:"An optional className to apply to the panel's header content. This is the\nsection that toggles the children to be visible and label columns.",required:!1},{propName:"contentStyle",type:"object",description:"An optional style to apply to the element surrounding the children when expanded.",required:!1},{propName:"contentClassName",type:"string",description:"An optional className to apply to the element surrounding the children when expanded.",required:!1},{propName:"footerStyle",type:"object",description:"An optional style to apply to the footer when the `footer` prop is `undefined`.\n\n@see [footer](#expansion-panel-proptypes-footer)",required:!1},{propName:"footerClassName",type:"string",description:"An optional className to apply to the footer when the `footer` prop is `undefined`.\n\n@see [footer](#expansion-panel-proptypes-footer)",required:!1},{propName:"label",type:"node",description:"The main label to display in the unexpanded panel.",required:!0},{propName:"secondaryLabel",type:"node",description:"Any additional columns to display after the main label. If this is a `list`\ninstead of a singular item, they will each be formatted as a column.",required:!1},{propName:"expandedSecondaryLabel",type:"node",description:"Any additional columns to display after the main label when the panel is\nexpanded. If this is omitted, the default `secondaryLabel` will be displayed\ninstead.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the panel as.",required:!0,defaultValue:"'li'"},{propName:"children",type:"node",description:"The content to display once the panel is toggled open.",required:!1},{propName:"expanded",type:"controlled(PropTypes.bool, 'onExpandToggle', 'defaultExpanded')",description:"A boolean if the panel is currently expanded. This will force the component\nto be controlled and require's the `onExpandToggle` function to be defined.",required:!1},{propName:"defaultExpanded",type:"bool",description:"Boolean if an uncontrolled panel should be expanded by default.",required:!0,defaultValue:"false"},{propName:"expanderIcon",type:"element",description:"The icon to display for expanding the expansion panel.",required:!1,defaultValue:"<FontIcon>keyboard_arrow_down</FontIcon>"},{propName:"focused",type:"bool",description:"Boolean if the `ExpansionPanel` is currently tab focused. This is injected\nand managed by the `ExpansionList` component. Do not set yourself.",required:!0,defaultValue:"false"},{propName:"columnWidths",type:"arrayOf(number)",description:"A list of min-widths to apply to each column in the panel header. This is injected\nand managed by the `ExpansionList` component. Do not set yourself.",required:!0,defaultValue:"[]"},{propName:"overflown",type:"bool",description:"Boolean if the panel has too much content so that it overflowns. This is injected\nand managed by the `ExpansionList` component. Do not set yourself.\n\nWhen this is active, it will truncate all columns except for the main label and the\ntoggle icon.",required:!1},{propName:"onExpandToggle",type:"func",description:"A function to call when the expansion panel's expanded state is toggled.\nThe callback for this function will include the new expanded state.\n\n`onExpandToggle(expanded)`",required:!1},{propName:"onSave",type:"func",description:"An optional function to call when the Save button is clicked on the expanded panel.",required:!1},{propName:"onCancel",type:"func",description:"An optional function to call when the Cancel button is clicked on the expanded panel.",required:!1},{propName:"closeOnSave",type:"bool",description:"Boolean if the panel should close when the Save button is clicked.",required:!1,defaultValue:"true"},{propName:"closeOnCancel",type:"bool",description:"Boolean if the panel should close when the Cancel button is clicked.",required:!1,defaultValue:"true"},{propName:"saveType",type:"oneOf([\n  'button',\n  'submit',\n  'reset'\n])",description:"An optional button type to apply to the Save button. This will get\npassed to the `FlatButton`.",required:!1},{propName:"saveLabel",type:"node",description:"The label for the Save button.",required:!0,defaultValue:"'Save'"},{propName:"savePrimary",type:"bool",description:"Boolean if the Save button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"saveSecondary",type:"bool",description:"Boolean if the Save button should be styled with the secondary color,",required:!1},{propName:"saveProps",type:"object",description:"Any additional props to provide/override for the save button in the\nfooter of the panel.",required:!1},{propName:"cancelType",type:"oneOf([\n  'button',\n  'submit',\n  'reset'\n])",description:"An optional button type to apply to the Cancel button. This will get\npassed to the `FlatButton`.",required:!1},{propName:"cancelLabel",type:"node",description:"The label for the Cancel button.",required:!0,defaultValue:"'Cancel'"},{propName:"cancelPrimary",type:"bool",description:"Boolean if the Cancel button should be styled with the primary color,",required:!1},{propName:"cancelSecondary",type:"bool",description:"Boolean if the Cancel button should be styled with the secondary color,",required:!1},{propName:"cancelProps",type:"object",description:"Any additional props to provide/override for the cancel button in the\nfooter of the panel.",required:!1},{propName:"tabIndex",type:"number",description:"The tab index for the panel's header. This allows keyboard navigation.",required:!0,defaultValue:"0"},{propName:"animateContent",type:"bool",description:"Boolean if the panel's content should animate when the content's visibility changes. This\ncan also be toggled from the `ExpansionList` component if all `ExpansionPanel` in the list\nshould not animate. This only affects the height transition.\n\n> The default value is really `true` since it gets passed down to the `Collapse` component.",required:!1},{propName:"footer",type:"node",description:"This prop controls the footer for the expansion panel. If this prop is `undefined`, it will\ngo with the default behavior of generating the save and cancel buttons with the save and cancel\nprops.\n\nIf this value is `null`, there will be no footer created.\n\nFinally, if this prop is defined as any renderable item, it will be displayed in place of the\nfooter.\n\n@see [footerChildren](#expansion-panel-proptypes-footer-children)",required:!1},{propName:"footerChildren",type:"node",description:"Any additional children that should be displayed in the footer of the panel. These children\nwill be placed after the action buttons.",required:!1},{propName:"expandIconChildren",type:"deprecated(PropTypes.node)",description:"The `expandIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `expanderIcon` instead.",required:!1},{propName:"expandIconClassName",type:"deprecated(PropTypes.string)",description:"The `expandIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `expanderIcon` instead.",required:!1}],description:"The `ExpansionPanel` component needs to be used with the `ExpansionList`\ncomponent. The only reason is that the `ExpansionPanel` should really\nbe rendered as a table, but it was a bit hard to have a single component\ndynamically rendering another row when expanded. It couldn't be in the\nsame row since the expanded content might not have the same columns."},{id:"expansion-list",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/ExpansionPanels/ExpansionList.js",component:"ExpansionList",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style object to apply to the list.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the list.",required:!1},{propName:"children",type:"node",description:"The children should be a list or singular `ExpansionPanel` component\nto render with some additional props injected.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the list as.",required:!0,defaultValue:"'ul'"},{propName:"animateContent",type:"bool",description:"Boolean if all the expansion panels in the list should animate when their content's visibility\nchanges. This is just a quicker way to disable all animations instead of having to toggle it off\non each panel.\n\n> The default value is really `true` since it gets passed down to the `Collapse` component.",required:!1},{propName:"recalculateThreshold",type:"number",description:"The threshold that should be used for when the list should recalculate the positioning of all\nthe columns. This will only compare the difference between updates.\nSo if the size changes from 80 -> 120 -> 160 -> 140. It will only update on the third resize (160)",required:!0,defaultValue:"80"}],description:"The `ExpansionList` component is a wrapper for the `ExpansionPanel` that helps\ndetermine which `ExpansionPanel` currently has tab focus and adjusts the column\nsizes in the header of the `ExpansionPanel`.\n\nThe `ExpansionList` and `ExpansionPanel` components should have probably been\nimplemented as a `table` instead of a `ul || ol` since it is more column based,\nbut it would complicate the API to have dynamic row generation for the expanded\npanels. The expanded panels _might_ not follow the same column widths as their labels\nso a singular row with a div for expanded content might not work correctly."}],"file-inputs":[{id:"file-input",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/FileInputs/FileInput.js",component:"FileInput",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:'The id for the text field. This is required for a11y and to get the `input type="file"` to\nopen.',required:!1},{propName:"name",type:"string",description:"An optional name to provide to the input.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"labelStyle",type:"object",description:"An optional style to apply to the label.",required:!1},{propName:"labelClassName",type:"string",description:"An optional className to apply to the label.",required:!1},{propName:"primary",type:"bool",description:"Boolean if the `FileInput` should be styled with the primary color.",required:!1},{propName:"secondary",type:"bool",description:"Boolean if the `FileInput` should be styled with the secondary color.",required:!1},{propName:"flat",type:"bool",description:"Boolean if the `FileInput` should be styled as a flat button instead of a\nraised button.",required:!1},{propName:"swapTheming",type:"bool",description:"Boolean if the theming should be swapped from text to background or vice-versa.\n\n@see [Button#swapTheming](/components/buttons?tab=1#button-proptypes-swap-theming)",required:!1},{propName:"accept",type:"string",description:"This should be a comma separated list of Media Types that the `FileInput` can\naccept. If this prop is left blank, any file will be accepted.\n\nThe values can either be:\n- A file extension\n- audio/*\n- video/*\n- image/*\n- any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)\n\n> NOTE: IE does not enforce this.",required:!1},{propName:"allowDuplicates",type:"bool",description:"Boolean if the same file is allowed to be uploaded multiple times. This will basically make the\n`value` of the file input always blank.",required:!1,defaultValue:"false"},{propName:"multiple",type:"bool",description:"Boolean if multiple files will be accepted.",required:!1},{propName:"label",type:"node",description:'A label to display on the `FileInput`. This will be used with the `AccessibleFakeInkedButton` component to\ncreate a `<label>` for the `<input type="file">`.',required:!1,defaultValue:"'Select a file'"},{propName:"iconBefore",type:"bool",description:"Boolean if the icons should appear before the label.",required:!1},{propName:"icon",type:"element",description:"An optional icon to display with the file download. This can be a `FontIcon` or an `SVGIcon`.",required:!1,defaultValue:"<FontIcon>file_upload</FontIcon>"},{propName:"onChange",type:"func",description:"A function to call when the value of the input changes. This will\nbe triggered when the user selects a new file or cancels the new file selection.\n\nThis function will be given the new [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\nas an array and the change event. If this is not a multiple file input, only the\nnewly selected File will be given instead of a list of one file. Since this is an\n`input` tag, the user will not be able to select the same file multiple times unless\nyou manually clear the input's value.\n\n> NOTE: If the user hits cancel, null will be given for a single file input.\n\n```js\nonChange(files, e);\n```",required:!1},{propName:"capture",type:"oneOf([\n  'user',\n  'environment'\n])",description:"This prop tells mobile browsers that the input would prefer the user to get the image/video from\nthe camera instead of using the file browser. This will be completely ignored by desktop browsers.\n\nProviding `'user'` will select the front facing camera while `'environment'` will select the rear facing\ncamera.\n\n@see https://developers.google.com/web/fundamentals/media/capturing-images/",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the `FileInput` is currently disabled.",required:!1},{propName:"onKeyUp",type:"func",description:"An optional function to call when they keyup event is triggered on the file input's label.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when they keydown event is triggered on the file input's label.",required:!1},{propName:"onMouseUp",type:"func",description:"An optional function to call when they mouseup event is triggered on the file input's label.",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when they mousedown event is triggered on the file input's label.",required:!1},{propName:"onMouseOver",type:"func",description:"An optional function to call when they mouseover event is triggered on the file input's label.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when they mouseleave event is triggered on the file input's label.",required:!1},{propName:"onTouchEnd",type:"func",description:"An optional function to call when they touchend event is triggered on the file input's label.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when they touchstart event is triggered on the file input's label.",required:!1},{propName:"iconChildren",type:"deprecated(PropTypes.node)",description:"The `iconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `icon` instead.",required:!1},{propName:"iconClassName",type:"deprecated(PropTypes.string)",description:"The `iconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `icon` instead.",required:!1},{propName:"value",type:"deprecated(PropTypes.string)",description:"The `value` prop has been deprecated and will be removed in the next major release.\n    \nThere should\\'t be a reason to set the value manually. Check out [allowDuplicates](#file-input-proptypes-allow-duplicates) instead.",required:!1}],description:'The `FileInput` component is used as simple styling for the `<input type="file" />`.\nIt will style the input as a raised button by default.'},{id:"file-upload",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/FileInputs/FileUpload.js",component:"FileUpload",functions:[{name:"abort",type:"function",description:"Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`\nas it's parameter. If the parameter is omitted, it attempts to abort the first file that was\nadded. If the `onAbort` function was given, it will be called as well.",returns:null,params:[{name:"file",description:"The file or the file name to use to find the\n    correct `FileReader`.",type:"union",required:!1}]}],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"labelStyle",type:"object",description:"An optional style to apply to the label.",required:!1},{propName:"labelClassName",type:"string",description:"An optional className to apply to the label.",required:!1},{propName:"primary",type:"bool",description:"Boolean if the `FileInput` should be styled with the primary color.",required:!1},{propName:"secondary",type:"bool",description:"Boolean if the `FileInput` should be styled with the secondary color.",required:!1},{propName:"flat",type:"bool",description:"Boolean if the `FileInput` should be styled as a flat button instead of a\nraised button.",required:!1},{propName:"accept",type:"string",description:"This should be a comma separated list of Media Types that the `FileInput` can\naccept. If this prop is left blank, any file will be accepted.\n\nThe values can either be:\n- A file extension\n- audio/*\n- video/*\n- image/*\n- any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)",required:!1},{propName:"multiple",type:"bool",description:"Boolean if multiple files will be accepted.",required:!1},{propName:"label",type:"node",description:"A label to display on the `FileInput`.",required:!1},{propName:"iconChildren",type:"node",description:"The icon children to use for the upload icon.",required:!1},{propName:"iconClassName",type:"string",description:"The icon className to use for the upload icon.",required:!1},{propName:"maxSize",type:"number",description:"An optional max size for the file. If the file is greater than\nthis limit, the file will not be uploaded.",required:!1},{propName:"onSizeError",type:"custom",description:"A required function to call when the `maxSize` prop is set. It will\nbe given a list of files that were too big.",required:!1},{propName:"readAs",type:"oneOfType([\n    oneOf([\n    'DataURL',\n    'ArrayBuffer',\n    'Text'\n  ]),\n  func\n])",description:"You can force the `FileReader` to read the file as a specific type\nif you do not trust the *amazing* regex I have for choosing the correct\none.\n\n```js\nif(type.match(/image|video|audio/)) {\n  fr.readAsDataURL(file);\n} else if(type.match(/application|model|multipart/)) {\n  fr.readAsArrayBuffer(file);\n} else {\n  fr.readAsText(file);\n}\n```\n\n> `.yml` and `.js` both are considered `application`, so it definitely fails there.\n\nIf this prop is a function, you will be given the file's type, the file object, and\nthe file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`.",required:!1},{propName:"onAbort",type:"func",description:"An optional function to call when the `FileUpload` aborts. The current\nfile and the abort event are given. This might not be the most useful\nfunction to use since you will need to manually call abort yourself anyways.",required:!1},{propName:"onError",type:"func",description:"An optional function to call when the `FileUpload` errors. The current\nfile, the error, and the error event are given.\n\n```js\nonError(file, event.target.error, event);\n```",required:!1},{propName:"onLoad",type:"func",description:"An optional function to call when the `FileUpload` loads. The current\nfile, the load result, and the load event are given.\n\n```js\nonLoad(file, event.target.result, event);\n```\n\nThe load result will either be:\n- a data URL\n- a plain text string\n- an array buffer\n\ndepending on what type the file is.",required:!1},{propName:"onLoadStart",type:"func",description:"An optional function to call when the `FileUpload` starts loading. The current\nfile and the load start event are given.",required:!1},{propName:"onLoadEnd",type:"func",description:"An optional function to call when the `FileUpload` finishes loading. The\ncurrent file and the load end event are given.",required:!1},{propName:"onProgress",type:"func",description:"An optional function to call when the `FileUpload` progress. The current\nfile, upload progress, and the progress event are given. The progress\nwill be a number between 0 and 100 that has not been rounded.\n\n```js\nonProgress(file, progress, event);\n```",required:!1},{propName:"allowDuplicates",type:"bool",description:"Boolean if the same file is allowed to be uploaded multiple times. This will basically make the\n`value` of the file input always blank.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when a file selects or unselects a file.\nThis will be called before any local uploading occurs.\n\n```js\nonChange(file(s) || null, event);\n```",required:!1},{propName:"capture",type:"oneOf([\n  'user',\n  'environment'\n])",description:"This prop tells mobile browsers that the input would prefer the user to get the image/video from\nthe camera instead of using the file browser. This will be completely ignored by desktop browsers.\n\nProviding `'user'` will select the front facing camera while `'environment'` will select the rear facing\ncamera.\n\n@see https://developers.google.com/web/fundamentals/media/capturing-images/",required:!1},{propName:"value",type:"deprecated(PropTypes.string)",description:"The `value` prop has been deprecated and will be removed in the next major release.\n    \nThere should\\'t be a reason to set the value manually. Check out [allowDuplicates](#file-upload-proptypes-allow-duplicates) instead.",required:!1}],description:"The `FileUpload` component is used to upload files locally This is a wrapper of the `FileInput` component\nwith some additional functionality so any props that are undocumented on `FileUpload` but are present\non `FileInput` are correctly provided. If you want to upload files to a server, use\n[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\nby attaching the `File`.\n\nQuick example:\n\n```js\nfunction upload(file) {\n  fetch('/api/images', {\n    method: 'POST',\n    body: new FormData().append('file', file),\n  });\n}\n```\n\nAn upload can be aborted by calling the `abort(file || fileName)` function. If\nthe file or fileName are omitted, it will *attempt* to abort the current\nfile that is uploading. Unreliable for multi-select.\n\n```js\n<FileUpload ref=\"upload\" />\n<Button raised onClick={() => this.refs.upload.abort()} label=\"Abort! Abort!\" />\n```"}],"font-icons":[{id:"font-icon",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/FontIcons/FontIcon.js",component:"FontIcon",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the `FontIcon`.",required:!1},{propName:"iconClassName",type:"string",description:"The icon font library className to use to display the icon.",required:!0,defaultValue:"'material-icons'"},{propName:"primary",type:"bool",description:"Boolean if the primary theme color should be applied.",required:!1},{propName:"secondary",type:"bool",description:"Boolean if the secondary theme color should be applied.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the icon is considered disabled and should inherit the\ndisabled color.",required:!1},{propName:"error",type:"bool",description:"Boolean if the error color should be applied to the icon.",required:!1},{propName:"inherit",type:"bool",description:"Boolean if the color of the icon should be inherited by parent elements.",required:!1},{propName:"forceSize",type:"oneOfType([\n  bool,\n  number\n])",description:"Either a boolean that will enforce the 24x24 size of the font icon or a number of the size\nto enforce. This is useful when using other font icon libraries that do not have a consistent\nsize.",required:!1},{propName:"forceFontSize",type:"custom",description:"Boolean if the `forceSize` prop should also force the `font-size` instead of only `width` and `height`.",required:!1},{propName:"children",type:"node",description:"Any children required to display the icon with the font library.",required:!1}],description:"The \\`FontIcon\\` component is used for rendering a font-icon library's\nicon. The default is to use the `material-icons` library, but others\ncan be used as well.\n\nIf you are using another font-icon library that does not always create\nicons with a perfect 1:1 scale (such as font-awesome), it is recommended\nto update the `.md-icon` styles to set the width and height to `$md-font-icon-size`.\nHowever, this will prevent different sided icons.\n\n```scss\n.md-icon.fa {\n  height: $md-font-icon-size;\n  width: $md-font-icon-size;\n}\n```"}],grids:[{id:"grid",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Grids/Grid.js",component:"Grid",functions:[{name:"getClassName",type:"function",description:"A utility function to get the grid's className based on the Grid's props. This is\nused behind the scenes to merge and create the className for the grid.\n\n### Example:\n```js\n<div className={Grid.getClassName()}>A base grid</div>\n<div className={Grid.getClassName({ stacked: true })}>A stacked Grid</div>\n```",returns:{description:"the full className to use for the grid",type:"String"},params:[{name:"props",description:"This should be an object of the `Grid`'s props. It\n   will extract the needed keys and generate the className.",type:"Object",required:!1}]}],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the Grid component. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#grid-proptypes-children)",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the Grid component. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#grid-proptypes-children)",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the Grid as. This should probably not be used as much\nas the `children` callback function.",required:!1,defaultValue:"'div'"},{propName:"children",type:"oneOfType([\n  func,\n  node\n])",description:"The children can either be renderable React elements or a callback function\nthat accepts the style and className props to apply so that the styles can\nbe manually added to whichever component.",required:!1},{propName:"container",type:"string",description:"An optional container name to apply to the Grid. This should be the same name as provided\nto the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.",required:!1},{propName:"stacked",type:"bool",description:"Boolean if the grid should be placed vertically instead of horizontally.",required:!1,defaultValue:"false"},{propName:"noSpacing",type:"bool",description:"Boolean if all the gutters and spacing should be removed from the grid.",required:!1,defaultValue:"false"},{propName:"gutter",type:"number",description:"When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\nis used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className",required:!1},{propName:"spacing",type:"number",description:"When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\nis used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className",required:!1}],description:""},{id:"cell",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Grids/Cell.js",component:"Cell",functions:[{name:"getClassName",type:"function",description:"A utility function to get the cell's className based on the Cell's props. This is\nused behind the scenes to merge and create the className for the cell.\n\n### Example:\n```js\n<div className={Cell.getClassName()}>A simple cell</div>\n<div className={Cell.getClassName({ size: 1 })}>A cell with size 1</div>\n```",returns:{description:"the full className to use for the cell",type:"String"},params:[{name:"props",description:"This should be an object of the `Cell`'s props. It\n   will extract the needed keys and generate the className.",type:"Object",required:!1}]}],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the Cell component. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#cell-proptypes-children)",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the Cell component. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#cell-proptypes-children)",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the Cell as. This should probably not be used as much\nas the `children` callback function.",required:!1,defaultValue:"'div'"},{propName:"children",type:"oneOfType([\n  func,\n  node\n])",description:"The children can either be renderable React elements or a callback function\nthat accepts the style and className props to apply so that the styles can\nbe manually added to whichever component.",required:!1},{propName:"align",type:"oneOf([\n  'top',\n  'middle',\n  'bottom',\n  'stretch'\n])",description:'An optional cell alignment to apply. When the `Grid` is not `stacked`,\nthis will apply to vertical alignment within each "row" of the grid.\n\nAlignments:\n- `top` - This will align to the top of the row\n- `middle` - This will align to the middle of the row\n- `bottom` - This will align to the bottom of the row\n- `stretch` - This will make the cell stretch to fill all the available space\n  in the row.\n\n@see [position](#cell-proptypes-position)',required:!1},{propName:"position",type:"oneOf([\n  'center',\n  'right'\n])",description:'An optional cell position to apply. When the `Grid` is not `stacked`,\nthis will apply to horizontal alignment within each "row" of the grid.\n\nPositions:\n- `center` - This will align the cell to be within the center of the row. This really\n   just applies `margin-left: auto; margin-right: auto`.\n- `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.\n\n@see [align](#cell-proptypes-align)',required:!1},{propName:"size",type:"number",description:"An optional size to apply to the cell. This sizing will be applied across all media sizes.\nIf the size is greater than the number of columns allowed for the media size, it will just\nspan the entire width.",required:!1},{propName:"order",type:"number",description:"An optional order to apply to the cell. This order will be applied across all media sizes.",required:!1},{propName:"offset",type:"number",description:"An optional offset to apply to the cell. This will add spacing to the left of the cell.",required:!1},{propName:"phoneSize",type:"number",description:"An optional size to apply to the cell only on phones.",required:!1},{propName:"phoneOrder",type:"number",description:"An optional order to apply to the cell only on phones.",required:!1},{propName:"phoneOffset",type:"number",description:"An optional offset to apply to the cell only on phones.",required:!1},{propName:"phoneHidden",type:"bool",description:"Boolean if the cell should be hidden on phones only.",required:!1,defaultValue:"false"},{propName:"tabletSize",type:"number",description:"An optional size to apply to the cell only on tablets.",required:!1},{propName:"tabletOrder",type:"number",description:"An optional order to apply to the cell only on tablets.",required:!1},{propName:"tabletOffset",type:"number",description:"An optional offset to apply to the cell only on tablets.",required:!1},{propName:"tabletHidden",type:"bool",description:"Boolean if the cell should be hidden on tablets only.",required:!1,defaultValue:"false"},{propName:"desktopSize",type:"number",description:"An optional size to apply to the cell only on desktops.",required:!1},{propName:"desktopOrder",type:"number",description:"An optional order to apply to the cell only on desktops.",required:!1},{propName:"desktopOffset",type:"number",description:"An optional offset to apply to the cell only on desktops.",required:!1},{propName:"desktopHidden",type:"bool",description:"Boolean if the cell should be hidden on desktops only.",required:!1,defaultValue:"false"}],description:""},{id:"grid-list",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Grids/GridList.js",component:"GridList",functions:[{name:"getClassNames",type:"function",description:"A utility function to get the grid's className based on the `Grid`'s and `Cell`'s\nprops. This is * used behind the scenes to merge and create the className for the grid.\n\n### Example:\n```js\nconst { className, cellClassName } = GridList.getClassNames();\nconst { className, cellClassName } = GridList.getClassNames({ size: 1, container: 'custom' });\n```",returns:{description:"an object containing the `className` and `cellClassName` attributes.",type:"Object"},params:[{name:"props",description:"This should be an object of the `Grid`'s props. It\n   will extract the needed keys and generate the classNames.",type:"Object",required:!1}]}],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the Grid component. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#grid-list-proptypes-children)",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the Grid component. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#grid-list-proptypes-children)",required:!1},{propName:"cellStyle",type:"object",description:"An optional style to apply to each child. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#grid-list-proptypes-children)",required:!1},{propName:"cellClassName",type:"string",description:"An optional className to apply to each child. This will only be applied\nif the `children` prop is not a callback function.\n\n@see [children](#grid-list-proptypes-children)",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the Cell as. This should probably not be used as much\nas the `children` callback function.",required:!1,defaultValue:"'div'"},{propName:"children",type:"oneOfType([\n  func,\n  node\n])",description:"The children can either be renderable React elements or a callback function\nthat accepts the style and className props to apply so that the styles can\nbe manually added to whichever component.",required:!1},{propName:"container",type:"string",description:"An optional container name to apply to the Grid. This should be the same name as provided\nto the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.",required:!1},{propName:"stacked",type:"bool",description:"Boolean if the grid should be placed vertically instead of horizontally.",required:!1,defaultValue:"false"},{propName:"noSpacing",type:"bool",description:"Boolean if all the gutters and spacing should be removed from the grid.",required:!1,defaultValue:"false"},{propName:"gutter",type:"number",description:"When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\nis used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className",required:!1},{propName:"spacing",type:"number",description:"When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\nis used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className",required:!1},{propName:"align",type:"oneOf([\n  'top',\n  'middle',\n  'bottom',\n  'stretch'\n])",description:'An optional cell alignment to apply. When the `Grid` is not `stacked`,\nthis will apply to vertical alignment within each "row" of the grid.\n\nAlignments:\n- `top` - This will align to the top of the row\n- `middle` - This will align to the middle of the row\n- `bottom` - This will align to the bottom of the row\n- `stretch` - This will make the cell stretch to fill all the available space\n  in the row.\n\n@see [position](#grid-list-proptypes-position)',required:!1},{propName:"position",type:"oneOf([\n  'center',\n  'right'\n])",description:'An optional cell position to apply. When the `Grid` is not `stacked`,\nthis will apply to horizontal alignment within each "row" of the grid.\n\nPositions:\n- `center` - This will align the cell to be within the center of the row. This really\n   just applies `margin-left: auto; margin-right: auto`.\n- `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.\n\n@see [align](#grid-list-proptypes-align)',required:!1},{propName:"size",type:"number",description:"An optional size to apply to the cell. This sizing will be applied across all media sizes.\nIf the size is greater than the number of columns allowed for the media size, it will just\nspan the entire width.",required:!1},{propName:"order",type:"number",description:"An optional order to apply to the cell. This order will be applied across all media sizes.",required:!1},{propName:"offset",type:"number",description:"An optional offset to apply to the cell. This will add spacing to the left of the cell.",required:!1},{propName:"phoneSize",type:"number",description:"An optional size to apply to the cell only on phones.",required:!1},{propName:"phoneOrder",type:"number",description:"An optional order to apply to the cell only on phones.",required:!1},{propName:"phoneOffset",type:"number",description:"An optional offset to apply to the cell only on phones.",required:!1},{propName:"phoneHidden",type:"bool",description:"Boolean if the cell should be hidden on phones only.",required:!1,defaultValue:"false"},{propName:"tabletSize",type:"number",description:"An optional size to apply to the cell only on tablets.",required:!1},{propName:"tabletOrder",type:"number",description:"An optional order to apply to the cell only on tablets.",required:!1},{propName:"tabletOffset",type:"number",description:"An optional offset to apply to the cell only on tablets.",required:!1},{propName:"tabletHidden",type:"bool",description:"Boolean if the cell should be hidden on tablets only.",required:!1,defaultValue:"false"},{propName:"desktopSize",type:"number",description:"An optional size to apply to the cell only on desktops.",required:!1},{propName:"desktopOrder",type:"number",description:"An optional order to apply to the cell only on desktops.",required:!1},{propName:"desktopOffset",type:"number",description:"An optional offset to apply to the cell only on desktops.",required:!1},{propName:"desktopHidden",type:"bool",description:"Boolean if the cell should be hidden on desktops only.",required:!1,defaultValue:"false"}],description:""}],helpers:{"accessible-fake-buttons":[{id:"accessible-fake-button",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/AccessibleFakeButton.js",component:"AccessibleFakeButton",functions:[{name:"focus",type:"function",description:"Focuses the button.",returns:null,params:[]},{name:"blur",type:"function",description:"Blurs the button.",returns:null,params:[]}],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"tabbedClassName",type:"string",description:"An optional function to call only when the button has been focused with the tab key.",required:!1},{propName:"children",type:"node",description:"Any children to display in the Accessible Fake Button.",required:!1},{propName:"onClick",type:"func",description:"An optional onClick function to call when the user clicks the\nbutton or presses space || enter.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional onKeyDown function to call.",required:!1},{propName:"onBlur",type:"func",description:"An optional onBlur function to call.",required:!1},{propName:"onKeyUp",type:"func",description:"An optional onKeyUp function to call.",required:!1},{propName:"onTabFocus",type:"func",description:"An optional function to call when the element is focused with the tab key.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the Fake button as.",required:!0,defaultValue:"'div'"},{propName:"noFocusOutline",type:"bool",description:"Boolean if the default outline should be removed the when the fake button has been focused.\n\n@see [tabbedClassName](#accessible-fake-button-proptypes-tabbed-class-name)",required:!1,defaultValue:"true"},{propName:"tabIndex",type:"number",description:"The tab index to use for the Fake button so it is keyboard focusable.",required:!1,defaultValue:"0"},{propName:"disabled",type:"bool",description:"Boolean if the Button is disabled. This will prevent tab focus.",required:!1},{propName:"role",type:"string",description:"The role for the accessible fake button. It is recommended to keep it\nthe default of `button` unless you are rendering it as an `a` tag.",required:!1,defaultValue:"'button'"},{propName:"listenToSpace",type:"bool",description:"Boolean if the spacebar should be used to trigger the click event. This _should_ be `true`\nis almost all cases.",required:!1,defaultValue:"true"},{propName:"listenToEnter",type:"bool",description:"Boolean if the enter key should be used to trigger the click event. This _should_ be `true`\nin most cases. By default, the param will be ignored if the `role` attribute is for a `checkbox`\nor `radio`. When it is a checkbox or radio, it will attempt to submit the form on the enter\nkeypress instead like the native elements.",required:!1,defaultValue:"true"}],description:"The `AccessibleFakeButton` is a generic component that can be used to render\na `div` or any other non `button` components as a button. This should not be\nused often.\n\nThe `AccessibleFakeButton` allows the user to tab focus the element, use the\nspace or enter key to trigger the `onClick` event, and toggles the `aria-pressed`\nattribute."}],collapses:[{id:"collapse",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/Collapse.js",component:"Collapse",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to merge with the `Motion` style.",required:!1},{propName:"defaultStyle",type:"object",description:"An optional default style to merge with the `Motion` default style.",required:!1},{propName:"collapsed",type:"bool",description:"Boolean if the children are currently collapsed.",required:!0},{propName:"children",type:"element",description:"A single child to collapse or expand.",required:!0},{propName:"springConfig",type:"object",description:"The spring config to use for the animation.",required:!0,defaultValue:"{\n  precision: 0.5,\n}"},{propName:"animate",type:"bool",description:"Boolean if the single child entering or leaving should be animated.",required:!1,defaultValue:"true"},{propName:"minHeight",type:"number",description:"The min height to apply for the collapse div.",required:!0,defaultValue:"0"}],description:"The `Collapse` component is used to animate a single child entering\nor leaving. This uses the `react-motion` library to animate the height,\npadding-top, and padding-bottom of an element when the `collapsed` prop\nchanges."}],"focus-containers":[{id:"focus-container",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/FocusContainer.js",component:"FocusContainer",functions:[],enums:[],getters:[{name:"getContainer",type:"getter",description:"Return reference to the top-most DOM node of the rendered container.",returns:{description:"Reference to the top-most DOM node of the rendered container.",type:"union"},params:[]}],props:[{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render as. This can be a React DOM element or\na react Component.",required:!0,defaultValue:"'div'"},{propName:"componentRef",type:"oneOfType([\n  func,\n  object\n])",description:"An optional ref to get reference to the rendered component.\nJust like other refs, this will provide null when it unmounts.",required:!1},{propName:"containerRef",type:"oneOfType([\n  func,\n  object\n])",description:"An optional ref to get reference to the top-most element of the rendered container.\nJust like other refs, this will provide null when it unmounts.\n\nThis is helpful if you'd like access the DOM node for a parent Component without needing to use\n`ReactDOM.findDOMNode`.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"children",type:"node",description:"The children to display.",required:!1},{propName:"initialFocus",type:"string",description:'An optional id string or a query selector string to use for the initial focus.\nThis will only be triggered if the `focusOnMount` prop is `true`. If this is\nomitted and the `focusOnMount` prop is `true`, the first focusable element in the\ncontainer will be focused.\n\nExamples:\n\n```js\ninitialFocus="#someAmazingId"\n// or\ninitialFocus=".md-btn,.md-list-tile"\n```',required:!1},{propName:"focusOnMount",type:"bool",description:"Boolean if an element in the container should be focused when mounted.",required:!1},{propName:"additionalFocusKeys",type:"arrayOf(number)",description:"An optional list of additional key codes to use for focus events.",required:!1},{propName:"containFocus",type:"bool",description:"Boolean if the focus container should start or stop containing the focus within the container.\nThis is useful for changing the focus requirements after mount.",required:!1,defaultValue:"true"}],description:"This component is used for keeping the focus within some container. When the container\nis mounted and the `focusOnMount` prop is `true`, it will attempt to focus either:\n- an element that matches `document.getElementById(this.props.initialFocus)`\n- an element that matches `this._container.querySelector(this.props.initialFocus)`\n- the first focusable element in it's children (if `this.props.initialFocus` is omitted)"}],"icon-separators":[{id:"icon-separator",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/IconSeparator.js",component:"IconSeparator",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"labelStyle",type:"object",description:"An optional style to apply to the label.",required:!1},{propName:"labelClassName",type:"string",description:"An optional className to apply to the label.",required:!1},{propName:"label",type:"node",description:"The label to display.",required:!0},{propName:"children",type:"node",description:"The icon to display.",required:!0},{propName:"iconBefore",type:"bool",description:"Boolean if the icon should appear before or after the text",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to be rendered as.",required:!0,defaultValue:"'div'"}],description:"The `IconSeparator` component is a simple helper component to render some text and\nan icon with some space between them while centering the text. The icon can either\ncome before or after the text."}],layovers:[{id:"layover",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/Layover.js",component:"Layover",functions:[],enums:[{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]},{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"A id to give the layover itself. This is generally recommended for accessibility. If the\nchild does not have an id, the child will automatically be updated to be `${id}-layover`.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the layover.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the layover.",required:!1},{propName:"visible",type:"bool",description:"Boolean if the layover's child is currently visible.",required:!0},{propName:"fixedTo",type:"custom",description:"This should either be a single element or two elements that the layover recalculates\nits fixed position when scrolling for horizontal and vertical.\n\nWhen it is a single element, it will recalculate for both horizontal and vertical\nscrolling. Otherwise, you can specify the element for horizontal scrolling and a\nseparate element for vertical scrolling. If one is omitted, it will default to `window`.\n\nIf the component is no longer considered to be in view after scrolling, the `onClose`\nprop will be called.",required:!1,defaultValue:"typeof window !== 'undefined' ? window : {}"},{propName:"toggle",type:"node",description:"The renderable item that causes the Layover to become visible. This _should_\nmost likely be an `element` or `arrayOf(element)`, but anything is allowed.",required:!1},{propName:"toggleQuery",type:"oneOfType([\n  func,\n  object,\n  string\n])",description:"Since the `toggle` prop can be anything, I need a way to be able to find an\nelement to base all the calculations on. This can either be a string that\ngets passed to `layover.querySelector`, a DOM Element, or a function that\nreturns a DOM Element.",required:!0,defaultValue:'\'.md-text-field-container,button,*[role="button"],*[role="listbox"]\''},{propName:"children",type:"element",description:"A single child that should be fixed to the toggle element.",required:!0},{propName:"block",type:"bool",description:"Boolean if the Layover should be displayed as a block instead of as an inline block.",required:!1},{propName:"centered",type:"bool",description:"Boolean if the `children` should be centered horizontally and vertically while keeping\nits height in mind as well. This is *only* valid if both the x and y `anchor` targets\nare `CENTER`.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the layover should gain the `md-full-width` class name.",required:!1},{propName:"sameWidth",type:"bool",description:"Boolean if the width of the children should be updated automatically to be the width\nof the toggle element.",required:!1},{propName:"minLeft",type:"oneOfType([\n  number,\n  string\n])",description:"The minimum value the `left` style can be for the child component. This is really just used\nto make sure it doesn't scroll off the left of the page. It can also be used to make\nfull screen layovers on devices when when the `fillViewportWidth` prop is enabled.\n\nThis can either be a number of pixels or a string for percentages. If this value is a string\n**it will always be used over the calculated values** so it is preferred to use a number.\n\n@see [minRight](#layover-proptypes-min-right)\n@see [fillViewportWidth](#layover-proptypes-fill-viewport-width)",required:!0,defaultValue:"0"},{propName:"minRight",type:"oneOfType([\n  number,\n  string\n])",description:"The minimum value the `right` style can be for the child component. This is really just used\nto make sure it doesn't scroll off the right of the page when the `fillViewportWidth` prop is\nenabled.\n\nThis can either be a number of pixels or a string for percentages. If this value is a string\n**it will always be used over the calculated values** so it is preferred to use a number.\n\n@see [minLeft](#layover-proptypes-min-left)\n@see [fillViewportWidth](#layover-proptypes-fill-viewport-width)",required:!0,defaultValue:"0"},{propName:"minBottom",type:"number",description:"The minimum value that can be used for the `bottom` prop when the `fillViewportHeight` prop is enabled.\nIt is generally recommended to keep this value at `0` to keep it stretched to the bottom of the viewport\nor setting it to a small positive number to add some padding.\n\nThis can either be a number of pixels or a string for percentages. If this value is a string\n**it will always be used over the calculated values** so it is preferred to use a number.\n\n@see [fillViewportHeight](#layover-proptypes-fill-viewport-height)",required:!0,defaultValue:"0"},{propName:"fillViewportWidth",type:"bool",description:"Boolean if the layover should make the child fill the entire viewport's width. This will just\nstyle the child element with:\n\n```js\nchildStyle = {\n  left: this.props.minLeft,\n  right: this.props.minRight,\n};\n```\n\nIf you add any additional constraints such as `width` or `max-width`, it will not span the entire viewport's\nwidth. This prop should generally really only be used on mobile devices. Using this prop along with\n`fillViewportHeight` for Autocompletes can create great Android mobile searches. See the `fillViewportHeight`\nfor more information about why it is *only Android*.\n\n@see [minLeft](#layover-proptypes-min-left)\n@see [minRight](#layover-proptypes-min-right)\n@see [fillViewportHeight](#layover-proptypes-fill-viewport-height)",required:!1,defaultValue:"false"},{propName:"fillViewportHeight",type:"bool",description:"Boolean if the layover should fill the height of the viewport from the current calculated `top`. This will just\nstyle the child element with:\n\n```js\nchildStyle = {\n  top: currentCalculatedTop,\n  bottom: this.props.minBottom,\n  maxHeight: 'none',\n};\n```\n\nThis is *super* nice on Android devices since it will allow you to create nice toolbar search autocompletes\nin your app and the list of items will grow until it reaches the soft keyboard. It isn't as nice on iOS since\niOS does not subtract the soft keyboard from the viewport's size so the list will still extend to the bottom\nof the page.\n\n@see [minBottom](#layover-proptypes-min-bottom)\n@see [fillViewportWidth](#layover-proptypes-fill-viewport-width)",required:!1,defaultValue:"false"},{propName:"onClose",type:"func",description:"A function used to hide the visibility of the children when the children are no longer\nvisible or an element outside of the layover is clicked.",required:!0},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the Layover as.",required:!0,defaultValue:"'div'"},{propName:"transitionName",type:"string",description:"The transition name to use for the children appearing/disappearing.",required:!0,defaultValue:"'md-layover'"},{propName:"transitionEnterTimeout",type:"number",description:"The transition duration for the enter animation. The animation can be disabled by setting\nthis value to 0.",required:!0,defaultValue:"200"},{propName:"transitionLeaveTimeout",type:"number",description:"The transition duration for the leave animation. The animation can be disabled by setting\nthis value to 0.",required:!0,defaultValue:"200"},{propName:"xThreshold",type:"number",description:"This is a threshold that is used to calculate if the `children` is still in\nview by applying this multiplier to the `children`'s width.",required:!0,defaultValue:"0.38"},{propName:"yThreshold",type:"number",description:"This is a threshold that is used to calculate if the `children` is still in\nview by applying this multiplier to the `toggle`'s height.",required:!0,defaultValue:"0.38"},{propName:"closeOnOutsideClick",type:"bool",description:"Boolean if the `children` should be hidden when an element outside\nof the `Layout` component has been clicked.",required:!0,defaultValue:"true"},{propName:"anchor",type:"custom",description:'This is how the children get "anchored" to the `toggle` element and how the\nauto-fix attempts will be made. Right now, the auto fixes will only be handled\non viewport boundaries instead of `fixedTo` boundaries. It was too hard for\nfirst attempt.\n\nThe general behavior will be that an equal-opposite of an anchor will be chosen\nwhen that direction is out of viewport. So for example, the children are out\nof viewport for the right of the screen, and the `anchor.x` value is\n`Layover.HorizontalPositions.RIGHT`, the children will be swapped to be the `LEFT`\nof the `toggle` component now.\n\nSo a full list:\n- `LEFT` / `RIGHT`\n- `INNER_LEFT` / `INNER_RIGHT`\n- `TOP` / `BOTTOM`\n\nThe `CENTER` and `OVERLAP` positions can not be automatically adjusted.\n\n> To be safe, you should use the enum values for the `x` and `y` values.\n@see [Layover.VerticalAnchors](#layover-enums-vertical-anchors)\n@see [Layover.HorizontalAnchors](#layover-enums-horizontal-anchors)',required:!1,defaultValue:"{\n  x: Layover.HorizontalAnchors.INNER_LEFT,\n  y: Layover.VerticalAnchors.OVERLAP,\n}"},{propName:"belowAnchor",type:"custom",description:'This is how the children get "anchored" when the `animationPositions` is set to `Layover.Positions.BELOW`.\nSet this to `null` to continue using the base `anchor` prop instead of switching to this anchor.\n\n@see [anchor](#layover-proptypes-anchor)',required:!1,defaultValue:"{\n  x: Layover.HorizontalAnchors.CENTER,\n  y: Layover.VerticalAnchors.BOTTOM,\n}"},{propName:"animationPosition",type:"custom",description:"This is the position that the children should animate from. It directly ties into\nthe `$md-layover-child-positions` Sass variable.",required:!1,defaultValue:"Layover.Positions.BELOW"},{propName:"onContextMenu",type:"func",description:"If you would like the layover to interact as a context menu, provide this prop. It will\nmake the children appear relative to the context menu origin automatically.\n\n@see [preventContextMenu](#layover-proptypes-prevent-context-menu)",required:!1},{propName:"preventContextMenu",type:"bool",description:"Boolean if the default behavior of the context menu should be prevented when using the\n`onContextMenu` prop.\n\n@see [onContextMenu](#layover-proptypes-on-context-menu)",required:!1,defaultValue:"true"},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the layover should attempt to automatically adjust the position of the element to\nkeep it within the viewport. If this value is set to `false`, the `onClose` prop will be called\ninstead.",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the layover should attempt to automatically adjust the position of the element to\nkeep it within the viewport. If this value is set to `false`, the `onClose` prop will be called\ninstead.",required:!1,defaultValue:"false"},{propName:"simplified",type:"bool",description:"Boolean if the layover should become \"simplified\". This basically disables all the logic for\nkeeping the child within the viewport and allows you to manage all the positioning via CSS.\n\nWhen this is enabled, it updates the `Layover` to have `position: relative` while the child will\nhave `position: absolute` which will allow for simple `top`, `right`, `bottom`, and/or `left` CSS\nto position as wanted.\n\nThis is really only helpful in cases where the layover can't calculate things correctly due to\nbeing in fixed containers somewhere in the page or some other weird stuff. Hopefully this won't\nreally need to be used much.",required:!1,defaultValue:"false"}],description:"The Layover component is used to keep a component fixed to another component\nwhile the page is scrolling or a container is scrolling. When the fixed component\nis considered out of view, it will be closed.\n\n> NOTE: Don't look at source code. Plz."}],portals:[{id:"portal",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/Portal.js",component:"Portal",functions:[],enums:[],getters:[],props:[{propName:"className",type:"string",description:"An optional className to apply to the newly created `component` when visible.",required:!1},{propName:"visible",type:"bool",description:"Boolean if the children are visible.",required:!0},{propName:"children",type:"element",description:"The children to render when visible.",required:!1},{propName:"component",type:"string",description:"The component to render as. This should be a valid DOM element.",required:!0,defaultValue:"'span'"},{propName:"onOpen",type:"func",description:"An optional function to call when the portal is opened.",required:!1},{propName:"onClose",type:"func",description:"An optional function to call when the portal is closed",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the portal into. The default is to render as\nthe first child in the `body`.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the portal should render the children as the last child of the `renderNode`\nor `body` instead of the first.",required:!1}],description:'Creates a "Portal" for the children to be rendered in. Basically it will render the\nchildren only when the `visible` prop is `true`. When it is visible, a new `component`\nwill be rendered as the first child in the body with the children inside.\n\nUnlike all the other components, `style` will not be applied for the `Portal`.'}],"resize-observers":[{id:"resize-observer",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Helpers/ResizeObserver.js",component:"ResizeObserver",functions:[],enums:[],getters:[],props:[{propName:"watchHeight",type:"bool",description:"Boolean if the height should be watched for the resize target.",required:!1,defaultValue:"false"},{propName:"watchWidth",type:"bool",description:"Boolean if the width should be watched for the resize target.",required:!1,defaultValue:"false"},{propName:"target",type:"oneOfType([\n  object,\n  string\n])",description:"An optional target that should be used for detecting resize events. This can either\nbe a HTMLDOMNode or a string to use with `document.getElementById` or `document.querySelector`.\n\nIf this prop is not provided and not null, it will default to the parent node of this component.\nIf the provided `target={null}`, the observer will not begin until the `target` is `undefined` or\nit has been correctly passed a target string or object.",required:!1},{propName:"component",type:"string",description:"The component to be rendered as. This should normally just be the default `span`, but there are cases\nwhere the component should be switched to something else for valid html.",required:!1,defaultValue:"'span'"},{propName:"onResize",type:"func",description:"A function to call when the height or width has been changed and that attribute is being watched.\nThe callback will include the current height, width, scrollHeight and scrollWidth of the target.\n\n```js\nonResize({\n  height: nextHeight,\n  width: nextWidth,\n  scrollHeight: nextScrollHeight,\n  scrollWidth: nextScrollWidth,\n  el: resizeTarget,\n});\n```",required:!0},{propName:"elRef",type:"func",description:"An optional ref callback that will include the `target` or the parent node of the resize observer. Just\nlike other refs, this will provide null when it unmounts.\n\nThis is really only helpful if you'd like the DOM node for a parent Component without needing to use\n`ReactDOM.findDOMNode(this)`.",required:!1}],description:"The `ResizeObserver` component is a component hook for the\n[ResizeObserver](http://rawgit.com/WICG/ResizeObserver/master/index.html)\nusing the [resize-observer-polyfill](https://github.com/que-etc/resize-observer-polyfill)\nfor browsers that don't support it yet.\n\nThis component displays an empty `span` with `aria-hidden` to allow access to the DOM. By\ndefault it will attempt to watch changes on its parent component, but it can be configured\nto watch any element by using the `target` prop."}]},inks:[{id:"inject-ink",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Inks/injectInk.js",component:"injectInk",functions:[{name:"createInk",type:"function",description:"A publicly accessible way to manually create an ink. This can be used with the `refs`.\nThe ink can either be created by using the `pageX` and `pageY` from a click/touch event\nor it will be created in the center of the `ComposedComponent`.\n\n```js\n<SomeInkedComponent ref={inkHOC => inkHOC.createInk()} />\n```",returns:null,params:[{name:"pageX",description:"An optional pageX of the click or touch event.",type:"number",required:!1},{name:"pageY",description:"An optional pageY of the click or touch event.",type:"number",required:!1}]},{name:"focus",type:"function",description:"This will attempt to focus the composed component. If the component is disabled, nothing\nwill happen. If the `disabled` and `inkDisabled` props are not set to `true`, an ink will\nalso be created.\n\n```js\n<SomeInkedComponent ref={inkHOC => inkHOC.focus()} />\n```",returns:null,params:[]},{name:"getComposedComponent",type:"function",description:"Gets the composed component as a ref. This is useful if you need to access the ref of the\ncomposed component instead of the `injectInk` HOC to use some publicly accessible methods.\n\n```js\n<SomeInkedComponent\n  ref={inkHOC => {\n    inkHOC.getComposedComponent().focus();\n  }}\n/>\n```",returns:null,params:[]}],enums:[],getters:[],props:[{propName:"inkStyle",type:"object",description:"An optional style to apply to each ink that gets generated.",required:!1},{propName:"inkClassName",type:"string",description:"An optional className to apply to each ink that gets generated.",required:!1},{propName:"inkContainerStyle",type:"object",description:"An optional style to apply to the ink's container.",required:!1},{propName:"inkContainerClassName",type:"string",description:"An optional className to apply to the ink's container.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the composed component or the ink is disabled.",required:!1},{propName:"inkDisabled",type:"bool",description:"Boolean if only the ink is disabled for the composed component.",required:!1},{propName:"inkTransitionOverlap",type:"number",description:"The time (in ms) that the enter and leave transitions for the ink should overlap.\nThis really just allows for a more _fluid_ looking ink when something is quickly\ntouched or clicked by having it fade out while growing.",required:!0,defaultValue:"150"},{propName:"inkTransitionEnterTimeout",type:"number",description:"The transition time for the ink to be considered fully entered. This should really\nmap up to whatever value you set for `$md-ink-enter-transition-time`.",required:!0,defaultValue:"450"},{propName:"inkTransitionLeaveTimeout",type:"number",description:"The transition time for the ink to be considered fully leaved (left?). This should really\nmap up to whatever value you set for `$md-ink-leave-transition-time`.",required:!0,defaultValue:"300"},{propName:"waitForInkTransition",type:"bool",description:"Boolean if the `ComposedComponent`'s click event only after the ink has finished transitioning\nin and out. This is really only to get a more _fluid_ looking click event when clicking on\nthe `ComposedComponent` ends up taking it out of the view. (ex: Closing a Dialog).",required:!1},{propName:"disabledInteractions",type:"arrayOf(oneOf([\n  'keyboard',\n  'mouse',\n  'touch'\n]))",description:"An optional array of interactions that can be disabled for the ink. This is a *very* limited\nuse case where `Switches` needed the ink disabled only when using a mouse.",required:!1},{propName:"pulse",type:"bool",description:"Boolean if the ink should do a pulse animation while focused. This was enabled by default in\nprevious versions.",required:!1}],description:'Takes any component and injects an ink container for having the Material Design Ink effect.\n\nThe default triggers for an ink are:\n- mouse down event\n- touch start event\n- keyboard focus\n- form submit\n\nThe form submit ink will only be triggered if the `ComposedComponent` has the attribute\n`type="submit"`, the `ComposedComponent` is in a form, and the user hits the `enter` key\nwhile not actively focusing the `ComposedComponent`.\n\n```js\n@param {function} ComposedComponent - The React Component to inject an `ink` prop into.\n@return {function} a new React class rendering the `ComposedComponent` and adding an\n   `ink` pop.\n```'}],lists:[{id:"list",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Lists/List.js",component:"List",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the list.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the list.",required:!1},{propName:"ordered",type:"bool",description:"Boolean if this should be an ordered list (`<ol>`) component. Otherwise, it will\nbe rendered as `<ul>`.",required:!1},{propName:"children",type:"node",description:"This *should* be a list of `ListItem`, `ListItemControl`, `Divider`, or\n`Subheader`.",required:!1},{propName:"inline",type:"bool",description:"Boolean if the list should appear horizontally instead of vertically.",required:!1},{propName:"subheader",type:"deprecated(PropTypes.string)",description:"The `subheader` prop has been deprecated and will be removed in the next major release.\n    \nUse the `Subheader` component as a child instead.",required:!1},{propName:"primarySubheader",type:"deprecated(PropTypes.bool)",description:"The `primarySubheader` prop has been deprecated and will be removed in the next major release.\n    \nUse the `Subheader` component as a child instead.",required:!1}],description:"Lists present multiple line items vertically as a single continuous element."},{id:"list-item",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Lists/ListItem.js",component:"ListItem",functions:[{name:"focus",type:"function",description:"A utility function to focus the `AccessibleFakeInkedButton` in the `ListItem` and also\ninject an ink to indicate focus.",returns:null,params:[]},{name:"blur",type:"function",description:"A utility function to blur the `AccessibleFakeInkedButton` in the `ListItem`.",returns:null,params:[]}],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the `li` tag.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the `li` tag.",required:!1},{propName:"tileStyle",type:"object",description:"An optional style to apply to the `.md-list-tile`.\n\n@see [component](#list-item-proptypes-component)",required:!1},{propName:"tileClassName",type:"string",description:"An optional className to apply to the `.md-list-tile`.\n\n@see [component](#list-item-proptypes-component)",required:!1},{propName:"contentStyle",type:"object",description:"An optional style to apply to the div that surrounds the `primaryText` and `secondaryText`\nnodes.",required:!1},{propName:"contentClassName",type:"string",description:"An optional className to apply to the div that surrounds the `primaryText` and `secondaryText`\nnodes.",required:!1},{propName:"leftNodeStyle",type:"object",description:"An optional style to apply to the element that is rendered before content node.",required:!1},{propName:"leftNodeClassName",type:"string",description:"An optional className to apply to the element that is rendered before content node.",required:!1},{propName:"rightNodeStyle",type:"object",description:"An optional style to apply to the element that is rendered after content node.",required:!1},{propName:"rightNodeClassName",type:"string",description:"An optional className to apply to the element that is rendered after content node.",required:!1},{propName:"primaryTextStyle",type:"object",description:"An optional style to apply to the div surrounding the `primaryText`.",required:!1},{propName:"primaryTextClassName",type:"string",description:"An optional className to apply to the div surrounding the `primaryText`.",required:!1},{propName:"secondaryTextStyle",type:"object",description:"An optional style to apply to the div surrounding the `secondaryText`.",required:!1},{propName:"secondaryTextClassName",type:"string",description:"An optional className to apply to the div surrounding the `secondaryText`.",required:!1},{propName:"nestedListStyle",type:"object",description:"An optional style to apply to the nested `List` that gets created when using `nestedItems`.",required:!1},{propName:"nestedListClassName",type:"string",description:"An optional className to apply to the nested `List` that gets created when using `nestedItems`.",required:!1},{propName:"nestedListHeightRestricted",type:"bool",description:"Boolean if the nested `List` in a cascading menu should be restricted.",required:!1},{propName:"children",type:"node",description:"Any additional children to display in the `.md-list-tile`. If you use this prop,\nyou will most likely need to override the `height` for the `.md-list-tile--icon`,\n`.md-list-tile--avatar`, `.md-list-tile--two-lines`, and/or `.md-list-tile--three-lines`\nto get it to display correctly unless the children are positioned `absolute`.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the `ListItem` is disabled.",required:!1},{propName:"tabIndex",type:"number",description:"An optional tab index for the `.md-list-tile`. If omitted, it will default to the\n`AccessibleFakeButton`'s `tabIndex` default prop value.",required:!1},{propName:"primaryText",type:"node",description:"The primary text to display. This will only be rendered as a single line. Any overflown\ntext will be converted to ellipsis.",required:!0},{propName:"secondaryText",type:"node",description:"An optional secondary text to display below the `primaryText`. This can be an additional\none or two lines. Like the `primaryText`, and overflown text will be converted to ellipsis.\n\nYou must set the `threeLines` prop to `true` if you want this to be displayed as two lines.",required:!1},{propName:"leftIcon",type:"node",description:"An optional `FontIcon` to display to the left of the text.",required:!1},{propName:"leftAvatar",type:"node",description:"An optional `Avatar` to display to the left of the text. If you have a mixed `List` of\n`FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to\n`true` so that the `Avatar` will be scaled down to the `FontIcon` size.",required:!1},{propName:"rightIcon",type:"node",description:"An optional `FontIcon` to display to the right of the text.",required:!1},{propName:"rightAvatar",type:"node",description:"An optional `Avatar` to display to the right of the text. If you have a mixed `List` of\n`FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to\n`true` so that the `Avatar` will be scaled down to the `FontIcon` size.",required:!1},{propName:"inset",type:"bool",description:"Boolean if the list item should be inset as if there is a `leftIcon` or a `leftAvatar`.\nThis is used for some lists where only a parent contains the icon.",required:!1},{propName:"threeLines",type:"bool",description:"Boolean if the `secondaryText` should span two lines instead of one. This will include\nthree lines of text in total when including the `primaryText`.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the `.md-list-tile` as. This is mostly useful if you\nwant to use the `ListItem` for navigation and working with the `react-router`'s `Link`\ncomponent.\n\nThis prop is **not** the top-most element of the `ListItem` component. To change the\ntop-most element, see the `itemComponent` prop.\n\n@see [itemComponent](#list-item-proptypes-item-component)",required:!0,defaultValue:"'div'"},{propName:"itemComponent",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the top-most element of the `ListItem` component. This is the\n`.md-list-item` and defaults to the `<li>` element.\n\n@see [component](#list-item-proptypes-component)\n@see [itemProps](#list-item-proptypes-item-props)",required:!0,defaultValue:"'li'"},{propName:"itemRef",type:"func",description:"An optional ref callback to get reference to the top-most element of the `ListItem` component.\nJust like other refs, this will provide null when it unmounts.",required:!1},{propName:"nestedItems",type:"arrayOf(node)",description:"An optional list of `ListItem`, `ListItemControl`, `Divider`, or `Subheader` components\nto render in a nested list. This will inject an expander icon to the right of the text\nin the `.md-list-tile` that rotates 180 degrees when open.\n\nThe nested items will be visible once the user clicks on the `ListItem`.\n\n@see [visible](#list-item-proptypes-visible)",required:!1},{propName:"prependNested",type:"bool",description:"An optional parameter determining whether `nestedItems` should be placed before or after `ListItemText`",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the `nestedItems` are visible by default.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onClick', 'defaultVisible')",description:"Boolean if the `nestedItems` are visible. This will make the `nestedItems` controlled\nand require the `onClick` function to be defined.\n\n@see [defaultVisible](#list-item-proptypes-default-visible)",required:!1},{propName:"expanderIcon",type:"element",description:"An icon to use for the expander icon when there are nested items.",required:!1,defaultValue:"<FontIcon>keyboard_arrow_down</FontIcon>"},{propName:"expanderLeft",type:"bool",description:"Boolean if the expander icon should appear as the left icon instead of the right.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when the `.md-list-tile` is clicked. This is required if the\n`visible` prop is defined.",required:!1},{propName:"onMouseOver",type:"func",description:"An optional function to call when the `.md-list-tile` triggers the `mouseover` event.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the `.md-list-tile` triggers the `mouseleave` event.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the `.md-list-tile` triggers the `touchstart` event.",required:!1},{propName:"onTouchEnd",type:"func",description:"An optional function to call when the `.md-list-tile` triggers the `touchend` event.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the `.md-list-tile` triggers the `keydown` event.",required:!1},{propName:"onKeyUp",type:"func",description:"An optional function to call when the `.md-list-tile` triggers the `keyup` event.",required:!1},{propName:"active",type:"bool",description:"Boolean if the `ListItem` is currently active. This will apply the `activeClassName` prop\nto the `leftIcon`, `rightIcon`, and the `primaryText`.",required:!1},{propName:"activeClassName",type:"string",description:"The className to apply to the `leftIcon`, `rightIcon`, and `primaryText` when the `active`\nprop is `true`.",required:!1,defaultValue:"'md-text--theme-primary'"},{propName:"activeBoxStyle",type:"object",description:"An optional style to apply to the top-most element of the `ListItem` component (`.md-list-item`)\nwhen the `active` prop is `true`.",required:!1},{propName:"activeBoxClassName",type:"string",description:"The className to apply to the top-most element of the `ListItem` component (`.md-list-item`)\nwhen the `active` prop is `true`.",required:!1},{propName:"animateNestedItems",type:"bool",description:"Boolean if the nested items should animate when they appear or disappear.",required:!1,defaultValue:"true"},{propName:"renderChildrenOutside",type:"bool",description:"Boolean if the children should be rendered outside auf the AccessibleFakeButton component.",required:!1,defaultValue:"false"},{propName:"aria-setsize",type:"number",description:"Defines the number of items in the list. This is only required when all items in the\nlist are not present in the DOM.\n\n@see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize",required:!1},{propName:"aria-posinset",type:"custom",description:"Defines the items position in the list. This is only required when all items in the list\nare not present in the DOM. The custom validation just requires this prop if the `aria-setsize`\nprop is defined as a helpful reminder.\n\n@see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset",required:!1},{propName:"itemProps",type:"object",description:"Any additional props you would like to supply to the surrounding `<li>` tag for the `ListItem`.\nBy default, all props will be provided to the inner `AccessibleFakeButton`. If the `passPropsToItem`\nprop is enabled, the remaining props will be provided to the `<li>` tag instead and this prop\nis probably useless.",required:!1},{propName:"tileProps",type:"object",description:"Any additional props you would like to add to the inner `AccessibleFakeButton`. By default, all the\nremaining props will be provided to the `AccessibleFakeButton`, so this prop is probably useless.\nEnabling the `passPropsToItem` prop will change the default behavior so that the remaining props\nare provided to the surrounding `<li>` node instead and this prop becomes useful.",required:!1},{propName:"passPropsToItem",type:"bool",description:"All the remaining props should be passed to the surrounding `<li>` node instead of the `AccessibleFakeButton`.\n\n> NOTE: This will most likely become the default in the next *major* release. Migration warnings will be added\nif that is the case.",required:!1},{propName:"expanderIconChildren",type:"deprecated(PropTypes.node)",description:"The `expanderIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `expanderIcon` instead.",required:!1},{propName:"expanderIconClassName",type:"deprecated(PropTypes.string)",description:"The `expanderIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `expanderIcon` instead.",required:!1},{propName:"initiallyOpen",type:"deprecated(PropTypes.bool)",description:"The `initiallyOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"defaultOpen",type:"deprecated(PropTypes.bool)",description:"The `defaultOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1}],description:"The `ListItem` component is used for rendering a `li` tag with text and optional\nicons/avatars."},{id:"list-item-control",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Lists/ListItemControl.js",component:"ListItemControl",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the `.md-list-item`.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the `.md-list-item`.",required:!1},{propName:"tileStyle",type:"object",description:"An optional style to apply to the `.md-list-tile`.",required:!1},{propName:"tileClassName",type:"string",description:"An optional className to apply to the `.md-list-tile`.",required:!1},{propName:"primaryText",type:"node",description:"The primary text to display in the `ListItemControl`. The `primaryAction` or\n`secondaryAction` will end up getting the `label` prop injected into it with\na combination of the `primaryText` and `secondaryText`. If the `primaryAction`\nor `secondaryAction` already have a label prop, the `label` prop will be used\nas the `primaryText`.",required:!1},{propName:"secondaryText",type:"node",description:"An optional secondary text that can be displayed in the label of the `primaryAction`\nor `secondaryAction`.",required:!1},{propName:"threeLines",type:"bool",description:"Boolean if the primary and secondary text will span three lines.",required:!1},{propName:"primaryAction",type:"element",description:"The primary action of the `ListItemControl`. This _should_ normally\nbe a type of `SelectionControl`",required:!1},{propName:"secondaryAction",type:"element",description:"The secondary action of the `ListItemControl`. This _should_ normally\nbe a type of `SelectionControl`. If it is a selection control,\nmake sure to add the `labelBefore` prop to get correct positioning.",required:!1},{propName:"leftIcon",type:"node",description:"An optional `FontIcon` to display to the left of the action.",required:!1},{propName:"leftAvatar",type:"node",description:"An optional `Avatar` to display to the left of the action.",required:!1},{propName:"rightIcon",type:"node",description:"An optional `FontIcon` to display to the right of the action.",required:!1},{propName:"rightAvatar",type:"node",description:"An optional `FontIcon` to display to the right of the action.",required:!1},{propName:"aria-setsize",type:"number",description:"Defines the number of items in the list. This is only required when all items in the\nlist are not present in the DOM.\n\n@see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize",required:!1},{propName:"aria-posinset",type:"custom",description:"Defines the items position in the list. This is only required when all items in the list\nare not present in the DOM. The custom validation just requires this prop if the `aria-setsize`\nprop is defined as a helpful reminder.\n\n@see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset",required:!1}],description:""}],media:[{id:"media",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Media/Media.js",component:"Media",functions:[],enums:[],getters:[],props:[{propName:"className",type:"string",description:"An optional className to apply to the card media component.",required:!1},{propName:"children",type:"node",description:"Any media to display.",required:!1},{propName:"forceAspect",type:"bool",description:"Boolean if the aspect ratio should be forced.",required:!1,defaultValue:"true"},{propName:"aspectRatio",type:"custom",description:"The aspect ratio to use.",required:!1,defaultValue:"'16-9'"},{propName:"expandable",type:"bool",description:"Boolean if this component should be expandable when there is a `CardExpander`\nabove it in the `Card`.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the card media as.",required:!0,defaultValue:"'section'"}],description:"The `Media` component is used to display images, iframes, ...media. Who'da thunk?"},{id:"media-overlay",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Media/MediaOverlay.js",component:"MediaOverlay",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the overlay.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the overlay.",required:!1},{propName:"children",type:"node",description:"Any children to display in the overlay. This is _normally_ a `CardTitle` component\nor some buttons.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to be rendered as.",required:!0,defaultValue:"'div'"}],description:"The `MediaOverlay` component is just a very simple wrapper that adds the\n`.md-media-overlay` class name to a div. The overlay will be positioned\nat the bottom of the `Media` by default."}],menus:[{id:"menu",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Menus/Menu.js",component:"Menu",functions:[],enums:[{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]},{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]}],getters:[],props:[{propName:"id",type:"custom",description:"An id to provide to the menu's container. This is required for accessibility as it generates\nthe `aria-` attributes for dynamic content.\n\n@see [listId](#menu-proptypes-list-id)",required:!1},{propName:"listId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the menu's list. If this prop is omitted, the list's id will be\n`\\`${id}-list\\``",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the main container for the menu.",required:!1},{propName:"className",type:"string",description:"An optional class name to apply to the main container for the menu.",required:!1},{propName:"listStyle",type:"object",description:"An optional style to apply to the list once the menu has opened.",required:!1},{propName:"listClassName",type:"string",description:"An optional class name to apply to the list once the menu has opened.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the main container as.\n\n@see [Layover#component](/components/helpers/layovers?tab=1#layover-proptypes-component)",required:!1},{propName:"anchor",type:"custom",description:"This is how the menu's `List` gets anchored to the `toggle` element.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)",required:!1,defaultValue:"{\n  x: Layover.HorizontalAnchors.INNER_RIGHT,\n  y: Layover.VerticalAnchors.OVERLAP,\n}"},{propName:"belowAnchor",type:"custom",description:"This is the optional anchor to use when the `position` is set to `Menu.Positions.BELOW`.\nSet this to `null` to use the default `anchor` prop.\n\n@see [Layover#belowAnchor](/components/helpers/layovers?tab=1#layover-proptypes-below-anchor)",required:!1},{propName:"position",type:"custom",description:"This is the animation position for the list that appears.\n\n@see [Layover#animationPosition](/components/helpers/layovers?tab=1#layover-proptypes-animation-position)",required:!1,defaultValue:"Layover.Positions.TOP_RIGHT"},{propName:"toggle",type:"node",description:"This is the component/element that should toggle the menu open.\n\n@see [Layover#toggle](/components/helpers/layovers?tab=1#layover-proptypes-toggle)",required:!1},{propName:"fixedTo",type:"custom",description:'This is how the menu\'s list will be "fixed" to the `toggle` component.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)',required:!1,defaultValue:"typeof window !== 'undefined' ? window : {}"},{propName:"listProps",type:"object",description:"Any additional props that should be applied to the list in the menu. This is really used\nwhen additional `aria-` tags need to be applied.",required:!1},{propName:"listInline",type:"bool",description:"Boolean if the menu's list should appear horizontally instead of vertically.",required:!1},{propName:"listZDepth",type:"number",description:"The list's z-depth for applying box shadow. This should be a number from 0 to 5.",required:!0,defaultValue:"2"},{propName:"listHeightRestricted",type:"bool",description:"Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/\n`$md-menu-desktop-max-height` values.\n\n@see [md-menu-mobile-max-height](/components/menus?tab=2#variable-md-menu-mobile-max-height)\n@see [md-menu-desktop-max-height](/components/menus?tab=2#variable-md-menu-desktop-max-height)",required:!1,defaultValue:"true"},{propName:"visible",type:"bool",description:"Boolean if the menu's list is visible.",required:!0},{propName:"children",type:"node",description:"Any children to render in the menu's list. This _should_ normally be `ListItem`, or\n`ListItemControl`.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when en element in the menu has been clicked.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when a key is pressed anywhere in the menu.",required:!1},{propName:"onClose",type:"func",description:"A function to call to close the menu. This is used for closing on outside clicks,\nclosing when a list item has been clicked, or the user presses escape.",required:!0},{propName:"cascading",type:"bool",description:"Boolean if the menu should be cascading. This means that the menu will pop the additional\n`nestedItems` on any `ListItem` to be appear either to the right or left of the visible list.",required:!1},{propName:"cascadingAnchor",type:"custom",description:"This is how the cascading lists get anchored to the list item.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)",required:!1,defaultValue:"{\n  x: Layover.HorizontalAnchors.RIGHT,\n  y: Layover.VerticalAnchors.OVERLAP,\n}"},{propName:"cascadingZDepth",type:"number",description:"This is the z-depth the list should gain for a cascading menu. This only gets applied on\nitems that are more than 1 level deep.",required:!0,defaultValue:"3"},{propName:"fullWidth",type:"bool",description:"Boolean if the `md-full-width` class name should get applied to the menu's container.",required:!1},{propName:"block",type:"bool",description:"Boolean if the menu should be displayed as a block instead of as an inline block.\n\n@see [fullWidth](#menu-proptypes-full-width)",required:!1},{propName:"centered",type:"custom",description:"@see [Layover#centered](/components/helpers/layovers?tab=1#layover-proptypes-centered)",required:!1},{propName:"sameWidth",type:"custom",description:"@see [Layover#sameWidth](/components/helpers/layovers?tab=1#layover-proptypes-same-width)",required:!1},{propName:"onContextMenu",type:"custom",description:"If you would like the menu to interact as a context menu, provide this prop.\n\n@see [Layover#onContextMenu](/components/helpers/layovers?tab=1#layover-proptypes-on-context-menu)",required:!1},{propName:"preventContextMenu",type:"custom",description:"Boolean if the default behavior of the context menu should be prevented when using the\n`onContextMenu` prop.\n\n@see [Layover#preventContextMenu](/components/helpers/layovers?tab=1#layover-proptypes-prevent-context-menu)",required:!1},{propName:"xThreshold",type:"number",description:"@see [Layover#xThreshold](/components/helpers/layovers?tab=1#layover-proptypes-x-threshold)",required:!1},{propName:"yThreshold",type:"number",description:"@see [Layover#yThreshold](/components/helpers/layovers?tab=1#layover-proptypes-y-threshold)",required:!1},{propName:"closeOnOutsideClick",type:"bool",description:"@see [Layover#closeOnOutsideClick](/components/helpers/layovers?tab=1#layover-proptypes-close-on-outside-click)",required:!1},{propName:"toggleQuery",type:"oneOfType([\n  func,\n  object,\n  string\n])",description:"@see [Layover#toggleQuery](/components/helpers/layovers?tab=1#layover-proptypes-toggle-query)",required:!1},{propName:"transitionName",type:"string",description:"An optional transition name to use for the list appearing/disappearing.\n\n@see [Layover#transitionName](/components/helpers/layovers?tab=1#layover-proptypes-transition-name)",required:!1},{propName:"transitionEnterTimeout",type:"number",description:"@see [Layover#transitionEnterTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-enter-timeout)",required:!1},{propName:"transitionLeaveTimeout",type:"number",description:"@see [Layover#transitionLeaveTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-leave-timeout)",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"false"},{propName:"simplified",type:"bool",description:"@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1,defaultValue:"true"},{propName:"minLeft",type:"oneOfType([\n  number,\n  string\n])",description:"@see [Layover#minLeft](/components/helpers/layovers?tab=1#layover-proptypes-min-left)",required:!1},{propName:"minRight",type:"oneOfType([\n  number,\n  string\n])",description:"@see [Layover#minRight](/components/helpers/layovers?tab=1#layover-proptypes-min-right)",required:!1},{propName:"minBottom",type:"oneOfType([\n  number,\n  string\n])",description:"@see [Layover#minBottom](/components/helpers/layovers?tab=1#layover-proptypes-min-bottom)",required:!1},{propName:"fillViewportWidth",type:"bool",description:"@see [Layover#fillViewportWidth](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-width)",required:!1},{propName:"fillViewportHeight",type:"bool",description:"@see [Layover#fillViewportHeight](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-height)",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"close",type:"deprecated(PropTypes.func)",description:"The `close` prop has been deprecated and will be removed in the next major release.\n    \nUse `onClose` instead.",required:!1},{propName:"autoclose",type:"deprecated(PropTypes.bool)",description:"The `autoclose` prop has been deprecated and will be removed in the next major release.\n    \nThe menus will always autoclose as according to the specs.",required:!1},{propName:"contained",type:"deprecated(PropTypes.bool)",description:"The `contained` prop has been deprecated and will be removed in the next major release.\n    \nUse `sameWidth` instead.",required:!1},{propName:"limitHeight",type:"deprecated(PropTypes.bool)",description:"The `limitHeight` prop has been deprecated and will be removed in the next major release.\n    \nThe menus will always be limited in height as according to the specs.",required:!1},{propName:"expanderIconClassName",type:"deprecated(PropTypes.node)",description:"The `expanderIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nThe expander for cascading menus will now just be a simple rotate of the existing `ListItem` expander icon.",required:!1},{propName:"expanderIconChildren",type:"deprecated(PropTypes.node)",description:"The `expanderIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nThe expander for cascading menus will now just be a simple rotate of the existing `ListItem` expander icon.",required:!1}],description:"The `Menu` controlled component is used to display a list of children in the `List`\ncomponent once the `visible` prop is true."},{id:"dropdown-menu",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Menus/DropdownMenu.js",component:"DropdownMenu",functions:[],enums:[{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]},{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An id to use for the menu. This is required for accessibility.\n\n@see [Menu#id](/components/menus?tab=1#menu-proptypes-id)",required:!1},{propName:"listId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the menu's list.\n\n@see [Menu#listId](/components/menus?tab=1#menu-proptypes-list-id)",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the menu.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the menu.",required:!1},{propName:"listStyle",type:"object",description:"An optional style to apply to the list.",required:!1},{propName:"listClassName",type:"string",description:"An optional class name to apply to the list.",required:!1},{propName:"listProps",type:"object",description:"Any additional props to provide to the list.\n\n@see [Menu#listProps](/components/menus?tab=1#menu-proptypes-list-props)",required:!1},{propName:"listZDepth",type:"number",description:"The z-depth to use for the list.\n\n@see {@link Menus/Menu/listZDepth}",required:!1},{propName:"listInline",type:"bool",description:"Boolean if the list should be displayed inline.\n\n@see [List#inline](/components/lists?tab=1#list-proptypes-inline)",required:!1},{propName:"listHeightRestricted",type:"bool",description:"Boolean if the list's height should be restricted.\n\n@see [Menu#listHeightRestricted](/components/menus?tab=1#menu-proptypes-list-height-restricted)",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"Boolean if the menu's list is currently visible. If this is defined, it will\nrequire the `onVisibilityChange` function to be defined since it will become\na controlled component.",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the menu's list should be visible by default.",required:!0,defaultValue:"false"},{propName:"onClick",type:"func",description:"An optional function to call when the button is clicked.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the visibility changes for the menu. The callback will\ninclude the next visibility state and the event that triggered the change.\n\n```js\nonVisibilityChange(visible, event);\n```",required:!1},{propName:"menuItems",type:"oneOfType([\n  number,\n  string,\n  object,\n  node,\n  arrayOf(  oneOfType([\n    string,\n    number,\n    object,\n    node\n  ]))\n])",description:"This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type\nof the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.\nIf it is an object, it should be the shape of the `ListItem` props. If it is a node, it will\njust be rendered in the `List`.\n\n@see [ListItem](/components/lists?tab=1#list-item-proptypes)\n@see [Menu#children](/components/menus?tab=1#menu-proptypes-children)",required:!1},{propName:"children",type:"element",description:"@see [Menu#toggle](/components/menus?tab=1#menu-proptypes-toggle)",required:!0},{propName:"anchor",type:"custom",description:"The anchor position of the menu's list.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)",required:!1},{propName:"belowAnchor",type:"custom",description:"This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n\n@see [Layover#belowAnchor](/components/helpers/layovers?tab=1#layover-proptypes-below-anchor)",required:!1},{propName:"fixedTo",type:"custom",description:"This is how the menu's list is fixed to the toggle.\n\n@see [Menu#fixedTo](/components/menus?tab=1#menu-proptypes-fixed-to)",required:!1},{propName:"position",type:"custom",description:"This is the animation position for the menu's list.\n\n@see [Menu#position](/components/menus?tab=1#menu-proptypes-position)",required:!1},{propName:"cascading",type:"bool",description:"Boolean if the menu's list should gain the cascading styles.\n\n@see [Menu#cascading](/components/menus?tab=1#menu-proptypes-cascading)",required:!1},{propName:"cascadingZDepth",type:"number",description:"The zDepth to use for the lists that appear in cascading menus.\n\n@see [Menu#cascadingZDepth](/components/menus?tab=1#menu-proptypes-cascading-z-depth)",required:!1},{propName:"cascadingAnchor",type:"custom",description:"The anchor position for the cascading lists.\n\n@see [Menu#cascadingAnchor](/components/menus?tab=1#menu-proptypes-cascading-anchor)",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the menu should display as a full width container. This will *not* update the button\nto be full width as well.\n\n@see [Menu#fullWidth](/components/menus?tab=1#menu-proptypes-full-width)",required:!1},{propName:"block",type:"bool",description:"Boolean if the menu's container should display as `block` instead of `inline-block`.\n\n@see [Menu#block](/components/menus?tab=1#menu-proptypes-block)",required:!1},{propName:"centered",type:"bool",description:"Boolean if the list should appear centered related to the button.\n\n@see [Menu#centered](/components/menus?tab=1#menu-proptypes-centered)",required:!1},{propName:"sameWidth",type:"bool",description:"Boolean if the menu's list should be the same width as the button.\n\n@see [Menu#sameWidth](/components/menus?tab=1#menu-proptypes-same-width)",required:!1},{propName:"xThreshold",type:"number",description:"@see [Menu#xThreshold](/components/menus?tab=1#menu-proptypes-x-threshold)",required:!1},{propName:"yThreshold",type:"number",description:"@see [Menu#yThreshold](/components/menus?tab=1#menu-proptypes-y-threshold)",required:!1},{propName:"closeOnOutsideClick",type:"bool",description:"Boolean if the menu's list should be closed when an element outside of the menu has been clicked.\n\n@see [Menu#closeOnOutsideClick](/components/menus?tab=1#menu-proptypes-close-on-outside-click)",required:!1},{propName:"transitionName",type:"string",description:"The transition name to use for the menu's list visibility changes.\n\n@see [Menu#transitionName](/components/menus?tab=1#menu-proptypes-transition-name)",required:!1},{propName:"transitionEnterTimeout",type:"number",description:"The transition name to use when the menu's list gains visibility.\n\n@see [Menu#transitionEnterTimeout](/components/menus?tab=1#menu-proptypes-transition-enter-timeout)",required:!1},{propName:"transitionLeaveTimeout",type:"number",description:"The transition timeout to use when the menu's list loses visibility.\n\n@see [Menu#transitionLeaveTimeout](/components/menus?tab=1#menu-proptypes-transition-leave-timeout)",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"false"},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1},{propName:"minLeft",type:"custom",description:"@see [Layover#minLeft](/components/helpers/layovers?tab=1#layover-proptypes-min-left)",required:!1},{propName:"minRight",type:"custom",description:"@see [Layover#minRight](/components/helpers/layovers?tab=1#layover-proptypes-min-right)",required:!1},{propName:"minBottom",type:"custom",description:"@see [Layover#minBottom](/components/helpers/layovers?tab=1#layover-proptypes-min-bottom)",required:!1},{propName:"fillViewportWidth",type:"bool",description:"@see [Layover#fillViewportWidth](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-width)",required:!1},{propName:"fillViewportHeight",type:"bool",description:"@see [Layover#fillViewportHeight](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-height)",required:!1}],description:"The `DropdownMenu` is just a simple wrapper to the `Menu` component. The main differences\nis that the `toggle` component will now be the children and the list of items to display\nwill be the `menuItems` prop.\n\nThe dropdown menu is mostly used to control the state of the menu and render a single element\nas the toggle."},{id:"menu-button",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Menus/MenuButton.js",component:"MenuButton",functions:[],enums:[{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]},{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An id to use for the menu button. This is required for accessibility.\n\n@see [Menu#id](/components/menus?tab=1#menu-proptypes-id)",required:!1},{propName:"listId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the menu's list.\n\n@see [Menu#listId](/components/menus?tab=1#menu-proptypes-list-id)",required:!1},{propName:"buttonId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the button. If this is omitted, the button will automatically\ngain an id of `${id}-toggle`.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the button.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the button.",required:!1},{propName:"menuStyle",type:"object",description:"An optional style to apply to the surrounding menu.",required:!1},{propName:"menuClassName",type:"string",description:"An optional className to apply to the surrounding menu.",required:!1},{propName:"listStyle",type:"object",description:"An optional style to apply to the list.",required:!1},{propName:"listClassName",type:"string",description:"An optional class name to apply to the list.",required:!1},{propName:"listProps",type:"object",description:"Any additional props to provide to the list.\n\n@see [Menu#listProps](/components/menus?tab=1#menu-proptypes-list-props)",required:!1},{propName:"listZDepth",type:"number",description:"The z-depth to use for the list.\n\n@see {@link Menus/Menu/listZDepth}",required:!1},{propName:"listInline",type:"bool",description:"Boolean if the list should be displayed inline.\n\n@see [List#inline](/components/lists?tab=1#list-proptypes-inline)",required:!1},{propName:"listHeightRestricted",type:"bool",description:"Boolean if the list's height should be restricted.\n\n@see [Menu#listHeightRestricted](/components/menus?tab=1#menu-proptypes-list-height-restricted)",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"Boolean if the menu's list is currently visible. If this is defined, it will\nrequire the `onVisibilityChange` function to be defined since it will become\na controlled component.",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the menu's list should be visible by default.",required:!0,defaultValue:"false"},{propName:"onClick",type:"func",description:"An optional function to call when the button is clicked.\n\n@see [onMenuClick](#menu-button-proptypes-on-menu-click)",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when the `mousedown` event is triggered by the button.\n\n@see [onMenuMouseDown](#menu-button-proptypes-on-menu-mouse-down)",required:!1},{propName:"onMouseUp",type:"func",description:"An optional function to call when the `mouseup` event is triggered by the button.\n\n@see [onMenuMouseUp](#menu-button-proptypes-on-menu-mouse-up)",required:!1},{propName:"onMouseEnter",type:"func",description:"An optional function to call when the `mouseenter` event is triggered by the button.\n\n@see [onMenuMouseEnter](#menu-button-proptypes-on-menu-mouse-enter)",required:!1},{propName:"onMouseMove",type:"func",description:"An optional function to call when the `mousemove` event is triggered by the button.\n\n@see [onMenuMouseMove](#menu-button-proptypes-on-menu-mouse-move)",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the `mouseleave` event is triggered by the button.\n\n@see [onMenuMouseLeave](#menu-button-proptypes-on-menu-mouse-leave)",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the `touchstart` event is triggered by the button.\n\n@see [onMenuTouchStart](#menu-button-proptypes-on-menu-touch-start)",required:!1},{propName:"onTouchMove",type:"func",description:"An optional function to call when the `touchmove` event is triggered by the button.\n\n@see [onMenuTouchMove](#menu-button-proptypes-on-menu-touch-move)",required:!1},{propName:"onTouchEnd",type:"func",description:"An optional function to call when the `touchend` event is triggered by the button.\n\n@see [onMenuTouchEnd](#menu-button-proptypes-on-menu-touch-end)",required:!1},{propName:"onTouchCancel",type:"func",description:"An optional function to call when the `touchcancel` event is triggered by the button.\n\n@see [onMenuTouchCancel](#menu-button-proptypes-on-menu-touch-cancel)",required:!1},{propName:"onFocus",type:"func",description:"An optional function to call when the `focus` event is triggered by the button.\n\n@see [onMenuFocus](#menu-button-proptypes-on-menu-focus)",required:!1},{propName:"onBlur",type:"func",description:"An optional function to call when the `blur` event is triggered by the button.\n\n@see [onMenuBlur](#menu-button-proptypes-on-menu-blur)",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the `keydown` event is triggered by the button.\n\n@see [onMenuKeyDown](#menu-button-proptypes-on-menu-key-down)",required:!1},{propName:"onKeyUp",type:"func",description:"An optional function to call when the `keyup` event is triggered by the button.\n\n@see [onMenuKeyUp](#menu-button-proptypes-on-menu-key-up)",required:!1},{propName:"onMenuClick",type:"func",description:"An optional function to call when any element in the entire `MenuButton` is clicked. This can be triggered\nby clicking the button or any list item that appears in the menu list.\n\n@see [onClick](#menu-button-proptypes-on-click)",required:!1},{propName:"onMenuMouseDown",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `mousedown` event.\n\n@see [onMouseDown](#menu-button-proptypes-on-mouse-down)",required:!1},{propName:"onMenuMouseUp",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `mouseup` event.\n\n@see [onMouseUp](#menu-button-proptypes-on-mouse-up)",required:!1},{propName:"onMenuMouseEnter",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `mouseenter` event.\n\n@see [onMouseEnter](#menu-button-proptypes-on-mouse-enter)",required:!1},{propName:"onMenuMouseMove",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `mousemove` event.\n\n@see [onMouseMove](#menu-button-proptypes-on-mouse-move)",required:!1},{propName:"onMenuMouseLeave",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `mouseleave` event.\n\n@see [onMouseLeave](#menu-button-proptypes-on-mouse-leave)",required:!1},{propName:"onMenuTouchStart",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `touchstart` event.\n\n@see {@link @onTouchStart}",required:!1},{propName:"onMenuTouchMove",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `touchmove` event.\n\n@see {@link @onTouchMove}",required:!1},{propName:"onMenuTouchEnd",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `touchend` event.\n\n@see {@link @onTouchEnd}",required:!1},{propName:"onMenuTouchCancel",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `touchcancel` event.\n\n@see {@link @onTouchCancel}",required:!1},{propName:"onMenuFocus",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `focus` event.\n\n@see [onFocus](#menu-button-proptypes-on-focus)",required:!1},{propName:"onMenuBlur",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `blur` event.\n\n@see [onBlur](#menu-button-proptypes-on-blur)",required:!1},{propName:"onMenuKeyDown",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `keydown` event.\n\n@see [onKeyDown](#menu-button-proptypes-on-key-down)",required:!1},{propName:"onMenuKeyUp",type:"func",description:"An optional function to call when any element in the `MenuButton` triggers the `keyup` event.\n\n@see [onKeyUp](#menu-button-proptypes-on-key-up)",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the visibility changes for the menu. The callback will\ninclude the next visibility state and the event that triggered the change.\n\n```js\nonVisibilityChange(visible, event);\n```",required:!1},{propName:"menuItems",type:"oneOfType([\n  number,\n  string,\n  object,\n  node,\n  arrayOf(  oneOfType([\n    string,\n    number,\n    object,\n    node\n  ]))\n])",description:"This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type\nof the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.\nIf it is an object, it should be the shape of the `ListItem` props. If it is a node, it will\njust be rendered in the `List`.\n\n@see [ListItem](/components/lists?tab=1#list-item-proptypes)\n@see [Menu#children](/components/menus?tab=1#menu-proptypes-children)",required:!1},{propName:"children",type:"node",description:"This should be the children to use in the `Button` that gets created as the menu's toggle.\n\n@see [Button](/components/buttons?tab=1#button-proptypes)\n@see [Menu#toggle](/components/menus?tab=1#menu-proptypes-toggle)",required:!1},{propName:"anchor",type:"custom",description:"The anchor position of the menu's list.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)",required:!1},{propName:"belowAnchor",type:"custom",description:"This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n\n@see [Layover#belowAnchor](/components/helpers/layovers?tab=1#layover-proptypes-below-anchor)",required:!1},{propName:"fixedTo",type:"custom",description:"This is how the menu's list is fixed to the toggle.\n\n@see [Menu#fixedTo](/components/menus?tab=1#menu-proptypes-fixed-to)",required:!1},{propName:"position",type:"custom",description:"This is the animation position for the menu's list.\n\n@see [Menu#position](/components/menus?tab=1#menu-proptypes-position)",required:!1},{propName:"cascading",type:"bool",description:"Boolean if the menu's list should gain the cascading styles.\n\n@see [Menu#cascading](/components/menus?tab=1#menu-proptypes-cascading)",required:!1},{propName:"cascadingZDepth",type:"number",description:"The zDepth to use for the lists that appear in cascading menus.\n\n@see [Menu#cascadingZDepth](/components/menus?tab=1#menu-proptypes-cascading-z-depth)",required:!1},{propName:"cascadingAnchor",type:"custom",description:"The anchor position for the cascading lists.\n\n@see [Menu#cascadingAnchor](/components/menus?tab=1#menu-proptypes-cascading-anchor)",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the menu should display as a full width container. This will *not* update the button\nto be full width as well.\n\n@see [Menu#fullWidth](/components/menus?tab=1#menu-proptypes-full-width)",required:!1},{propName:"block",type:"bool",description:"Boolean if the menu's container should display as `block` instead of `inline-block`.\n\n@see [Menu#block](/components/menus?tab=1#menu-proptypes-block)",required:!1},{propName:"centered",type:"bool",description:"Boolean if the list should appear centered related to the button.\n\n@see [Menu#centered](/components/menus?tab=1#menu-proptypes-centered)",required:!1},{propName:"sameWidth",type:"bool",description:"Boolean if the menu's list should be the same width as the button.\n\n@see [Menu#sameWidth](/components/menus?tab=1#menu-proptypes-same-width)",required:!1},{propName:"xThreshold",type:"number",description:"@see [Menu#xThreshold](/components/menus?tab=1#menu-proptypes-x-threshold)",required:!1},{propName:"yThreshold",type:"number",description:"@see [Menu#yThreshold](/components/menus?tab=1#menu-proptypes-y-threshold)",required:!1},{propName:"closeOnOutsideClick",type:"bool",description:"Boolean if the menu's list should be closed when an element outside of the menu has been clicked.\n\n@see [Menu#closeOnOutsideClick](/components/menus?tab=1#menu-proptypes-close-on-outside-click)",required:!1},{propName:"transitionName",type:"string",description:"The transition name to use for the menu's list visibility changes.\n\n@see [Menu#transitionName](/components/menus?tab=1#menu-proptypes-transition-name)",required:!1},{propName:"transitionEnterTimeout",type:"number",description:"The transition name to use when the menu's list gains visibility.\n\n@see [Menu#transitionEnterTimeout](/components/menus?tab=1#menu-proptypes-transition-enter-timeout)",required:!1},{propName:"transitionLeaveTimeout",type:"number",description:"The transition timeout to use when the menu's list loses visibility.\n\n@see [Menu#transitionLeaveTimeout](/components/menus?tab=1#menu-proptypes-transition-leave-timeout)",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"false"},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1},{propName:"minLeft",type:"custom",description:"@see [Layover#minLeft](/components/helpers/layovers?tab=1#layover-proptypes-min-left)",required:!1},{propName:"minRight",type:"custom",description:"@see [Layover#minRight](/components/helpers/layovers?tab=1#layover-proptypes-min-right)",required:!1},{propName:"minBottom",type:"custom",description:"@see [Layover#minBottom](/components/helpers/layovers?tab=1#layover-proptypes-min-bottom)",required:!1},{propName:"fillViewportWidth",type:"bool",description:"@see [Layover#fillViewportWidth](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-width)",required:!1},{propName:"fillViewportHeight",type:"bool",description:"@see [Layover#fillViewportHeight](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-height)",required:!1},{propName:"buttonChildren",type:"deprecated(PropTypes.node)",description:"The `buttonChildren` prop has been deprecated and will be removed in the next major release.\n    \nTo build a button, put any elements in the `children`. The `ListItem` have been moved to the `menuItems` prop.",required:!1},{propName:"onMenuToggle",type:"deprecated(PropTypes.bool)",description:"The `onMenuToggle` prop has been deprecated and will be removed in the next major release.\n    \nUse `onVisibilityChange` instead.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"defaultOpen",type:"deprecated(PropTypes.bool)",description:"The `defaultOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1}],description:"The `MenuButton` is a simple wrapper / combination of the `Button` and the `Menu`\ncomponents that can be uncontrolled."}],"navigation-drawers":[{id:"navigation-drawer",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/NavigationDrawers/NavigationDrawer.js",component:"NavigationDrawer",functions:[{name:"getCurrentMedia",type:"function",description:"Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,\nand the current drawer type. This expects a `props` object of the drawer.\n\nIf this is used server side, it will default to only matching mobile.",returns:{description:"an object containing the media matches and the current type to use for the drawer.",type:"Object"},params:[{name:"props",description:"The current drawer's prop shape to extract the mobile, tablet, and desktop type/min\n   widths. This defaults to the drawer's default props.",type:"Object",required:!1}]}],enums:[{name:"DrawerTypes",type:"constant",description:"An enum for all the different type of drawers.",properties:[{name:"FULL_HEIGHT",description:"This is the default drawer type. It will always be on the screen and takes\nup the entire height. This is very helpful for main navigation on desktops\nwhen you do not need an expandable workspace.",value:"full-height"},{name:"CLIPPED",description:"This drawer type will always be on the screen, but it will appear under the\nmain toolbar.",value:"clipped"},{name:"FLOATING",description:"This drawer type will always be on the screen, but it will appear under the\nmain toolbar and have a transparent background. This is useful if you want\na persistent drawer on desktop screens, but do not want the main focus to be\nthe drawer.",value:"floating"},{name:"PERSISTENT",description:"A persistent drawer changes between being hidden and being fixed on the page like\na permanent drawer. When it is visible, it will take up the same amount of room\nas a permanent drawer, and will not go away until closed.\n\nThis drawer type is helpful when you need to have a dynamic workspace size.",value:"persistent"},{name:"PERSISTENT_MINI",description:'This is a modification of the persistent drawer. It will behave as the persistent drawer\nbut it will always have a "mini" drawer visible. This is helpful when you want to have\na dynamic workspace size and keep certain actions available at all times.',value:"persistent-mini"},{name:"TEMPORARY",description:"A temporary drawer will not be visible by default. When it is visible, it will overlay\nthe page to get the main focus on the drawer. When the user touches the overlay or\none of the navigation items, the drawer will be closed. The overlay can be disabled on\ndesktop and tablets.",value:"temporary"},{name:"TEMPORARY_MINI",description:'This is a modification of the temporary drawer. It will behave like a temporary drawer,\nbut it will always have a "mini" drawer visible. Just like the `PERSISTENT_MINI` drawer\ntype, this is useful when certain actions should be available at all times but additional\nactions are available when the drawer is visible.',value:"temporary-mini"}]}],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the entire div wrapper.",required:!1},{propName:"drawerId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the drawer. This is generally a good idea to provide if\nthere are any `navItems` defined.\n\n@see [navItemsId](#navigation-drawer-proptypes-nav-items-id)\n@see [miniDrawerId](#navigation-drawer-proptypes-mini-drawer-id)",required:!1},{propName:"navItemsId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the navItems list. If this is omitted and the `drawerId` prop is\ndefined, it will be defaulted to `${drawerId}-nav-items`.\n\n@see [drawerId](#navigation-drawer-proptypes-drawer-id)\n@see [Drawer#navItemsId](/components/drawers?tab=1#drawer-proptypes-nav-items-id)",required:!1},{propName:"miniDrawerId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to apply to mini drawer that gets created when the `drawerType` is set to\none of the mini types.\n\n@see [drawerId](#navigation-drawer-proptypes-drawer-id)\n@see [miniNavItemsId](#navigation-drawer-proptypes-mini-nav-items-id)",required:!1},{propName:"miniNavItemsId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to apply to mini drawer's navigation list that gets created when the `drawerType`\nis set to one of the mini types.\n\n@see [navItemsId](#navigation-drawer-proptypes-nav-items-id)\n@see [miniDrawerId](#navigation-drawer-proptypes-mini-drawer-id)",required:!1},{propName:"toolbarId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the main toolbar.",required:!1},{propName:"contentId",type:"custom",description:"An id to give the main content. A hidden link is created in the main drawer's header that links to the main\ncontent. This is used for keyboard only users to jump the navigation and jump straight to the content.\n\nIf you provide your own `drawerHeader`, it is suggested to include the link yourself.",required:!1,defaultValue:"'main-content'"},{propName:"style",type:"object",description:"An optional style to apply to the surrounding container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the surrounding container.",required:!1},{propName:"toolbarStyle",type:"object",description:"An optional style to apply to the main toolbar.",required:!1},{propName:"toolbarClassName",type:"string",description:"An optional className to apply to the toolbar.",required:!1},{propName:"toolbarTitleStyle",type:"object",description:"An optional style to apply to the main toolbar's title.",required:!1},{propName:"toolbarTitleClassName",type:"string",description:"An optional className to apply to the main toolbar's title.",required:!1},{propName:"drawerStyle",type:"object",description:"An optional style to apply to the drawer.",required:!1},{propName:"drawerClassName",type:"string",description:"An optional className to apply to the drawer.",required:!1},{propName:"navStyle",type:"object",description:"An optional style to apply to the `List` surrounding the `navItems`.",required:!1},{propName:"navClassName",type:"string",description:"An optional className to apply to the `List` surrounding the `navItems`.",required:!1},{propName:"miniDrawerStyle",type:"object",description:"An optional style to apply to the mini drawer that gets created when the `drawerType` is set\nto one of the mini types.\n\n@see [miniDrawerClassName](#navigation-drawer-proptypes-mini-drawer-class-name)\n@see [miniNavStyle](#navigation-drawer-proptypes-mini-nav-style)\n@see [miniNavClassName](#navigation-drawer-proptypes-mini-nav-class-name)",required:!1},{propName:"miniDrawerClassName",type:"string",description:"An optional className to apply to the mini drawer that gets created when the `drawerType` is set\nto one of the mini types.\n\n@see [miniDrawerStyle](#navigation-drawer-proptypes-mini-drawer-style)\n@see [miniNavStyle](#navigation-drawer-proptypes-mini-nav-style)\n@see [miniNavClassName](#navigation-drawer-proptypes-mini-nav-class-name)",required:!1},{propName:"miniNavStyle",type:"object",description:"An optional style to apply to the mini drawer's navigation list when the `drawerType` is set\nto one of the mini types.\n\n@see [miniDrawerStyle](#navigation-drawer-proptypes-mini-drawer-style)\n@see [miniDrawerClassName](#navigation-drawer-proptypes-mini-drawer-class-name)\n@see [miniNavClassName](#navigation-drawer-proptypes-mini-nav-class-name)",required:!1},{propName:"miniNavClassName",type:"string",description:"An optional className to apply to the mini drawer's navigation list when the `drawerType` is set\nto one of the mini types.\n\n@see [miniDrawerStyle](#navigation-drawer-proptypes-mini-drawer-style)\n@see [miniDrawerClassName](#navigation-drawer-proptypes-mini-drawer-class-name)\n@see [miniNavStyle](#navigation-drawer-proptypes-mini-nav-style)",required:!1},{propName:"contentStyle",type:"object",description:"An optional style to apply to the content. This is the container surrounding whatever\n`children` are passed in.",required:!1},{propName:"contentClassName",type:"string",description:"An optional className to apply to the content. This is the container surrounding whatever\n`children` are passed in.",required:!1},{propName:"overlayStyle",type:"object",description:"An optional style to apply to the overlay.",required:!1},{propName:"overlayClassName",type:"string",description:"An optional className to apply to the overlay.",required:!1},{propName:"children",type:"node",description:"The children to display in the main content.",required:!1},{propName:"includeDrawerHeader",type:"bool",description:"Boolean if the `drawerHeader` component should be built if the `drawerHeader` prop is not\npassed in.",required:!1,defaultValue:"true"},{propName:"drawerHeader",type:"node",description:"An optional header to display in the drawer. This will normally be the `Toolbar` component\nor any other type of header. You can either use this prop with the `CloseButton` component\nwhen displaying a persistent drawer, or use the `drawerTitle` and `drawerHeaderChildren` prop\nto build a toolbar.",required:!1},{propName:"drawerTitle",type:"invalidIf(PropTypes.node, 'drawerHeader')",description:"An optional title to use for the drawer's header toolbar. If the `drawerHeader` prop is defined,\nthis is invalid.",required:!1},{propName:"drawerZDepth",type:"number",description:"An optional zDepth to apply to the drawer. If this is omitted, the value will be set as follows:\n- floating || inline = 1\n- temporary = 5\n- all others = 1\n\n@see [Paper#zDepth](/components/papers?tab=1#paper-proptypes-z-depth)",required:!1},{propName:"drawerChildren",type:"node",description:"Any additional children to display after the `drawerHeader` and `navItems` list in the drawer.",required:!1},{propName:"drawerHeaderChildren",type:"invalidIf(PropTypes.node, 'drawerHeader')",description:"Any additional children to display in the drawer's header `Toolbar`. If the `drawerHeader` prop is defined,\nthis is invalid.",required:!1},{propName:"position",type:"oneOf([\n  'left',\n  'right'\n])",description:"The position for the drawer to be displayed.",required:!0,defaultValue:"Drawer.defaultProps.position"},{propName:"navItems",type:"arrayOf(oneOfType([\n  element,\n    shape({\n    divider: bool,\n    subheader: bool,\n    primaryText: node\n  })\n]))",description:"An optional list of elements or props to use to build a navigational list in the drawer.\nWhen the item is an object of props, it will build a `ListItem` component unless a key of\n`divider` or `subheader` is set to true. It will then create the Divider or Subheader component\nwith any other remaining keys.",required:!1},{propName:"mobileDrawerType",type:"oneOf([\n  DrawerTypes.TEMPORARY,\n  DrawerTypes.TEMPORARY_MINI\n])",description:"The drawer type to use for mobile devices.",required:!0,defaultValue:"Drawer.defaultProps.mobileType"},{propName:"tabletDrawerType",type:"oneOf([\n  DrawerTypes.FULL_HEIGHT,\n  DrawerTypes.CLIPPED,\n  DrawerTypes.FLOATING,\n  DrawerTypes.PERSISTENT,\n  DrawerTypes.PERSISTENT_MINI,\n  DrawerTypes.TEMPORARY,\n  DrawerTypes.TEMPORARY_MINI\n])",description:"The drawer type to use for tablets.",required:!0,defaultValue:"Drawer.defaultProps.tabletType"},{propName:"desktopDrawerType",type:"oneOf([\n  DrawerTypes.FULL_HEIGHT,\n  DrawerTypes.CLIPPED,\n  DrawerTypes.FLOATING,\n  DrawerTypes.PERSISTENT,\n  DrawerTypes.PERSISTENT_MINI,\n  DrawerTypes.TEMPORARY,\n  DrawerTypes.TEMPORARY_MINI\n])",description:"The drawer type to use for desktop displays.",required:!0,defaultValue:"Drawer.defaultProps.desktopType"},{propName:"drawerType",type:"oneOf([\n  DrawerTypes.FULL_HEIGHT,\n  DrawerTypes.CLIPPED,\n  DrawerTypes.FLOATING,\n  DrawerTypes.PERSISTENT,\n  DrawerTypes.PERSISTENT_MINI,\n  DrawerTypes.TEMPORARY,\n  DrawerTypes.TEMPORARY_MINI\n])",description:"An optional drawer type to enforce on all screen sizes. If the drawer type is not\n`temporary`, you are required to define the `onMediaTypeChange` prop to handle switching\nto temporary when the media matches a mobile device.\n```",required:!1},{propName:"defaultMedia",type:"oneOf([\n  'mobile',\n  'tablet',\n  'desktop'\n])",description:"The default media match for the drawer. This will be what is displayed on first render.\nThe component will adjust itself to the current media after it has mounted, but this\nis mostly used for server side rendering.",required:!1,defaultValue:"Drawer.defaultProps.defaultMedia"},{propName:"mobileMinWidth",type:"number",description:"The min width to use for a mobile media query. This prop should match the `md-mobile-min-width`\nvariable.\n\nThe media query for a mobile device will be:\n\n```js\nwindow.matchMedia(\n  `screen and (min-width: ${mobileMinWidth}px) and (max-width: ${tabletMinWidth - 1}px`\n).matches;\n```",required:!0,defaultValue:"Drawer.defaultProps.mobileMinWidth"},{propName:"tabletMinWidth",type:"number",description:"The min width to use for a tablet media query. This prop should match the `md-tablet-min-width`\nvariable.\n\nThe media query for a tablet device will be:\n\n```js\nwindow.matchMedia(\n  `screen and (min-width: ${tabletMinWidth}px) and (max-width: ${desktopWidth - 1}px`\n).matches;\n```",required:!0,defaultValue:"Drawer.defaultProps.tabletMinWidth"},{propName:"desktopMinWidth",type:"number",description:"The min width to use for a desktop media query. This prop should match the `md-desktop-min-width`\nvariable.\n\nThe media query for a tablet device will be:\n\n```js\nwindow.matchMedia(`screen and (min-width: ${tabletMinWidth}px)`).matches;\n```",required:!0,defaultValue:"Drawer.defaultProps.desktopMinWidth"},{propName:"onMediaTypeChange",type:"func",description:"An optional function to call when the type of the drawer changes because of the\nnew media queries. The callback will include the newly selected drawer type\nand an object containing the media matches of `mobile`, `tablet`, and `desktop`.\n\n```js\nthis.props.onMediaTypeChange(NavigationDrawer.DrawerTypes.TEMPORARY, {\n  mobile: true,\n  tablet: false,\n  desktop: false,\n});\n```",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the temporary or persistent drawers are visible by default.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"Boolean if the temporary or persistent drawers are visible. If this is defined,\nit will make the component controlled and require the `onVisibilityChange` prop\nto be defined.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the visibility of the drawer changes. The callback\nwill include the new visibility.\n\n```js\nonVisibilityChange(false);\n```",required:!1},{propName:"extractMini",type:"bool",description:"A boolean if the mini drawer's list should be generated from the `navItems` prop. When building\nthe list, it will extract the `leftIcon` or `leftAvatar` from the `navItem` and then create a\nmini `ListItem` containing only that icon or image. Any other event listeners will also be applied.\n\n\n@see [miniDrawerHeader](#navigation-drawer-proptypes-mini-drawer-header)\n@see [miniDrawerChildren](#navigation-drawer-proptypes-mini-drawer-children)",required:!1,defaultValue:"true"},{propName:"miniDrawerHeader",type:"node",description:"An optional header to display in the mini drawer. This will be displayed above the optional\nmini nav list that get generated if the `extractMini` prop is `true` and the `miniDrawerChildren`.\n\n@see [extractMini](#navigation-drawer-proptypes-extract-mini)",required:!1},{propName:"miniDrawerChildren",type:"node",description:"Any additional children to display in the mini drawer. This will be displayed after the `miniDrawerHeader`\nand the optional mini nav list that gets generated if the `extractMini` prop is `true`.\n\n@see [extractMini](#navigation-drawer-proptypes-extract-mini)",required:!1},{propName:"autoclose",type:"bool",description:"Boolean if the drawer should automatically close after a nav item has been clicked for `temporary` drawers.",required:!1,defaultValue:"Drawer.defaultProps.autoclose"},{propName:"toolbarTitle",type:"invalidIf(PropTypes.node, 'toolbarTitleMenu')",description:"An optional title to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\nmay be defined, not both.",required:!1},{propName:"toolbarTitleMenu",type:"element",description:"An optional select field menu to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\nmay be defined, not both.",required:!1},{propName:"toolbarThemeType",type:"oneOf([\n  'default',\n  'colored',\n  'themed'\n])",description:"The theme style for the main toolbar.\n\n@see [Toolbar](/components/toolbars?tab=1#toolbar-proptypes)",required:!0,defaultValue:"'colored'"},{propName:"toolbarSingleColor",type:"bool",description:"Boolean if the toolbar's nav, actions, and title should share the same color.",required:!1},{propName:"toolbarProminent",type:"bool",description:"A boolean if the toolbar should be prominent.",required:!1},{propName:"toolbarProminentTitle",type:"bool",description:"A boolean if the toolbar's title should be prominent.",required:!1},{propName:"toolbarActions",type:"custom",description:"A list of elements or a single element to display to the right of the\ntoolbar's nav, title, and children.\n\n@see [Toolbar#actions](/components/toolbars?tab=1#toolbar-proptypes-actions)",required:!1},{propName:"toolbarChildren",type:"custom",description:"Any children to display in the toolbar. This will be displayed between the optional title and\nactions.",required:!1},{propName:"toolbarZDepth",type:"number",description:"An optional zDepth to apply to the toolbar.\n\n@see [Toolbar#zDepth](/components/toolbars?tab=1#toolbar-proptypes-z-depth)",required:!1},{propName:"contentComponent",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the content in.",required:!0,defaultValue:"'main'"},{propName:"footer",type:"node",description:"An optional footer display after the main content.",required:!1},{propName:"temporaryIcon",type:"element",description:"The icon to use to render the button that will toggle the visibility of the\nnavigation drawer for `temporary` and `persistent` drawers. This is normally a\nhamburger menu.",required:!1,defaultValue:"<FontIcon>menu</FontIcon>"},{propName:"persistentIcon",type:"element",description:"The icon to use to render the button that appears on a persistent drawer's open\nheader. This is used to create the `CloseButton` for drawers. When a persistent\ndrawer is closed, the `temporaryIcon` will be used to create a button to open the drawer.\n\nIf the `drawerHeader` prop is defined, you will have to either include the `CloseButton`\nin your header manually, or create your own controlled button to close the drawer.",required:!1,defaultValue:"<FontIcon>arrow_back</FontIcon>"},{propName:"transitionName",type:"string",description:"The transition name to use when the page's content changes. If you want to disable\ntransitions, set both the `transitionEnterTimeout` and `transitionLeaveTimeout` props\nto a false-ish value. (`null`, `undefined`, or `0`).",required:!0,defaultValue:"'md-cross-fade'"},{propName:"transitionEnterTimeout",type:"number",description:"The transition enter timeout when the page's content changes. If you want to disable\nthe enter transition, set this to a false-ish value (`null`, `undefined`, or `0`).",required:!1,defaultValue:"300"},{propName:"transitionLeaveTimeout",type:"number",description:"The transition leave timeout when the page's content changes. If you want to disable\nthe leave transition, set this to a false-ish value (`null`, `undefined`, or `0`).",required:!1},{propName:"drawerTransitionDuration",type:"number",description:"The transition duration for the drawer when sliding in and out of view.",required:!0,defaultValue:"Drawer.defaultProps.transitionDuration"},{propName:"contentProps",type:"object",description:"Any additional props to provide to the main content. This will be applied before any of the generated props,\nso this should not include `style`, `className`, or `component`.",required:!1},{propName:"jumpLabel",type:"node",description:"The label to use for a keyboard accessibility link that jumps all the navigation and allows a user to focus\nthe main content. This is created in the drawer's header.",required:!0,defaultValue:"'Jump to content'"},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the drawer. The overlay that appears for temporary type drawers will still appear in the\nseparate subtree.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the drawer into. The default is to render as\nthe first child in the `body`.\n\n> This prop will not be used when the drawer is of the permanent type or `inline` is specified\nsince the `Portal` component will not be used.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the drawer should be rendered as the last child instead of the first child\nin the `renderNode` or `body`.\n\n> This prop will not be used when the drawer is of the permanent type or `inline` is specified\nsince the `Portal` component will not be used.",required:!1},{propName:"constantDrawerType",type:"bool",description:"Boolean if the `drawerType` should remain constant across all media. This is really only valid\nif the `drawerType` is one of the temporary types.",required:!1,defaultValue:"false"},{propName:"menuIconChildren",type:"deprecated(PropTypes.node)",description:"The `menuIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `temporaryIcon` instead.",required:!1},{propName:"menuIconClassName",type:"deprecated(PropTypes.string)",description:"The `menuIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `temporaryIcon` instead.",required:!1},{propName:"closeIconChildren",type:"deprecated(PropTypes.node)",description:"The `closeIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `persistentIcon` instead.",required:!1},{propName:"closeIconClassName",type:"deprecated(PropTypes.string)",description:"The `closeIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `persistentIcon` instead.",required:!1},{propName:"temporaryIconChildren",type:"deprecated(PropTypes.node)",description:"The `temporaryIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `temporaryIcon` instead.",required:!1},{propName:"temporaryIconClassName",type:"deprecated(PropTypes.string)",description:"The `temporaryIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `temporaryIcon` instead.",required:!1},{propName:"persistentIconChildren",type:"deprecated(PropTypes.node)",description:"The `persistentIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `persistentIcon` instead.",required:!1},{propName:"persistentIconClassName",type:"deprecated(PropTypes.string)",description:"The `persistentIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `persistentIcon` prop instead.",required:!1},{propName:"onDrawerChange",type:"deprecated(PropTypes.func)",description:"The `onDrawerChange` prop has been deprecated and will be removed in the next major release.\n    \nUse `onVisibilityChange` or `onMediaTypeChange` instead.",required:!1},{propName:"onVisibilityToggle",type:"deprecated(PropTypes.func)",description:"The `onVisibilityToggle` prop has been deprecated and will be removed in the next major release.\n    \nUse `onVisibilityChange` instead.",required:!1},{propName:"contentTransitionName",type:"deprecated(PropTypes.string)",description:"The `contentTransitionName` prop has been deprecated and will be removed in the next major release.\n    \nUse `transitionName` instead.",required:!1},{propName:"contentTransitionEnterTimeout",type:"deprecated(PropTypes.number)",description:"The `contentTransitionEnterTimeout` prop has been deprecated and will be removed in the next major release.\n    \nUse `transtionEnterTimeout` instead.",required:!1},{propName:"contentTransitionLeaveTimeout",type:"deprecated(PropTypes.number)",description:"The `contentTransitionLeaveTimeout` prop has been deprecated and will be removed in the next major release.\n    \nUse `transtionLeaveTimeout` instead.",required:!1},{propName:"initialDrawerType",type:"deprecated(PropTypes.oneOf(['mobile')",description:"The `initialDrawerType` prop has been deprecated and will be removed in the next major release.\n    \nmobile', 'tablet', 'desktop']),  'Use `defaultMedia` instead.",required:!1}],description:"The `NavigationDrawer` is used when you want a full layout configuration. It is a combination\nof the `Toolbar` component and the `Drawer` component. Any props that are not specifically\nlisted below will be provided to the `Drawer` component. So if there are props on the `Drawer`\nthat are not listed here, they will be passed along.\n\nThe main benefit of using this component is that it will manage adding respective offset\nclasses automatically for you to the content and the drawer. It will also manage using\na mini drawer type for you."},{id:"close-button",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/NavigationDrawers/CloseButton.js",component:"CloseButton",functions:[],enums:[],getters:[],props:[{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"onClick",type:"func",description:"An optional additional function to call when the `click` event is triggered.",required:!1}],description:"A button used to close the persistent navigation drawer. The button will\nbe generated based on the `NavigationDrawer`'s `contextTypes`.\n\nThis component is really only used if you are using a `persistent` drawer and you\nmanually created the `drawerHeader` for the `NavigationDrawer`."},{id:"jump-to-content-link",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/NavigationDrawers/JumpToContentLink.js",component:"JumpToContentLink",functions:[],enums:[],getters:[],props:[{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when the linked is clicked.",required:!1}],description:"This is an accessibility only component that should be used in the `NavigationDrawer`\ncomponent. It allows keyboard users to quickly jump to the main content.\n\nThis component relies on the `contextTypes` of the `NavigationDrawer` to work. If this is going\nto be used outside of that component, you will need to specify an `id` and `label` contextType\nto pass to this component."}],papers:[{id:"paper",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Papers/Paper.js",component:"Paper",functions:[],enums:[],getters:[],props:[{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the paper as.",required:!0,defaultValue:"'div'"},{propName:"componentRef",type:"oneOfType([\n  func,\n  object\n])",description:"An optional ref callback to get reference to the top-most element of the rendered component.\nJust like other refs, this will provide null when it unmounts.\n\nThis is helpful if you'd like access the DOM node for a parent Component without needing to use\n`ReactDOM.findDOMNode`.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"zDepth",type:"between(PropTypes.number.isRequired, 0, 5)",description:"The depth of the paper. This should be a number between 0 - 5. If\nthe depth is 0, it will raise to a depth of 3 on hover.",required:!1,defaultValue:"1"},{propName:"children",type:"node",description:"Any children to display in the paper.",required:!1},{propName:"raiseOnHover",type:"bool",description:"Boolean if the paper should raise to the `zDepth` of `3` on hover when the initial\n`zDepth` is `0`.",required:!1}],description:"The `Paper` component is a simple wrapper that adds box-shadow.\n\nYou can also use the SCSS mixin instead of paper.\n\n```scss\n@include md-box-shadow(5);\n```"}],pickers:{date:[{id:"date-picker",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Pickers/DatePickerContainer.js",component:"DatePicker",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id for the text field in the date picker. This is require for a11y.",required:!1},{propName:"aria-label",type:"custom",description:"An aria label for the dialog. This is required for a11y.",required:!1,defaultValue:"'Pick a date'"},{propName:"style",type:"object",description:"An optional style to apply to the date picker's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the date picker's container.",required:!1},{propName:"pickerStyle",type:"object",description:"An optional style to apply to the date picker.",required:!1},{propName:"pickerClassName",type:"string",description:"An optional className to apply to the date picker.",required:!1},{propName:"pickerHeaderClassName",type:"string",description:"An optional className to apply to the header of date picker.",required:!1},{propName:"pickerContentClassName",type:"string",description:"An optional className to apply to the content container of date picker.",required:!1},{propName:"pickerFooterClassName",type:"string",description:"An optional className to apply to the footer of date picker.",required:!1},{propName:"calendarClassName",type:"string",description:"An optional className to apply to the calendar container of date picker.",required:!1},{propName:"yearPickerClassName",type:"string",description:"An optional className to apply to the year picker of date picker.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the input tag.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the input tag.",required:!1},{propName:"textFieldStyle",type:"object",description:"An optional style to apply to the text field's container.",required:!1},{propName:"textFieldClassName",type:"string",description:"An optional className to apply to the text field's container.",required:!1},{propName:"icon",type:"node",description:"An optional icon to display with the date picker.\n\n@see [TextField#leftIcon](/components/text-fields?tab=1#text-field-proptypes-left-icon)",required:!1,defaultValue:"<FontIcon>date_range</FontIcon>"},{propName:"defaultVisible",type:"bool",description:"Boolean if the date picker is open by default.",required:!1},{propName:"label",type:"node",description:"An optional label to be displayed in the date picker's text\nfield.",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder to be displayed in the date picker's text field.",required:!1},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.instanceOf(Date),\n]), 'onChange', 'defaultValue')",description:"The value of the date picker. This will make the date picker\nbe a controlled component. This value should either be a\nformatted date string or a date object.",required:!1},{propName:"defaultValue",type:"oneOfType([\n  string,\n  instanceOf(Date)\n])",description:"An optional default value to give for the date picker. This should\neither be a formatted date string or a date object.",required:!1},{propName:"defaultCalendarDate",type:"oneOfType([\n  string,\n  instanceOf(Date)\n])",description:"An optional date to use when the calendar is opened for the first time.\nIf this is omitted, it will either be the `defaultValue`, `value`, or\ntoday.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the selected date is changed\nby hitting the OK button. The newly formatted date string,\nthe new Date object, and the change event will be given.\n\n`onChange(dateString, dateObject, event)`.",required:!1},{propName:"DateTimeFormat",type:"func",description:"A function to format the dates since it should be formatted to the user's\nlocale. This _should_ be the `Intl.DateTimeFormat` function. You\ncan also create your own if you really wanted. Inadvisable though.\n\nSee [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.",required:!0,defaultValue:"DateTimeFormat"},{propName:"locales",type:"oneOfType([\n  string,\n  arrayOf(string)\n])",description:"The locales to use for formatting the date. This will default to using\nthe user's language in the browser or `'en-US'` when server rendering.",required:!0,defaultValue:"typeof window !== 'undefined'\n  ? window.navigator.userLanguage || window.navigator.language\n  : 'en-US'"},{propName:"okLabel",type:"node",description:"The label to use for the ok button on the date picker.",required:!0,defaultValue:"'Ok'"},{propName:"okPrimary",type:"bool",description:"Boolean if the ok button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"cancelLabel",type:"node",description:"The label to use for the cancel button on the date picker.",required:!0,defaultValue:"'Cancel'"},{propName:"cancelPrimary",type:"bool",description:"Boolean if the cancel button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"defaultCalendarMode",type:"oneOf([\n  'calendar',\n  'year'\n])",description:"The initial mode to open the calendar in.",required:!1,defaultValue:"'calendar'"},{propName:"previousIcon",type:"node",description:"The icon to use to display the previous month icon in the calendar.",required:!1,defaultValue:"<FontIcon>chevron_left</FontIcon>"},{propName:"nextIcon",type:"node",description:"The icon to use to display the next month icon in the calendar.",required:!1,defaultValue:"<FontIcon>chevron_right</FontIcon>"},{propName:"minDate",type:"instanceOf(Date)",description:"An optional min date to use for the date picker. This will prevent\nany dates before this time to be chosen.",required:!1},{propName:"maxDate",type:"custom",description:"An optional max date to use for the date picker. This will prevent\nany dates after this time to be chosen.",required:!1},{propName:"autoOk",type:"bool",description:"Boolean if the date should automatically be selected when a user clicks\non a new date instead of making them hit the ok button.",required:!1,defaultValue:"false"},{propName:"yearsDisplayed",type:"number",description:"The number of years to display.",required:!1,defaultValue:"100"},{propName:"inline",type:"bool",description:"Boolean if the date picker should be displayed inline instead of in a\ndialog.",required:!1},{propName:"displayMode",type:"oneOf([\n  'landscape',\n  'portrait'\n])",description:"An optional force of the display mode of the date picker.\nThis _should_ not really be used since there are media queries\nto use the correct mode based on device orientation.",required:!1},{propName:"formatOptions",type:"shape({\n  weekday: oneOf([\n    'narrow',\n    'short',\n    'long'\n  ]),\n  era: oneOf([\n    'narrow',\n    'short',\n    'long'\n  ]),\n  year: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  month: oneOf([\n    'numeric',\n    '2-digit',\n    'narrow',\n    'short',\n    'long'\n  ]),\n  day: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  hour: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  minute: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  second: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  timeZoneName: oneOf([\n    'short',\n    'long'\n  ])\n})",description:"The DateTimeFormat options to apply to format the date.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the text field for the Date Picker should be displayed as full width.",required:!1},{propName:"lineDirection",type:"oneOf([\n  'left',\n  'center',\n  'right'\n])",description:"The direction that the text field divider expands from when the text field\nin the date picker gains focus.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"An optional boolean if the time picker is current visible by dialog or inline.\nIf this is set, the `onOpenToggle` function is required.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the date picker is opened in either a dialog, or\ninline. The callback will include the next state.\n\n```js\nonVisibilityChange(!visible, e);\n```",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the time picker is disabled.",required:!1},{propName:"closeOnEsc",type:"bool",description:"Boolean if the dialog should be able to close if a keyboard user presses the escape key.",required:!1,defaultValue:"true"},{propName:"animateInline",type:"bool",description:"Boolean if the inline time picker's visibility should be animated.",required:!1,defaultValue:"true"},{propName:"required",type:"bool",description:"Boolean if the time is required.\n\n@see [TextField#required](/components/text-fields?tab=1#text-field-proptypes-required)",required:!1},{propName:"block",type:"custom",description:"@see [TextField#block](/components/text-fields?tab=1#text-field-proptypes-block)",required:!1},{propName:"paddedBlock",type:"custom",description:"@see [TextField#paddedBlock](/components/text-fields?tab=1#text-field-proptypes-padded-block)",required:!1},{propName:"active",type:"custom",description:"@see [TextField#active](/components/text-fields?tab=1#text-field-proptypes-active)",required:!1},{propName:"error",type:"custom",description:"@see [TextField#error](/components/text-fields?tab=1#text-field-proptypes-error)",required:!1},{propName:"floating",type:"custom",description:"@see [TextField#floating](/components/text-fields?tab=1#text-field-proptypes-floating)",required:!1},{propName:"leftIconStateful",type:"custom",description:"@see [TextField#leftIconStateful](/components/text-fields?tab=1#text-field-proptypes-left-icon-stateful)",required:!1},{propName:"rightIcon",type:"custom",description:"@see [TextField#rightIcon](/components/text-fields?tab=1#text-field-proptypes-right-icon)",required:!1},{propName:"rightIconStateful",type:"custom",description:"@see [TextField#rightIconStateful](/components/text-fields?tab=1#text-field-proptypes-right-icon-stateful)",required:!1},{propName:"customSize",type:"custom",description:"@see [TextField#customSize](/components/text-fields?tab=1#text-field-proptypes-custom-size)",required:!1},{propName:"errorText",type:"custom",description:"@see [TextField#errorText](/components/text-fields?tab=1#text-field-proptypes-error-text)",required:!1},{propName:"helpText",type:"custom",description:"@see [TextField#helpText](/components/text-fields?tab=1#text-field-proptypes-help-text)",required:!1},{propName:"helpOnFocus",type:"custom",description:"@see [TextField#helpOnFocus](/components/text-fields?tab=1#text-field-proptypes-help-on-focus)",required:!1},{propName:"inlineIndicator",type:"custom",description:"@see [TextField#inlineIndicator](/components/text-fields?tab=1#text-field-proptypes-inline-indicator)",required:!1},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the dialog.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the dialog into. The default is to render as the first child\nin the `body`.",required:!1},{propName:"readOnly",type:"bool",description:"Boolean if the DatePicker should be read only. This will prevent the user from opening the picker\nand only display the current date in the text field.",required:!1},{propName:"firstDayOfWeek",type:"oneOf([\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n])",description:"The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.",required:!1},{propName:"disableWeekEnds",type:"bool",description:"True if weekends are to be greyed out.",required:!1},{propName:"showAllDays",type:"bool",description:"True if dates from adjacent months should be shown in calendar.",required:!1},{propName:"disableOuterDates",type:"bool",description:"Boolean if the dates from adjacent months should be disabled. This will only\ndo something if the `showAllDays` prop is enabled as well.\n\nThis is really only helpful if youd like the other days to appear, but not be\nclickable until the user switches to that month.\n\n@see [showAllDays](#date-picker-proptypes-show-all-days)",required:!1},{propName:"calendarDateClassName",type:"string",description:"An optional className to apply to a date in calendar.",required:!1},{propName:"calendarOuterDateClassName",type:"string",description:"An optional className to apply to a date from an adjacent month in calendar. This will be applied\nalong with the `calendarDateClassName`.\n\n@see [showAllDays](#date-picker-proptypes-show-all-days)\n@see [calendarDateClassName](#date-picker-proptypes-calendar-date-class-name)",required:!1},{propName:"getDateClassName",type:"func",description:"An optional function to provide class for each date in calendar.\n\n```js\ngetDateClassName(date:Date, day:number): string;\n```",required:!1},{propName:"dateRenderer",type:"func",description:"An optional function to render each date component.\n\n```js\ndateRenderer(date:Date, day:number): React.Component;\n```",required:!1},{propName:"onPreviousMonth",type:"func",description:"An optional callback triggered on previous month click.\n\n```js\nonPreviousMonth(firstDayInMonth:Date);\n```",required:!1},{propName:"onNextMonth",type:"func",description:"An optional callback triggered on next month click.\n\n```js\nonNextMonth(firstDayInMonth:Date);\n```",required:!1},{propName:"onYearSelected",type:"func",description:"An optional callback triggered on year selection.\n\n```js\nonYearSelected(firstDayInYear:Date);\n```",required:!1},{propName:"calendarTitleClassName",type:"string",description:"An optional className to apply to the title in calendar header.",required:!1},{propName:"calendarTitleFormat",type:"shape({\n  era: oneOf([\n    'narrow',\n    'short',\n    'long'\n  ]),\n  year: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  month: oneOf([\n    'numeric',\n    '2-digit',\n    'narrow',\n    'short',\n    'long'\n  ])\n})",description:"The DateTimeFormat options to apply to format the title in calendar header.",required:!1},{propName:"calendarWeekdayClassName",type:"string",description:"An optional className to apply to a weekday in calendar header.",required:!1},{propName:"calendarWeekdayFormat",type:"oneOf([\n  'narrow',\n  'short',\n  'long'\n])",description:"The DateTimeFormat option to apply to format a weekday in calendar header.",required:!1},{propName:"disableScrollLocking",type:"bool",description:"@see [DialogContainer#disableScrollLocking](/components/dialogs?tab=1#dialog-container-proptypes-disable-scroll-locking)",required:!1,defaultValue:"false"},{propName:"previousMonthLabel",type:"string",description:"The label to use for the previous month button on the date picker.",required:!1,defaultValue:"'Previous Month'"},{propName:"nextMonthLabel",type:"string",description:"The label to use for the next month button on the date picker.",required:!1,defaultValue:"'Next Month'"},{propName:"lastChild",type:"bool",description:"Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead\nof the first.",required:!1},{propName:"closeYearOnSelect",type:"bool",description:"True if the datepicker should swap to calendar mode automatically after a year is picked\nwhile in `year` mode.",required:!1,defaultValue:"false"},{propName:"previousIconChildren",type:"deprecated(PropTypes.node)",description:"The `previousIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `previousIcon` prop instead.",required:!1},{propName:"previousIconClassName",type:"deprecated(PropTypes.string)",description:"The `previousIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `previousIcon` prop instead.",required:!1},{propName:"nextIconChildren",type:"deprecated(PropTypes.node)",description:"The `nextIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nuse the `nextIcon` prop instead.",required:!1},{propName:"nextIconClassName",type:"deprecated(PropTypes.string)",description:"The `nextIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `nextIcon` prop instead.",required:!1},{propName:"adjustMinWidth",type:"deprecated(PropTypes.bool)",description:"The `adjustMinWidth` prop has been deprecated and will be removed in the next major release.\n    \nNo longer valid for a text field.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"initiallyOpen",type:"deprecated(PropTypes.bool)",description:"The `initiallyOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"initialCalendarDate",type:"deprecated(PropTypes.oneOfType([PropTypes.string,PropTypes.instanceOf(Date),]))",description:"The `initialCalendarDate` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultCalendarDate` instead.",required:!1},{propName:"initialCalendarMode",type:"deprecated(PropTypes.oneOf(['calendar')",description:"The `initialCalendarMode` prop has been deprecated and will be removed in the next major release.\n    \ncalendar', 'year']), 'Use `defaultCalendarMode` instead.",required:!1},{propName:"initialYearsDisplayed",type:"deprecated(PropTypes.number)",description:"The `initialYearsDisplayed` prop has been deprecated and will be removed in the next major release.\n    \nUse `yearsDisplayed` instead. I have not implemented infinite loading years.",required:!1}],description:"The `DatePickerContainer` component is a wrapper for the main `DatePicker` component\nto manage the state and _logic_ for rendering the `DatePicker`. This component will\neither render inline or in a `Dialog` depending if the `inline` prop is set to `true`.\n\nNOTE: This component is actually exported as `DatePicker` when using the `import { member }` syntax.\nThe following two lines are equivalent:\n\n```js\nimport { DatePicker } from 'react-md/lib/Pickers';\nimport DatePicker from 'react-md/lib/Pickers/DatePickerContainer';\n```"}],"date-picker-containers":[{id:"date-picker-container",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Pickers/DatePickerContainer.js",component:"DatePickerContainer",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id for the text field in the date picker. This is require for a11y.",required:!1},{propName:"aria-label",type:"custom",description:"An aria label for the dialog. This is required for a11y.",required:!1,defaultValue:"'Pick a date'"},{propName:"style",type:"object",description:"An optional style to apply to the date picker's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the date picker's container.",required:!1},{propName:"pickerStyle",type:"object",description:"An optional style to apply to the date picker.",required:!1},{propName:"pickerClassName",type:"string",description:"An optional className to apply to the date picker.",required:!1},{propName:"pickerHeaderClassName",type:"string",description:"An optional className to apply to the header of date picker.",required:!1},{propName:"pickerContentClassName",type:"string",description:"An optional className to apply to the content container of date picker.",required:!1},{propName:"pickerFooterClassName",type:"string",description:"An optional className to apply to the footer of date picker.",required:!1},{propName:"calendarClassName",type:"string",description:"An optional className to apply to the calendar container of date picker.",required:!1},{propName:"yearPickerClassName",type:"string",description:"An optional className to apply to the year picker of date picker.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the input tag.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the input tag.",required:!1},{propName:"textFieldStyle",type:"object",description:"An optional style to apply to the text field's container.",required:!1},{propName:"textFieldClassName",type:"string",description:"An optional className to apply to the text field's container.",required:!1},{propName:"icon",type:"node",description:"An optional icon to display with the date picker.\n\n@see [TextField#leftIcon](/components/text-fields?tab=1#text-field-proptypes-left-icon)",required:!1,defaultValue:"<FontIcon>date_range</FontIcon>"},{propName:"defaultVisible",type:"bool",description:"Boolean if the date picker is open by default.",required:!1},{propName:"label",type:"node",description:"An optional label to be displayed in the date picker's text\nfield.",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder to be displayed in the date picker's text field.",required:!1},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.instanceOf(Date),\n]), 'onChange', 'defaultValue')",description:"The value of the date picker. This will make the date picker\nbe a controlled component. This value should either be a\nformatted date string or a date object.",required:!1},{propName:"defaultValue",type:"oneOfType([\n  string,\n  instanceOf(Date)\n])",description:"An optional default value to give for the date picker. This should\neither be a formatted date string or a date object.",required:!1},{propName:"defaultCalendarDate",type:"oneOfType([\n  string,\n  instanceOf(Date)\n])",description:"An optional date to use when the calendar is opened for the first time.\nIf this is omitted, it will either be the `defaultValue`, `value`, or\ntoday.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the selected date is changed\nby hitting the OK button. The newly formatted date string,\nthe new Date object, and the change event will be given.\n\n`onChange(dateString, dateObject, event)`.",required:!1},{propName:"DateTimeFormat",type:"func",description:"A function to format the dates since it should be formatted to the user's\nlocale. This _should_ be the `Intl.DateTimeFormat` function. You\ncan also create your own if you really wanted. Inadvisable though.\n\nSee [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.",required:!0,defaultValue:"DateTimeFormat"},{propName:"locales",type:"oneOfType([\n  string,\n  arrayOf(string)\n])",description:"The locales to use for formatting the date. This will default to using\nthe user's language in the browser or `'en-US'` when server rendering.",required:!0,defaultValue:"typeof window !== 'undefined'\n  ? window.navigator.userLanguage || window.navigator.language\n  : 'en-US'"},{propName:"okLabel",type:"node",description:"The label to use for the ok button on the date picker.",required:!0,defaultValue:"'Ok'"},{propName:"okPrimary",type:"bool",description:"Boolean if the ok button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"cancelLabel",type:"node",description:"The label to use for the cancel button on the date picker.",required:!0,defaultValue:"'Cancel'"},{propName:"cancelPrimary",type:"bool",description:"Boolean if the cancel button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"defaultCalendarMode",type:"oneOf([\n  'calendar',\n  'year'\n])",description:"The initial mode to open the calendar in.",required:!1,defaultValue:"'calendar'"},{propName:"previousIcon",type:"node",description:"The icon to use to display the previous month icon in the calendar.",required:!1,defaultValue:"<FontIcon>chevron_left</FontIcon>"},{propName:"nextIcon",type:"node",description:"The icon to use to display the next month icon in the calendar.",required:!1,defaultValue:"<FontIcon>chevron_right</FontIcon>"},{propName:"minDate",type:"instanceOf(Date)",description:"An optional min date to use for the date picker. This will prevent\nany dates before this time to be chosen.",required:!1},{propName:"maxDate",type:"custom",description:"An optional max date to use for the date picker. This will prevent\nany dates after this time to be chosen.",required:!1},{propName:"autoOk",type:"bool",description:"Boolean if the date should automatically be selected when a user clicks\non a new date instead of making them hit the ok button.",required:!1,defaultValue:"false"},{propName:"yearsDisplayed",type:"number",description:"The number of years to display.",required:!1,defaultValue:"100"},{propName:"inline",type:"bool",description:"Boolean if the date picker should be displayed inline instead of in a\ndialog.",required:!1},{propName:"displayMode",type:"oneOf([\n  'landscape',\n  'portrait'\n])",description:"An optional force of the display mode of the date picker.\nThis _should_ not really be used since there are media queries\nto use the correct mode based on device orientation.",required:!1},{propName:"formatOptions",type:"shape({\n  weekday: oneOf([\n    'narrow',\n    'short',\n    'long'\n  ]),\n  era: oneOf([\n    'narrow',\n    'short',\n    'long'\n  ]),\n  year: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  month: oneOf([\n    'numeric',\n    '2-digit',\n    'narrow',\n    'short',\n    'long'\n  ]),\n  day: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  hour: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  minute: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  second: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  timeZoneName: oneOf([\n    'short',\n    'long'\n  ])\n})",description:"The DateTimeFormat options to apply to format the date.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the text field for the Date Picker should be displayed as full width.",required:!1},{propName:"lineDirection",type:"oneOf([\n  'left',\n  'center',\n  'right'\n])",description:"The direction that the text field divider expands from when the text field\nin the date picker gains focus.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"An optional boolean if the time picker is current visible by dialog or inline.\nIf this is set, the `onOpenToggle` function is required.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the date picker is opened in either a dialog, or\ninline. The callback will include the next state.\n\n```js\nonVisibilityChange(!visible, e);\n```",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the time picker is disabled.",required:!1},{propName:"closeOnEsc",type:"bool",description:"Boolean if the dialog should be able to close if a keyboard user presses the escape key.",required:!1,defaultValue:"true"},{propName:"animateInline",type:"bool",description:"Boolean if the inline time picker's visibility should be animated.",required:!1,defaultValue:"true"},{propName:"required",type:"bool",description:"Boolean if the time is required.\n\n@see [TextField#required](/components/text-fields?tab=1#text-field-proptypes-required)",required:!1},{propName:"block",type:"custom",description:"@see [TextField#block](/components/text-fields?tab=1#text-field-proptypes-block)",required:!1},{propName:"paddedBlock",type:"custom",description:"@see [TextField#paddedBlock](/components/text-fields?tab=1#text-field-proptypes-padded-block)",required:!1},{propName:"active",type:"custom",description:"@see [TextField#active](/components/text-fields?tab=1#text-field-proptypes-active)",required:!1},{propName:"error",type:"custom",description:"@see [TextField#error](/components/text-fields?tab=1#text-field-proptypes-error)",required:!1},{propName:"floating",type:"custom",description:"@see [TextField#floating](/components/text-fields?tab=1#text-field-proptypes-floating)",required:!1},{propName:"leftIconStateful",type:"custom",description:"@see [TextField#leftIconStateful](/components/text-fields?tab=1#text-field-proptypes-left-icon-stateful)",required:!1},{propName:"rightIcon",type:"custom",description:"@see [TextField#rightIcon](/components/text-fields?tab=1#text-field-proptypes-right-icon)",required:!1},{propName:"rightIconStateful",type:"custom",description:"@see [TextField#rightIconStateful](/components/text-fields?tab=1#text-field-proptypes-right-icon-stateful)",required:!1},{propName:"customSize",type:"custom",description:"@see [TextField#customSize](/components/text-fields?tab=1#text-field-proptypes-custom-size)",required:!1},{propName:"errorText",type:"custom",description:"@see [TextField#errorText](/components/text-fields?tab=1#text-field-proptypes-error-text)",required:!1},{propName:"helpText",type:"custom",description:"@see [TextField#helpText](/components/text-fields?tab=1#text-field-proptypes-help-text)",required:!1},{propName:"helpOnFocus",type:"custom",description:"@see [TextField#helpOnFocus](/components/text-fields?tab=1#text-field-proptypes-help-on-focus)",required:!1},{propName:"inlineIndicator",type:"custom",description:"@see [TextField#inlineIndicator](/components/text-fields?tab=1#text-field-proptypes-inline-indicator)",required:!1},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the dialog.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the dialog into. The default is to render as the first child\nin the `body`.",required:!1},{propName:"readOnly",type:"bool",description:"Boolean if the DatePicker should be read only. This will prevent the user from opening the picker\nand only display the current date in the text field.",required:!1},{propName:"firstDayOfWeek",type:"oneOf([\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n])",description:"The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.",required:!1},{propName:"disableWeekEnds",type:"bool",description:"True if weekends are to be greyed out.",required:!1},{propName:"showAllDays",type:"bool",description:"True if dates from adjacent months should be shown in calendar.",required:!1},{propName:"disableOuterDates",type:"bool",description:"Boolean if the dates from adjacent months should be disabled. This will only\ndo something if the `showAllDays` prop is enabled as well.\n\nThis is really only helpful if youd like the other days to appear, but not be\nclickable until the user switches to that month.\n\n@see [showAllDays](#date-picker-container-proptypes-show-all-days)",required:!1},{propName:"calendarDateClassName",type:"string",description:"An optional className to apply to a date in calendar.",required:!1},{propName:"calendarOuterDateClassName",type:"string",description:"An optional className to apply to a date from an adjacent month in calendar. This will be applied\nalong with the `calendarDateClassName`.\n\n@see [showAllDays](#date-picker-container-proptypes-show-all-days)\n@see [calendarDateClassName](#date-picker-container-proptypes-calendar-date-class-name)",required:!1},{propName:"getDateClassName",type:"func",description:"An optional function to provide class for each date in calendar.\n\n```js\ngetDateClassName(date:Date, day:number): string;\n```",required:!1},{propName:"dateRenderer",type:"func",description:"An optional function to render each date component.\n\n```js\ndateRenderer(date:Date, day:number): React.Component;\n```",required:!1},{propName:"onPreviousMonth",type:"func",description:"An optional callback triggered on previous month click.\n\n```js\nonPreviousMonth(firstDayInMonth:Date);\n```",required:!1},{propName:"onNextMonth",type:"func",description:"An optional callback triggered on next month click.\n\n```js\nonNextMonth(firstDayInMonth:Date);\n```",required:!1},{propName:"onYearSelected",type:"func",description:"An optional callback triggered on year selection.\n\n```js\nonYearSelected(firstDayInYear:Date);\n```",required:!1},{propName:"calendarTitleClassName",type:"string",description:"An optional className to apply to the title in calendar header.",required:!1},{propName:"calendarTitleFormat",type:"shape({\n  era: oneOf([\n    'narrow',\n    'short',\n    'long'\n  ]),\n  year: oneOf([\n    'numeric',\n    '2-digit'\n  ]),\n  month: oneOf([\n    'numeric',\n    '2-digit',\n    'narrow',\n    'short',\n    'long'\n  ])\n})",description:"The DateTimeFormat options to apply to format the title in calendar header.",required:!1},{propName:"calendarWeekdayClassName",type:"string",description:"An optional className to apply to a weekday in calendar header.",required:!1},{propName:"calendarWeekdayFormat",type:"oneOf([\n  'narrow',\n  'short',\n  'long'\n])",description:"The DateTimeFormat option to apply to format a weekday in calendar header.",required:!1},{propName:"disableScrollLocking",type:"bool",description:"@see [DialogContainer#disableScrollLocking](/components/dialogs?tab=1#dialog-container-proptypes-disable-scroll-locking)",required:!1,defaultValue:"false"},{propName:"previousMonthLabel",type:"string",description:"The label to use for the previous month button on the date picker.",required:!1,defaultValue:"'Previous Month'"},{propName:"nextMonthLabel",type:"string",description:"The label to use for the next month button on the date picker.",required:!1,defaultValue:"'Next Month'"},{propName:"lastChild",type:"bool",description:"Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead\nof the first.",required:!1},{propName:"closeYearOnSelect",type:"bool",description:"True if the datepicker should swap to calendar mode automatically after a year is picked\nwhile in `year` mode.",required:!1,defaultValue:"false"},{propName:"previousIconChildren",type:"deprecated(PropTypes.node)",description:"The `previousIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `previousIcon` prop instead.",required:!1},{propName:"previousIconClassName",type:"deprecated(PropTypes.string)",description:"The `previousIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `previousIcon` prop instead.",required:!1},{propName:"nextIconChildren",type:"deprecated(PropTypes.node)",description:"The `nextIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nuse the `nextIcon` prop instead.",required:!1},{propName:"nextIconClassName",type:"deprecated(PropTypes.string)",description:"The `nextIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `nextIcon` prop instead.",required:!1},{propName:"adjustMinWidth",type:"deprecated(PropTypes.bool)",description:"The `adjustMinWidth` prop has been deprecated and will be removed in the next major release.\n    \nNo longer valid for a text field.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"initiallyOpen",type:"deprecated(PropTypes.bool)",description:"The `initiallyOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"initialCalendarDate",type:"deprecated(PropTypes.oneOfType([PropTypes.string,PropTypes.instanceOf(Date),]))",description:"The `initialCalendarDate` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultCalendarDate` instead.",required:!1},{propName:"initialCalendarMode",type:"deprecated(PropTypes.oneOf(['calendar')",description:"The `initialCalendarMode` prop has been deprecated and will be removed in the next major release.\n    \ncalendar', 'year']), 'Use `defaultCalendarMode` instead.",required:!1},{propName:"initialYearsDisplayed",type:"deprecated(PropTypes.number)",description:"The `initialYearsDisplayed` prop has been deprecated and will be removed in the next major release.\n    \nUse `yearsDisplayed` instead. I have not implemented infinite loading years.",required:!1}],description:"The `DatePickerContainer` component is a wrapper for the main `DatePicker` component\nto manage the state and _logic_ for rendering the `DatePicker`. This component will\neither render inline or in a `Dialog` depending if the `inline` prop is set to `true`.\n\nNOTE: This component is actually exported as `DatePicker` when using the `import { member }` syntax.\nThe following two lines are equivalent:\n\n```js\nimport { DatePicker } from 'react-md/lib/Pickers';\nimport DatePicker from 'react-md/lib/Pickers/DatePickerContainer';\n```"}],time:[{id:"time-picker",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Pickers/TimePickerContainer.js",component:"TimePicker",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id for the text field in the time picker. This is require for a11y.",required:!1},{propName:"aria-label",type:"custom",description:"An aria-label to apply to the dialog when it has been opened. This is required for\na11y.",required:!1,defaultValue:"'Select a time'"},{propName:"style",type:"object",description:"An optional style to apply to the time picker's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the time picker's container.",required:!1},{propName:"pickerStyle",type:"object",description:"An optional style to apply to the time picker.",required:!1},{propName:"pickerClassName",type:"string",description:"An optional className to apply to the time picker.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the input tag.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the input tag.",required:!1},{propName:"textFieldStyle",type:"object",description:"An optional style to apply to the text field's container.",required:!1},{propName:"textFieldClassName",type:"string",description:"An optional className to apply to the text field's container.",required:!1},{propName:"icon",type:"node",description:"An optional icon to display with the time picker.\n\n@see [TextField#leftIcon](/components/text-fields?tab=1#text-field-proptypes-left-icon)",required:!1,defaultValue:"<FontIcon>access_time</FontIcon>"},{propName:"defaultVisible",type:"bool",description:"Boolean if the time picker is open by default.",required:!1},{propName:"label",type:"node",description:"An optional label to be displayed in the time picker's text\nfield.",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder to be displayed in the time picker's text field.",required:!1},{propName:"value",type:"controlled(PropTypes.instanceOf(Date), 'onChange', 'defaultValue')",description:"The value of the time picker. This will make the time picker\nbe a controlled component.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the selected date is changed\nby hitting the OK button. The newly formatted time string,\nthe new Date object, and the change event will be given.\n\n`onChange(timeString, dateObject, event)`.",required:!1},{propName:"defaultValue",type:"instanceOf(Date)",description:"An optional default value to give for the year picker.",required:!1},{propName:"DateTimeFormat",type:"func",description:"A function to format the dates since it should be formatted to the user's\nlocale. This _should_ be the `Intl.DateTimeFormat` function. You\ncan also create your own if you really wanted. Inadvisable though.\n\nSee [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.",required:!0,defaultValue:"DateTimeFormat"},{propName:"locales",type:"oneOfType([\n  string,\n  arrayOf(string)\n])",description:"The locales to use for formatting the date. This will default to using\nthe user's language in the browser or `'en-US'` when server rendering.",required:!0,defaultValue:"typeof window !== 'undefined'\n  ? window.navigator.userLanguage || window.navigator.language\n  : 'en-US'"},{propName:"okLabel",type:"node",description:"The label to use for the ok button on the year picker.",required:!0,defaultValue:"'Ok'"},{propName:"okPrimary",type:"bool",description:"Boolean if the ok button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"cancelLabel",type:"node",description:"The label to use for the cancel button on the year picker.",required:!0,defaultValue:"'Cancel'"},{propName:"cancelPrimary",type:"bool",description:"Boolean if the cancel button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"defaultTimeMode",type:"oneOf([\n  'hour',\n  'minute',\n  'second'\n])",description:"The default mode to open the time picker in.",required:!1,defaultValue:"'hour'"},{propName:"autoOk",type:"bool",description:"Boolean if the date should automatically be selected when a user clicks\non a new date instead of making them hit the ok button.",required:!1},{propName:"inline",type:"bool",description:"Boolean if the date picker should be displayed inline instead of in a\ndialog.",required:!1},{propName:"displayMode",type:"oneOf([\n  'landscape',\n  'portrait'\n])",description:"An optional force of the display mode of the date picker.\nThis _should_ not really be used since there are media queries\nto use the correct mode based on device orientation.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the text field for the Time Picker should be displayed as full width.",required:!1},{propName:"lineDirection",type:"oneOf([\n  'left',\n  'center',\n  'right'\n])",description:"The direction that the text field divider expands from when the text field\nin the date picker gains focus.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"An optional boolean if the time picker is current visible by dialog or inline.\nIf this is set, the `onVisibilityChange` function is required.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the date picker is opened in either a dialog, or\ninline. The callback will include the next state.\n\n```js\nonVisibilityChange(!visible, e);\n```",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the time picker is disabled.",required:!1},{propName:"closeOnEsc",type:"bool",description:"Boolean if the dialog should be able to close if a keyboard user presses the escape key.",required:!1,defaultValue:"true"},{propName:"hoverMode",type:"bool",description:"If true the hover mode of the Time Picker is activated.\nIn hover mode no clicks are required to start selecting an hour\nand the time mode switches automatically when a time was chosen.\nWhen a minute is selected the chosen time is applied automatically.",required:!1,defaultValue:"false"},{propName:"showSeconds",type:"bool",description:"If true seconds will be selectable in the Time Picker.",required:!1,defaultValue:"false"},{propName:"animateInline",type:"bool",description:"Boolean if the inline time picker's visibility should be animated.",required:!1,defaultValue:"true"},{propName:"required",type:"bool",description:"Boolean if the time is required.\n\n@see [TextField#required](/components/text-fields?tab=1#text-field-proptypes-required)",required:!1},{propName:"block",type:"custom",description:"@see [TextField#block](/components/text-fields?tab=1#text-field-proptypes-block)",required:!1},{propName:"paddedBlock",type:"custom",description:"@see [TextField#paddedBlock](/components/text-fields?tab=1#text-field-proptypes-padded-block)",required:!1},{propName:"active",type:"custom",description:"@see [TextField#active](/components/text-fields?tab=1#text-field-proptypes-active)",required:!1},{propName:"error",type:"custom",description:"@see [TextField#error](/components/text-fields?tab=1#text-field-proptypes-error)",required:!1},{propName:"floating",type:"custom",description:"@see [TextField#floating](/components/text-fields?tab=1#text-field-proptypes-floating)",required:!1},{propName:"leftIconStateful",type:"custom",description:"@see [TextField#leftIconStateful](/components/text-fields?tab=1#text-field-proptypes-left-icon-stateful)",required:!1},{propName:"rightIcon",type:"custom",description:"@see [TextField#rightIcon](/components/text-fields?tab=1#text-field-proptypes-right-icon)",required:!1},{propName:"rightIconStateful",type:"custom",description:"@see [TextField#rightIconStateful](/components/text-fields?tab=1#text-field-proptypes-right-icon-stateful)",required:!1},{propName:"customSize",type:"custom",description:"@see [TextField#customSize](/components/text-fields?tab=1#text-field-proptypes-custom-size)",required:!1},{propName:"errorText",type:"custom",description:"@see [TextField#errorText](/components/text-fields?tab=1#text-field-proptypes-error-text)",required:!1},{propName:"helpText",type:"custom",description:"@see [TextField#helpText](/components/text-fields?tab=1#text-field-proptypes-help-text)",required:!1},{propName:"helpOnFocus",type:"custom",description:"@see [TextField#helpOnFocus](/components/text-fields?tab=1#text-field-proptypes-help-on-focus)",required:!1},{propName:"inlineIndicator",type:"custom",description:"@see [TextField#inlineIndicator](/components/text-fields?tab=1#text-field-proptypes-inline-indicator)",required:!1},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the dialog.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the dialog into. The default is to render as the first child\nin the `body`.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead\nof the first.",required:!1},{propName:"disableScrollLocking",type:"bool",description:"@see [DialogContainer#disableScrollLocking](/components/dialogs?tab=1#dialog-container-proptypes-disable-scroll-locking)",required:!1,defaultValue:"false"},{propName:"readOnly",type:"bool",description:"Boolean if the TimePicker should be read only. This will prevent the user from opening the picker\nand only display the current date in the text field.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"initiallyOpen",type:"deprecated(PropTypes.bool)",description:"The `initiallyOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"initialTimeMode",type:"deprecated(PropTypes.oneOf(['hour')",description:"The `initialTimeMode` prop has been deprecated and will be removed in the next major release.\n    \nhour', 'minute']), 'Use `defaultTimeMode` instead.",required:!1}],description:"The `TimePickerContainer` component is a wrapper for the main `TimePicker` component\nto manage the state and _logic_ for rendering the `TimePicker`. This component will\neither render inline or in a `Dialog` depending if the `inline` prop is set\nto `true`.\n\nNOTE: This component is actually exported as `TimePicker` when using the `import { member }` syntax.\nThe following two lines are equivalent:\n\n```js\nimport { TimePicker } from 'react-md/lib/Pickers';\nimport TimePicker from 'react-md/lib/Pickers/TimePickerContainer';\n```"}],"time-picker-containers":[{id:"time-picker-container",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Pickers/TimePickerContainer.js",component:"TimePickerContainer",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id for the text field in the time picker. This is require for a11y.",required:!1},{propName:"aria-label",type:"custom",description:"An aria-label to apply to the dialog when it has been opened. This is required for\na11y.",required:!1,defaultValue:"'Select a time'"},{propName:"style",type:"object",description:"An optional style to apply to the time picker's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the time picker's container.",required:!1},{propName:"pickerStyle",type:"object",description:"An optional style to apply to the time picker.",required:!1},{propName:"pickerClassName",type:"string",description:"An optional className to apply to the time picker.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the input tag.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the input tag.",required:!1},{propName:"textFieldStyle",type:"object",description:"An optional style to apply to the text field's container.",required:!1},{propName:"textFieldClassName",type:"string",description:"An optional className to apply to the text field's container.",required:!1},{propName:"icon",type:"node",description:"An optional icon to display with the time picker.\n\n@see [TextField#leftIcon](/components/text-fields?tab=1#text-field-proptypes-left-icon)",required:!1,defaultValue:"<FontIcon>access_time</FontIcon>"},{propName:"defaultVisible",type:"bool",description:"Boolean if the time picker is open by default.",required:!1},{propName:"label",type:"node",description:"An optional label to be displayed in the time picker's text\nfield.",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder to be displayed in the time picker's text field.",required:!1},{propName:"value",type:"controlled(PropTypes.instanceOf(Date), 'onChange', 'defaultValue')",description:"The value of the time picker. This will make the time picker\nbe a controlled component.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the selected date is changed\nby hitting the OK button. The newly formatted time string,\nthe new Date object, and the change event will be given.\n\n`onChange(timeString, dateObject, event)`.",required:!1},{propName:"defaultValue",type:"instanceOf(Date)",description:"An optional default value to give for the year picker.",required:!1},{propName:"DateTimeFormat",type:"func",description:"A function to format the dates since it should be formatted to the user's\nlocale. This _should_ be the `Intl.DateTimeFormat` function. You\ncan also create your own if you really wanted. Inadvisable though.\n\nSee [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.",required:!0,defaultValue:"DateTimeFormat"},{propName:"locales",type:"oneOfType([\n  string,\n  arrayOf(string)\n])",description:"The locales to use for formatting the date. This will default to using\nthe user's language in the browser or `'en-US'` when server rendering.",required:!0,defaultValue:"typeof window !== 'undefined'\n  ? window.navigator.userLanguage || window.navigator.language\n  : 'en-US'"},{propName:"okLabel",type:"node",description:"The label to use for the ok button on the year picker.",required:!0,defaultValue:"'Ok'"},{propName:"okPrimary",type:"bool",description:"Boolean if the ok button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"cancelLabel",type:"node",description:"The label to use for the cancel button on the year picker.",required:!0,defaultValue:"'Cancel'"},{propName:"cancelPrimary",type:"bool",description:"Boolean if the cancel button should be styled with the primary color.",required:!1,defaultValue:"true"},{propName:"defaultTimeMode",type:"oneOf([\n  'hour',\n  'minute',\n  'second'\n])",description:"The default mode to open the time picker in.",required:!1,defaultValue:"'hour'"},{propName:"autoOk",type:"bool",description:"Boolean if the date should automatically be selected when a user clicks\non a new date instead of making them hit the ok button.",required:!1},{propName:"inline",type:"bool",description:"Boolean if the date picker should be displayed inline instead of in a\ndialog.",required:!1},{propName:"displayMode",type:"oneOf([\n  'landscape',\n  'portrait'\n])",description:"An optional force of the display mode of the date picker.\nThis _should_ not really be used since there are media queries\nto use the correct mode based on device orientation.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the text field for the Time Picker should be displayed as full width.",required:!1},{propName:"lineDirection",type:"oneOf([\n  'left',\n  'center',\n  'right'\n])",description:"The direction that the text field divider expands from when the text field\nin the date picker gains focus.",required:!1},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"An optional boolean if the time picker is current visible by dialog or inline.\nIf this is set, the `onVisibilityChange` function is required.",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the date picker is opened in either a dialog, or\ninline. The callback will include the next state.\n\n```js\nonVisibilityChange(!visible, e);\n```",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the time picker is disabled.",required:!1},{propName:"closeOnEsc",type:"bool",description:"Boolean if the dialog should be able to close if a keyboard user presses the escape key.",required:!1,defaultValue:"true"},{propName:"hoverMode",type:"bool",description:"If true the hover mode of the Time Picker is activated.\nIn hover mode no clicks are required to start selecting an hour\nand the time mode switches automatically when a time was chosen.\nWhen a minute is selected the chosen time is applied automatically.",required:!1,defaultValue:"false"},{propName:"showSeconds",type:"bool",description:"If true seconds will be selectable in the Time Picker.",required:!1,defaultValue:"false"},{propName:"animateInline",type:"bool",description:"Boolean if the inline time picker's visibility should be animated.",required:!1,defaultValue:"true"},{propName:"required",type:"bool",description:"Boolean if the time is required.\n\n@see [TextField#required](/components/text-fields?tab=1#text-field-proptypes-required)",required:!1},{propName:"block",type:"custom",description:"@see [TextField#block](/components/text-fields?tab=1#text-field-proptypes-block)",required:!1},{propName:"paddedBlock",type:"custom",description:"@see [TextField#paddedBlock](/components/text-fields?tab=1#text-field-proptypes-padded-block)",required:!1},{propName:"active",type:"custom",description:"@see [TextField#active](/components/text-fields?tab=1#text-field-proptypes-active)",required:!1},{propName:"error",type:"custom",description:"@see [TextField#error](/components/text-fields?tab=1#text-field-proptypes-error)",required:!1},{propName:"floating",type:"custom",description:"@see [TextField#floating](/components/text-fields?tab=1#text-field-proptypes-floating)",required:!1},{propName:"leftIconStateful",type:"custom",description:"@see [TextField#leftIconStateful](/components/text-fields?tab=1#text-field-proptypes-left-icon-stateful)",required:!1},{propName:"rightIcon",type:"custom",description:"@see [TextField#rightIcon](/components/text-fields?tab=1#text-field-proptypes-right-icon)",required:!1},{propName:"rightIconStateful",type:"custom",description:"@see [TextField#rightIconStateful](/components/text-fields?tab=1#text-field-proptypes-right-icon-stateful)",required:!1},{propName:"customSize",type:"custom",description:"@see [TextField#customSize](/components/text-fields?tab=1#text-field-proptypes-custom-size)",required:!1},{propName:"errorText",type:"custom",description:"@see [TextField#errorText](/components/text-fields?tab=1#text-field-proptypes-error-text)",required:!1},{propName:"helpText",type:"custom",description:"@see [TextField#helpText](/components/text-fields?tab=1#text-field-proptypes-help-text)",required:!1},{propName:"helpOnFocus",type:"custom",description:"@see [TextField#helpOnFocus](/components/text-fields?tab=1#text-field-proptypes-help-on-focus)",required:!1},{propName:"inlineIndicator",type:"custom",description:"@see [TextField#inlineIndicator](/components/text-fields?tab=1#text-field-proptypes-inline-indicator)",required:!1},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the dialog.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM Node to render the dialog into. The default is to render as the first child\nin the `body`.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead\nof the first.",required:!1},{propName:"disableScrollLocking",type:"bool",description:"@see [DialogContainer#disableScrollLocking](/components/dialogs?tab=1#dialog-container-proptypes-disable-scroll-locking)",required:!1,defaultValue:"false"},{propName:"readOnly",type:"bool",description:"Boolean if the TimePicker should be read only. This will prevent the user from opening the picker\nand only display the current date in the text field.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"initiallyOpen",type:"deprecated(PropTypes.bool)",description:"The `initiallyOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"initialTimeMode",type:"deprecated(PropTypes.oneOf(['hour')",description:"The `initialTimeMode` prop has been deprecated and will be removed in the next major release.\n    \nhour', 'minute']), 'Use `defaultTimeMode` instead.",required:!1}],description:"The `TimePickerContainer` component is a wrapper for the main `TimePicker` component\nto manage the state and _logic_ for rendering the `TimePicker`. This component will\neither render inline or in a `Dialog` depending if the `inline` prop is set\nto `true`.\n\nNOTE: This component is actually exported as `TimePicker` when using the `import { member }` syntax.\nThe following two lines are equivalent:\n\n```js\nimport { TimePicker } from 'react-md/lib/Pickers';\nimport TimePicker from 'react-md/lib/Pickers/TimePickerContainer';\n```"}]},progress:{linear:[{id:"linear-progress",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Progress/LinearProgress.js",component:"LinearProgress",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"The `id` prop is required for accessibility concerns.\n[Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)\n\n> If the progressbar is describing the loading progress of a particular region of a page, the author\n__SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the\nregion until it is finished loading. It is not possible for the user to alter the value of a progressbar\nbecause it is always readonly.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the linear progress container.",required:!1},{propName:"progressClassName",type:"oneOfType([\n  func,\n  string\n])",description:"An optional className to apply to the progress bar element.\n\nIf a function is specified it will be called to get necessary className.\nCurrent progress value and reference to the component will be passed into the function.",required:!1},{propName:"progressStyle",type:"oneOfType([\n  func,\n  object\n])",description:"An optional style to apply to the progress bar element.\n\nIf a function is specified it will be called to get necessary style.\nCurrent progress value and reference to the component will be passed into the function.",required:!1},{propName:"value",type:"between(PropTypes.number, 0, 100)",description:"The current value of the progress. If this value is defined, it will\nbe converted to a determinate circular progress. The progress will not\nadvance unless this value changes.\n\nThis value should also be a number between 0 and 100.",required:!1},{propName:"query",type:"bool",description:"Boolean if this should be a query indeterminate progress bar.",required:!1,defaultValue:"false"},{propName:"centered",type:"bool",description:"Boolean if the Linear Progress should be centered. This\nwill only work if the `max-width` style is set.",required:!1}],description:"There are 3 different types of linear progress bars: `Determinate`,\n`Indeterminate`, and `Query Indeterminate`.\n\nA `Determinate` linear progress bar should be used when you can keep track of the\nprogress and have a percentage complete you can work with. An example would be\nuploading/downloading a file.\n\nAn `Indeterminate` linear progress bar should be used when you can not keep track\nof the progress yourself. An example might be waiting for an API call to complete.\n\nA `Query Indeterminate` linear progress bar is used when you are combining\n`Indeterminate` and `Determinate`. A Linear Progress component can be displayed\nas a query indeterminate progress bar by adding the prop `query={true}` to the\ncomponent. Until a progress value is given, it will display the query linear\nprogress animation. Afterwards, it will start the determinate animation of where\nyou manually keep updating the value of the progress."}],circular:[{id:"circular-progress",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Progress/CircularProgress.js",component:"CircularProgress",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"The `id` prop is required for accessibility concerns.\n[Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)\n\n> If the progressbar is describing the loading progress of a particular region of a page, the author\n__SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the\nregion until it is finished loading. It is not possible for the user to alter the value of a progressbar\nbecause it is always readonly.",required:!1},{propName:"style",type:"object",description:"A style object to apply to the SVG. If this is a determinate `CircularProgress`,\nthe `transform` (and vendor prefixes) styles will be merged with the current\nprogress rotation.",required:!0,defaultValue:"{}"},{propName:"className",type:"string",description:"An optional className to apply to the SVG.",required:!1},{propName:"value",type:"between(PropTypes.number, 0, 100)",description:"The current value of the progress. If this value is defined, it will\nbe converted to a determinate circular progress. The progress will not\nadvance unless this value changes.\n\nThis value should also be a number between 0 and 100.",required:!1},{propName:"scale",type:"number",description:"The scale for the circular progress.",required:!0,defaultValue:"1"},{propName:"determinateDashoffset",type:"number",description:"You probably don't want to update this. I'm not good at SVG. This should\nmatch the SCSS variable `$md-circular-progress-stroke-dashoffset`.",required:!0,defaultValue:"187"},{propName:"centered",type:"bool",description:"Boolean if the progress should be centered in it's container.",required:!1,defaultValue:"true"}],description:"The `CircularProgress` component is used to give visual feedback while your app\nis loading.\n\nThere are two different types of circular progress bars: `Determinate` and `Indeterminate`.\n\nA `Determinate` circular progress bar should be used when you want to keep track of the current\nprogress. An example would be downloading a file.\n\nAn `Indeterminate` circular progress bar should be used when you can not keep track of the progress\nyourself. An example would be waiting for some API call to complete."}]},"svg-icons":[{id:"s-v-g-icon",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SVGIcons/SVGIcon.js",component:"SVGIcon",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"primary",type:"bool",description:"Boolean if the primary theme color should be applied.",required:!1},{propName:"secondary",type:"bool",description:"Boolean if the secondary theme color should be applied.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the icon is considered disabled and should inherit the\ndisabled color.",required:!1},{propName:"error",type:"bool",description:"Boolean if the icon is considered errored and should inherit the error color.",required:!1},{propName:"inherit",type:"bool",description:"Boolean if the color of the icon should be inherited by parent elements.",required:!1},{propName:"role",type:"oneOf([\n  'img',\n  'presentation'\n])",description:"The role to apply to the SVG. When using icons, it is generally recommended to leave it as the default\n`img` so that it is insured as a graphic.",required:!1,defaultValue:"'img'"},{propName:"titleAttr",type:"string",description:"This prop is the title attribute to provide to the `<svg>` element itself. This should be used when you\nare using a spritesheet that has defined `<title>` with each SVG symbol.",required:!1},{propName:"aria-labelledby",type:"string",description:"An optional list of ids to use to label the SVG icon with. This is helpful to add when you use the `title`\nand `desc` props as this is used to create ids for those two props. This is super beneficial to screen readers.\n\nWhen this is defined, it is a space-delimited string of ids to provide to the title and desc (in order). If\nthis is omitted and the `use` prop is defined, it will take everything after the `#` sign and append `-title` and\n`-desc` as a fallback. Check out the examples for more information about this.\n\n@see [title](#s-v-g-icon-proptypes-title)\n@see [desc](#s-v-g-icon-proptypes-desc)",required:!1},{propName:"title",type:"string",description:"An optional title to give to your SVG icon. This is generally recommended for accessibility when not using\nthe `use` prop, or your spritemap does not contain `<title>` and `<desc>.\n\n@see [aria-labelledby](#s-v-g-icon-proptypes-aria-labelledby)",required:!1},{propName:"desc",type:"string",description:"An optional description to give to your SVG icon. This is generally recommended for accessibility when not using\nthe `use` prop, or your spritemap does not contain `<title>` and `<desc>.\n\n@see [aria-labelledby](#s-v-g-icon-proptypes-aria-labelledby)",required:!1},{propName:"use",type:"string",description:"This should be a link to a part of an SVG spritemap. So normally one of the following:\n- `'#some-custom-svg'`\n- `'/images/spritemap.svg#some-custom-svg'`\n\nThis prop **should not** be used with the `children` prop as only one will be rendered.\n\n> NOTE: IE **does not support** external SVGs. Please see the demo for more details.",required:!1},{propName:"children",type:"oneOfType([\n  element,\n  arrayOf(element),\n  node\n])",description:"Any `<svg>` children to render to create your icon. This can not be used with the `use` prop.",required:!1},{propName:"focusable",type:"string",description:"Boolean if the SVG should gain the `focusable` attribute. This is disabled by default since IE11\nand Edge actually default this to true and keyboard's will tab focus all SVGs.",required:!1,defaultValue:"'false'"},{propName:"size",type:"number",description:"An optional size to apply to the SVG. This can be used to set both the\n`height` and `width` simultaneously. This will be provided as inline styles\nsince the `height` and `width` are normally controlled by CSS, and CSS has\nhigher precedence than the `height`/`width` attributes.",required:!1},{propName:"height",type:"deprecated(PropTypes.number)",description:"The `height` prop has been deprecated and will be removed in the next major release.\n    \nUse the `size` prop instead.",required:!1},{propName:"width",type:"deprecated(PropTypes.number)",description:"The `width` prop has been deprecated and will be removed in the next major release.\n    \nUse the `size` prop instead.",required:!1},{propName:"viewBox",type:"string",description:'The viewBox attribute allows you to specify that a given set of graphics stretch to\nfit a particular container element.\n\nThe value of the viewBox attribute is a list of four numbers min-x, min-y, width and\nheight, separated by white space and/or a comma, which specify a rectangle in user\nspace which should be mapped to the bounds of the viewport established by the given\nelement, taking into account attribute preserveAspectRatio.\n\nNegative values for width or height are not permitted and a value of zero disables\nrendering of the element.An optional viewbox for the SVG.\n\nFor example, if the SVG element is 250 (width) by 200 (height) and you provide\n`viewBox="0 0 25 20"`, the coordinates inside the SVG will go from the top left corner\n(0, 0) to the bottom right (25, 20) and each unit will be worth `10px`.',required:!1,defaultValue:"'0 0 24 24'"},{propName:"xmlns",type:"string",description:"An optional xmlns string to provide. The `use` prop will not work without this prop\ndefined.",required:!1,defaultValue:"'http://www.w3.org/2000/svg'"}],description:"The `SVGIcon` component is used for rendering inline SVG icons or sprite-mapped SVGs\nas an icon."}],"select-fields":[{id:"select-field",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SelectFields/SelectField.js",component:"SelectField",functions:[],enums:[{name:"HorizontalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"LEFT",description:"Positions the layover to the outside left on the toggle component\nso that it does not overlap.",value:"left"},{name:"INNER_LEFT",description:"Positions the layover to the inner left of the toggle component so\nthat it will overlap.",value:"inner left"},{name:"CENTER",description:"Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",value:"center"},{name:"RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it does not overlap.",value:"right"},{name:"INNER_RIGHT",description:"Positions the layover to the outside right on the toggle component\nso that it will overlap.",value:"inner right"}]},{name:"VerticalAnchors",type:"constant",description:"An enum for all the different types of horizontal anchors on a layover.",properties:[{name:"TOP",description:"Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",value:"top"},{name:"CENTER",description:"Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",value:"center"},{name:"OVERLAP",description:"Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",value:"overlap"},{name:"BOTTOM",description:"Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",value:"bottom"}]},{name:"Positions",type:"constant",description:"An enum for all the animation positions for a layover appearing.",properties:[{name:"TOP_LEFT",description:"The layover will appear by transitioning from the top left and expand\ndown right.",value:"tl"},{name:"TOP_RIGHT",description:"The layover will appear by transitioning from the top right and expand\ndown left.",value:"tr"},{name:"BOTTOM_LEFT",description:"The layover will appear by transitioning from the bottom left and expand\ntop right.",value:"bl"},{name:"BOTTOM_RIGHT",description:"The layover will appear by transitioning from the bottom right and expand\ntop left.",value:"br"},{name:"BELOW",description:"The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",value:"below"}]}],getters:[{name:"value",type:"getter",description:"Gets the current value from the select field. This is used when you have an uncontrolled\ntext field and simply need the value from a ref callback.",returns:{description:"the select field's value",type:"String"},params:[]}],props:[{propName:"id",type:"custom",description:"An id to give the select field. This is required for accessibility.",required:!1},{propName:"name",type:"string",description:"An optional name to give to the select field.",required:!1},{propName:"menuId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the select field's menu. If this is omitted,\nit will default to `${id}-menu`.",required:!1},{propName:"listId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the select field's list.\n\n@see [menuId](#select-field-proptypes-menu-id)\n@see [Menu#menuId](/components/menus?tab=1#menu-proptypes-menu-id)",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the select field's container (the menu).",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the select field's container (the menu).",required:!1},{propName:"listStyle",type:"object",description:"An optional style to apply to the menu's list.",required:!1},{propName:"listClassName",type:"string",description:"An optional className to apply to the menu's list.",required:!1},{propName:"toggleStyle",type:"object",description:"An optional style to apply to the select field's toggle.",required:!1},{propName:"toggleClassName",type:"string",description:"An optional className to apply to the select field's toggle.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the `AccessibleFakeInkedButton` that is the trigger\nfor the select field.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the `AccessibleFakeInkedButton` that is the trigger\nfor the select field.",required:!1},{propName:"defaultVisible",type:"bool",description:"Boolean if the select field should be have the menu's list visible by default.",required:!0,defaultValue:"false"},{propName:"visible",type:"controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible')",description:"Boolean if the select field should have the menu's list visible. This will make\nthe select field controlled and require the `onVisibilityChange` prop to be defined,",required:!1},{propName:"onVisibilityChange",type:"func",description:"An optional function to call when the select field's menu has it's visibility changed. The callback\nwill include the next visible state and the event that triggered it.",required:!1},{propName:"menuItems",type:"arrayOf(oneOfType([\n  number,\n  string,\n  object,\n  element\n]))",description:"A list of `number`, `string`, or `object` that should be used to create `ListItem`\nin the menu's list. When it is an `object`, it will use the `itemLabel` prop as the\n`primaryText` and use the value of `itemValue`.\n\n@see [itemLabel](#select-field-proptypes-item-label)\n@see [itemValue](#select-field-proptypes-item-value)",required:!0,defaultValue:"[]"},{propName:"keyboardMatchingTimeout",type:"number",description:"The amount of time that a list of letters should be used when finding a menu item\nwhile typing. Since a user can select items by typing multiple letters in a row,\nthis will be used as the timeout for clearing those letters.\n\nFor example:\n- User types `g`\n\nFull match is now `'g'`.\n\n- User delays 200ms and types `u`\n\nFull match is now `'gu'`\n\n- User delays 1000ms and types `a`.\n\nFull match is now `'a'`",required:!0,defaultValue:"1000"},{propName:"itemLabel",type:"string",description:"The key to use for extracting a menu item's label if the menu item is an object.\n\nExample:\n\n```js\nconst item = { something: 'My Label', somethingElse: 'value' };\nconst itemLabel = 'something';\nconst itemValue = 'somethingElse';\n```",required:!0,defaultValue:"'label'"},{propName:"itemValue",type:"string",description:"The key to use for extracting a menu item's value if the menu item is an object.\n\nExample:\n\n```js\nconst item = { something: 'My Label', somethingElse: 'value' };\nconst itemLabel = 'something';\nconst itemValue = 'somethingElse';\n```",required:!0,defaultValue:"'value'"},{propName:"itemProps",type:"string",description:"The key to use for extracting a menu item's function\nto get additional `ListItem` props if the menu item is an object.\n\nExample:\n\n```js\nconst item = { something: 'My Label', addProps: ({active}) => active ? {secondaryText: 'some text'} : null };\nconst itemLabel = 'something';\nconst itemProps = 'addProps';\n```\n\n@see [getItemProps](#select-field-proptypes-get-item-props)",required:!0,defaultValue:"'getProps'"},{propName:"getItemProps",type:"func",description:"An optional function to get additional `ListItem` props if the menu item is an object.\n\nAn object with the following fields will be passed into the function:\n- `index` - item's index\n- `active` - whether item is active\n- `disabled` - whether item is disabled\n- `itemValue` - item's value\n- `value` - current list value\n- `props` - default `ListItem` props\n- `item` - source item's data\n- `field` - reference to the component instance",required:!1},{propName:"getActiveLabel",type:"func",description:"An optional function to get a node that will be rendered as the label of active item.\nBy default a string will be used that is retrieved from active item's data.\n\nAn object with the following fields will be passed into the function:\n- `activeItem` - active item's data\n- `activeIndex` - active item's index\n- `activeLabel` - active item's label (that is used by default when `getActiveLabel` prop is not specified)\n- `activeValue` - active item's value\n- `value` - current list value\n- `menuItems` - value of `menuItems` prop\n- `field` - reference to the component instance",required:!1},{propName:"saveListScrollTop",type:"bool",description:"Whether scroll top position of dropdown list should be preserved when the list is opened next time.\nBy default the list is scrolled so that active item is displayed on top of visible area of the list.\nHas priority over `listScrollTopUpdate` prop.",required:!1,defaultValue:"false"},{propName:"listScrollTopUpdate",type:"oneOfType([\n  number,\n  func\n])",description:"Specifies update for scroll top position of dropdown list when the list is opened.\nBy default the list is scrolled so that active item is displayed on top of visible area of the list.\nWhen this property is set the property value or function's result is subtracted\nfrom calculated scroll top position of the list.\n\nAn object with the following fields will be passed into the function:\n- `listRef` - reference to list\n- `listNode` - reference to list's DOM node\n- `listScrollTop` - current value of `scrollTop` property of list's DOM node\n- `newListScrollTop` - calculated value for `scrollTop` property of list's DOM node\n   (will be changed if the function returns non-zero value)\n- `listItems` - array of references to list items\n- `activeItemRef` - reference to active list item\n- `activeItemNode` - reference to active list item's DOM node\n- `activeIndex` - active item's index\n- `field` - reference to the component instance",required:!1,defaultValue:"0"},{propName:"defaultValue",type:"oneOfType([\n  number,\n  string\n])",description:"The default value to use for the select field. If this is set, it should either match\none of the `number` or `string` in your `menuItems` list or be the empty string. If\nthe `menuItems` is a list of `object`, this value should match one of the menu item's\n`itemValue` or be the empty string.\n\n```js\nconst menuItems = [{ label: 'Something': value: 0 }, { label: 'Something else', value: 1 }];\n\n// both valid\ndefaultValue={0}\ndefaultValue=\"\"\n```",required:!0,defaultValue:"''"},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'onChange', 'defaultValue')",description:"The value to use for the select field. If this is defined, it becomes a controlled component\nand requires the `onChange` prop to be defined. See the `defaultValue` for more behavior info.\n\n@see [defaultValue](#select-field-proptypes-default-value)",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the select field's value has been changed either when the user\nhas click/touched/keyboard selected a value in the list, or the user has selected a value by typing\nin the select field while the menu's list is closed.\n\nThe callback will include the next text field value, the selected item's index, the event that\ntriggered the change, and the id, name, and value of the select field.\n\n```js\nonChange(value, index, event, { id, name, value });\n```",required:!1},{propName:"label",type:"node",description:"An optional label to use with the select field. This will be a floating label as seen on the text field.",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder to use in the select field. This will only appear when no value has been selected.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the select field should be disabled.",required:!1},{propName:"required",type:"bool",description:"Boolean if the select field is required. This will update the label and placeholder to include a `*` suffix.",required:!1},{propName:"error",type:"bool",description:"Boolean if the select field is considered to be in an `error` state.\n\n@see [TextField#error](/components/text-fields?tab=1#text-field-proptypes-error)",required:!1},{propName:"errorText",type:"node",description:"An optional text to display when the text select field is in an error state.\n\n@see [TextField#errorText](/components/text-fields?tab=1#text-field-proptypes-error-text)",required:!1},{propName:"helpText",type:"node",description:"An optional text to display below the select field to provide input help to the user.\nThis will only be displayed if the select field is not in an error state.\n\n@see [helpOnFocus](#select-field-proptypes-help-on-focus)\n@see [TextField#errorText](/components/text-fields?tab=1#text-field-proptypes-error-text)",required:!1},{propName:"helpOnFocus",type:"bool",description:"Boolean if the `helpText` should only appear on focus.\n\n@see [helpText](#select-field-proptypes-help-text)\n@see [TextField#helpOnFocus](/components/text-fields?tab=1#text-field-proptypes-help-on-focus)",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when any element in the select field has been clicked.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the `keydown` event has been triggered anywhere in the\nselect field.",required:!1},{propName:"onFocus",type:"func",description:"An optional function to call when the select field's toggle has gained focus.",required:!1},{propName:"onBlur",type:"func",description:"An optional function to call when the select field's toggle has been blurred. This\nwill be triggered if the user hits the up or down arrow keys to traverse the list\nof items.",required:!1},{propName:"dropdownIcon",type:"element",description:"The icon to use to display the dropdown arrow.",required:!1,defaultValue:"<FontIcon>arrow_drop_down</FontIcon>"},{propName:"toolbar",type:"bool",description:"Boolean if the select field is in a toolbar. This should automatically be injected by the `Toolbar`\ncomponent if being used as a `titleMenu` or one of the `actions`.\n\n@see [Toolbar#titleMenu](/components/toolbars?tab=1#toolbar-proptypes-title-menu)\n@see [Toolbar#actions](/components/toolbars?tab=1#toolbar-proptypes-actions)",required:!1},{propName:"stripActiveItem",type:"bool",description:"Boolean if the currently active item should be removed from the list of available `menuItems`.\nIf this is `undefined`, it will strip out the active one only when the\n`position === SelectField.Positions.BELOW`.",required:!1},{propName:"transitionName",type:"string",description:"The transition name to use when a new value has been selected. By default, it will have the\nnew item _drop_ into the select field's input location.",required:!0,defaultValue:"'md-drop'"},{propName:"transitionTime",type:"number",description:"The transition time to use when a new value has been selected. If this value is `0`, there\nwill be no transition.",required:!0,defaultValue:"300"},{propName:"anchor",type:"custom",description:"This is how the menu's `List` gets anchored to the select field.\n\n@see [Layover#anchor](/components/helpers/layovers?tab=1#layover-proptypes-anchor)",required:!1,defaultValue:"{\n  x: SelectField.HorizontalAnchors.INNER_LEFT,\n  y: SelectField.VerticalAnchors.OVERLAP,\n}"},{propName:"belowAnchor",type:"custom",description:"This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n\n@see [Layover#belowAnchor](/components/helpers/layovers?tab=1#layover-proptypes-below-anchor)",required:!1},{propName:"position",type:"custom",description:"This is the animation position for the list that appears.\n\n@see [Layover#animationPosition](/components/helpers/layovers?tab=1#layover-proptypes-animation-position)",required:!1,defaultValue:"SelectField.Positions.TOP_LEFT"},{propName:"fixedTo",type:"custom",description:'This is how the menu\'s list will be "fixed" to the `toggle` component.\n\n@see [Layover#fixedTo](/components/helpers/layovers?tab=1#layover-proptypes-fixed-to)',required:!1,defaultValue:"Menu.defaultProps.fixedTo"},{propName:"listInline",type:"bool",description:"Boolean if the menu's list should appear horizontally instead of vertically.",required:!1},{propName:"listZDepth",type:"number",description:"The list's z-depth for applying box shadow. This should be a number from 0 to 5.",required:!1},{propName:"listHeightRestricted",type:"bool",description:"Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/\n`$md-menu-desktop-max-height` values.\n\n@see [md-menu-mobile-max-height](/components/menus?tab=1#variable-md-menu-mobile-max-height)\n@see [md-menu-desktop-max-height](/components/menus?tab=1#variable-md-menu-desktop-max-height)",required:!1},{propName:"xThreshold",type:"number",description:"@see [Layover#xThreshold](/components/helpers/layovers?tab=1#layover-proptypes-x-threshold)",required:!1},{propName:"yThreshold",type:"number",description:"@see [Layover#yThreshold](/components/helpers/layovers?tab=1#layover-proptypes-y-threshold)",required:!1},{propName:"closeOnOutsideClick",type:"bool",description:"@see [Layover#closeOnOutsideClick](/components/helpers/layovers?tab=1#layover-proptypes-close-on-outside-click)",required:!1},{propName:"menuTransitionName",type:"string",description:"An optional transition name to use for the list appearing/disappearing.\n\n@see [Menu#transitionName](/components/menus?tab=1#menu-proptypes-transition-name)",required:!1},{propName:"menuTransitionEnterTimeout",type:"number",description:"@see [Layover#transitionEnterTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-enter-timeout)",required:!1},{propName:"menuTransitionLeaveTimeout",type:"number",description:"@see [Layover#transitionLeaveTimeout](/components/helpers/layovers?tab=1#layover-proptypes-transition-leave-timeout)",required:!1},{propName:"block",type:"bool",description:"@see [Menu#block](/components/menus?tab=1#menu-proptypes-block)",required:!1},{propName:"fullWidth",type:"bool",description:"@see [Menu#fullWidth](/components/menus?tab=1#menu-proptypes-full-width)",required:!1},{propName:"centered",type:"custom",description:"@see [Layover#centered](/components/helpers/layovers?tab=1#layover-proptypes-centered)",required:!1},{propName:"sameWidth",type:"custom",description:"@see [Layover#sameWidth](/components/helpers/layovers?tab=1#layover-proptypes-same-width)",required:!1},{propName:"deleteKeys",type:"oneOfType([\n  number,\n  string,\n  arrayOf(  oneOfType([\n    number,\n    string\n  ]))\n])",description:"Since the `menuItems` get mapped into `ListItem`, this prop is used to remove\nany unnecessary props from the `ListItem` itself. This is where you\nwould remove parts of your object such as `description` or `__metadata__`.",required:!1},{propName:"repositionOnScroll",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the `fixedTo` element scrolls.\n\n@see [Layover#repositionOnScroll](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-scroll)",required:!1,defaultValue:"true"},{propName:"repositionOnResize",type:"bool",description:"Boolean if the menu should automatically try to reposition itself to stay within\nthe viewport when the window resizes.\n\n@see [Layover#repositionOnResize](/components/helpers/layovers?tab=1#layover-proptypes-reposition-on-resize)",required:!1,defaultValue:"false"},{propName:"simplifiedMenu",type:"bool",description:"Boolean if the menu logic should be simplified without any viewport logic and position\nbased on the relative position of the menu. This will most like require some additional\nstyles applied to the menu.\n\n@see [Layover#simplified](/components/helpers/layovers?tab=1#layover-proptypes-simplified)",required:!1},{propName:"minLeft",type:"custom",description:"@see [Layover#minLeft](/components/helpers/layovers?tab=1#layover-proptypes-min-left)",required:!1},{propName:"minRight",type:"custom",description:"@see [Layover#minRight](/components/helpers/layovers?tab=1#layover-proptypes-min-right)",required:!1},{propName:"minBottom",type:"custom",description:"@see [Layover#minBottom](/components/helpers/layovers?tab=1#layover-proptypes-min-bottom)",required:!1},{propName:"fillViewportWidth",type:"bool",description:"@see [Layover#fillViewportWidth](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-width)",required:!1},{propName:"fillViewportHeight",type:"bool",description:"@see [Layover#fillViewportHeight](/components/helpers/layovers?tab=1#layover-proptypes-fill-viewport-height)",required:!1},{propName:"lineDirection",type:"oneOf([\n  'left',\n  'center',\n  'right'\n])",description:"The direction that the underline should appear from.",required:!0,defaultValue:"'left'"},{propName:"iconChildren",type:"deprecated(PropTypes.node)",description:"The `iconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `dropdownIcon` instead.",required:!1},{propName:"iconClassName",type:"deprecated(PropTypes.string)",description:"The `iconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `dropdownIcon` instead.",required:!1},{propName:"isOpen",type:"deprecated(PropTypes.bool)",description:"The `isOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `visible` instead.",required:!1},{propName:"defaultOpen",type:"deprecated(PropTypes.bool)",description:"The `defaultOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"initiallyOpen",type:"deprecated(PropTypes.bool)",description:"The `initiallyOpen` prop has been deprecated and will be removed in the next major release.\n    \nUse `defaultVisible` instead.",required:!1},{propName:"onMenuToggle",type:"deprecated(PropTypes.func)",description:"The `onMenuToggle` prop has been deprecated and will be removed in the next major release.\n    \nUse `onVisibilityChange` instead.",required:!1},{propName:"stretchList",type:"deprecated(PropTypes.bool)",description:"The `stretchList` prop has been deprecated and will be removed in the next major release.\n    \nNo longer valid after the changes to the `Menu` component. Possibly use `sameWidth` instead.",required:!1},{propName:"menuStyle",type:"deprecated(PropTypes.object)",description:"The `menuStyle` prop has been deprecated and will be removed in the next major release.\n    \nUse `style` instead.",required:!1},{propName:"menuClassName",type:"deprecated(PropTypes.string)",description:"The `menuClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `className` instead.",required:!1},{propName:"floatingLabel",type:"deprecated(PropTypes.bool)",description:"The `floatingLabel` prop has been deprecated and will be removed in the next major release.\n    \nA select field can only have floating labels now. Only provide the `label` prop.",required:!1},{propName:"noAutoAdjust",type:"deprecated(PropTypes.bool)",description:"The `noAutoAdjust` prop has been deprecated and will be removed in the next major release.\n    \nNo longer valid to use since select fields are no longer text fields.",required:!1},{propName:"adjustMinWidth",type:"deprecated(PropTypes.bool)",description:"The `adjustMinWidth` prop has been deprecated and will be removed in the next major release.\n    \nNo longer valid to use since select fields are no longer text fields.",required:!1}],description:""}],"selection-controls":[{id:"selection-control",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SelectionControls/SelectionControl.js",component:"SelectionControl",functions:[],enums:[],getters:[{name:"checked",type:"getter",description:"Gets the current checked value from the selection control. This is used when you have\nan uncontrolled selection control and simply need the checked state from a ref callback.",returns:{description:"the checked state for the selection control.\\",type:"boolean"},params:[]}],props:[{propName:"id",type:"custom",description:"An id to use with the selection control. This is used for accessibility and so that the label\ntriggers the selection control toggle.",required:!1},{propName:"aria-label",type:"oneRequiredForA11y(PropTypes.string, 'label', 'aria-labelledby')",description:"An optional label to apply to the checkbox when there is no visible label.",required:!1},{propName:"aria-labelledby",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id that points to a label for the selection control when there is no visible label.",required:!1},{propName:"aria-describedby",type:"string",description:"An optional id of an element that describes this selection control.\nIn the case of a fieldset, this should be the id of the fieldset legend which ensures\nscreen readers provides additional context about the selection control",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the selection control's container.",required:!1},{propName:"className",type:"oneOfType([\n  func,\n  string\n])",description:"An optional className to apply to the selection control's container.\nWhen a function is specified as prop value its returned value will be used as className.\nThe following parameters will be passed into the function:\n- component's props (by default value from state is used for `checked` prop)\n- reference to component",required:!1},{propName:"controlClassName",type:"oneOfType([\n  func,\n  string\n])",description:"An optional className to apply to the selection control.\nWhen a function is specified as prop value its returned value will be used as className.\nThe following parameters will be passed into the function:\n- component's props (by default value from state is used for `checked` prop)\n- reference to component",required:!1},{propName:"inputClassName",type:"oneOfType([\n  func,\n  string\n])",description:"An optional className to apply to the selection input element.\nThe following parameters will be passed into the function:\n- component's props (by default value from state is used for `checked` prop)\n- reference to component",required:!1},{propName:"labelClassName",type:"oneOfType([\n  func,\n  string\n])",description:"An optional className to apply to the selection label element.\nThe following parameters will be passed into the function:\n- component's props (by default value from state is used for `checked` prop)\n- reference to component",required:!1},{propName:"labelTextClassName",type:"oneOfType([\n  func,\n  string\n])",description:"An optional className to apply to the selection label's text element.\nThe following parameters will be passed into the function:\n- component's props (by default value from state is used for `checked` prop)\n- reference to component",required:!1},{propName:"type",type:"oneOf([\n  'checkbox',\n  'radio',\n  'switch'\n])",description:"The type of selection control to render.",required:!0},{propName:"label",type:"node",description:"A label to display with the selection control. This is required for accessibility and triggering\nthe toggle.",required:!1},{propName:"labelBefore",type:"bool",description:"Boolean if the label should appear before the checkbox/radio icon or switch.",required:!1},{propName:"name",type:"custom",description:"A name to use for the `SelectionControl`. This is required for accessibility. If the `type`\nis a `checkbox` and it is part of a group, it is recommended to make this a string ending\nin `[]` so that the value can be found from `document.querySelector('input[name=\"someName[]\"]').value`.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the `SelectionControl` is disabled.",required:!1},{propName:"onChange",type:"func",description:"A function to call when the `SelectionControl` triggers the `change` event. The `onChange`\ncallback will either include:\n- the currently changed radio's value\n- the next checked state for the `Switch` or `Checkbox`.\n\nas the first parameter followed by the change event.\n\n```js\n// Radio\nonChange(changeEvent.target.value, changeEvent);\n\n// Checkbox or Switch\nonChange(changeEvent.target.checked, changeEvent);\n```",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the `keydown` event is triggered.",required:!1},{propName:"value",type:"oneOfType([\n  bool,\n  number,\n  string\n])",description:"The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,\nbut it is recommended.",required:!1},{propName:"checked",type:"bool",description:"A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`\nprop required, but since there are cases you might want to have the `onChange` listener on a\n`fieldset` or something above the component, it is never set to `required`. It will however\nprevent updates if there is no change listener.",required:!1},{propName:"defaultChecked",type:"bool",description:"Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a\n`Radio`.",required:!1},{propName:"inline",type:"bool",description:"Boolean if the `SelectionControl` should be displayed inline instead of a block.",required:!1},{propName:"changeOnEnter",type:"bool",description:"Whether the `change` event should be triggered for `SelectionControl` on pressing of `Enter` key.",required:!1},{propName:"checkedCheckboxIcon",type:"element",description:"The icon to use for a checked `checkbox` selection control.",required:!1,defaultValue:"<FontIcon>check_box</FontIcon>"},{propName:"uncheckedCheckboxIcon",type:"element",description:"The icon to use for an unchecked `checkbox` selection control.",required:!1,defaultValue:"<FontIcon>check_box_outline_blank</FontIcon>"},{propName:"checkedRadioIcon",type:"element",description:"The icon to use for a checked `radio` selection control.",required:!1,defaultValue:"<FontIcon>radio_button_checked</FontIcon>"},{propName:"uncheckedRadioIcon",type:"element",description:"The icon to use for an unchecked `radio` selection control.",required:!1,defaultValue:"<FontIcon>radio_button_unchecked</FontIcon>"},{propName:"tooltip",type:"node",description:"An optional tooltip to render with the control. This is only used if you inject the\ntooltip manually yourself.\n\n`const TooltippedSelectionControl = injectTooltip(SelectionControl);`",required:!1},{propName:"inkDisabled",type:"bool",description:"Boolean if the ink should be disabled for radios or checkboxes.\n\n@see [Inks#inkDisabled](/components/inks?tab=1#inks-proptypes-ink-disabled)",required:!1},{propName:"disabledInteractions",type:"arrayOf(oneOf([\n  'keyboard',\n  'touch',\n  'mouse'\n]))",description:"An optional list of ink interactions that should be disabled.\n\n@see [Inks#disabledInteractions](/components/inks?tab=1#inks-proptypes-disabled-interactions)",required:!1},{propName:"tabIndex",type:"number",description:"An optional tab index to apply to the selection control.",required:!1},{propName:"checkedIcon",type:"preventDouble(deprecated(PropTypes.node)",description:"",required:!1},{propName:"uncheckedIcon",type:"preventDouble(deprecated(PropTypes.node)",description:"",required:!1},{propName:"checkedCheckboxIconChildren",type:"deprecated(PropTypes.node)",description:"The `checkedCheckboxIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checkedCheckboxIcon` prop instead.",required:!1},{propName:"checkedCheckboxIconClassName",type:"deprecated(PropTypes.string)",description:"The `checkedCheckboxIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checkedCheckboxIcon` prop instead.",required:!1},{propName:"uncheckedCheckboxIconChildren",type:"deprecated(PropTypes.node)",description:"The `uncheckedCheckboxIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `uncheckedCheckboxIcon` prop instead.",required:!1},{propName:"uncheckedCheckboxIconClassName",type:"deprecated(PropTypes.string)",description:"The `uncheckedCheckboxIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `uncheckedCheckboxIcon` prop instead.",required:!1},{propName:"checkedRadioIconChildren",type:"deprecated(PropTypes.node)",description:"The `checkedRadioIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checkedRadioIcon` prop instead.",required:!1},{propName:"checkedRadioIconClassName",type:"deprecated(PropTypes.string)",description:"The `checkedRadioIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checkedRadioIcon` prop instead.",required:!1},{propName:"uncheckedRadioIconChildren",type:"deprecated(PropTypes.node)",description:"The `uncheckedRadioIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `uncheckedRadioIcon` prop instead.",required:!1},{propName:"uncheckedRadioIconClassName",type:"deprecated(PropTypes.string)",description:"The `uncheckedRadioIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `uncheckedRadioIcon` prop instead.",required:!1}],description:"The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`\nselection control type. This component might eventually replace all three since they use this\nanyways. I am not sure yet though."},{id:"selection-control-group",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SelectionControls/SelectionControlGroup.js",component:"SelectionControlGroup",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the container.",required:!1},{propName:"controlStyle",type:"object",description:"An optional style to apply to every `SelectionControl`. This will be merged with any `style`\nthat a `control` might have.",required:!1},{propName:"controlClassName",type:"string",description:"An optional className to apply to every `SelectionControl`. This will be merged with any\n`className` that a `control` might have.",required:!1},{propName:"id",type:"custom",description:"An optional base id to apply to each `SelectionControl`. When this is included, the id for\neach control will start with this and end with their current index. If this is omitted,\neach `control` in the `controls` prop *must* have an `id` prop. This is required for\naccessibility.",required:!1},{propName:"type",type:"oneOf([\n  'checkbox',\n  'radio'\n])",description:"The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is\nvalid for a grouping.",required:!0},{propName:"component",type:"string",description:"The component to render the `SelectionControlGroup` in. This can only be a valid dom element\nsince it relies on the ref callback to add keyboard accessibility.",required:!0,defaultValue:"'fieldset'"},{propName:"label",type:"node",description:"An optional label to display above the group of `SelectionControl`s.",required:!1},{propName:"labelClassName",type:"string",description:"An optional className to apply to the node surrounding the `label` prop.",required:!1,defaultValue:"'md-subheading-1'"},{propName:"controlComponent",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render each item in the `controls` list as. By default, this will be the\n`SelectionControl` component but you can change this to any React component that accepts\nthe selection control props. It is currently provided:\n\n```js\nconst controlProps = {\n  id: `${id}${i}`,\n  key: `control${i}`,\n  name: `${name}${type === 'checkbox' ? '[]' : ''}`,\n  type,\n  inline,\n  disabled,\n  checked,\n  tabIndex: !radio || checked || (i === 0 && this._activeIndex === -1) ? undefined : -1,\n  checkedRadioIcon,\n  uncheckedRadioIcon,\n  checkedCheckboxIcon,\n  uncheckedCheckboxIcon,\n  ...control,\n  style,\n  className: cn(controlClassName, control.className),\n};\n```",required:!0,defaultValue:"SelectionControl"},{propName:"labelComponent",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the optional `label` in.",required:!0,defaultValue:"'legend'"},{propName:"onChange",type:"func",description:"An optional function to call when any `SelectionControl`'s `checked` state is changed\nin the group. If the `type` of the group is `radio`, the `value` of the `checked` radio\nwill be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited\nstring of all `checked` checkboxes values will be given.\n\n```js\n// checkbox\nonChange('Alpha,Omega', changeEvent);\n\n// radio\nonChange('Omega', changeEvent);\n```",required:!1},{propName:"name",type:"custom",description:'A name to use for each `SelectionControl` in the group. If the `type` of the group is\n`checkbox`, the name will be updated to be an array name so that using\n`document.querySelector(\'input[name="yourName[]"].value` will give the comma-delimited\nstring of checked checkboxes.\n\nIt is either required to have this prop set or every `control` in the `controls` prop to\nhave the `name` prop.',required:!1},{propName:"defaultValue",type:"oneOfType([\n  bool,\n  number,\n  string\n])",description:"The default value for the `SelectionControlGroup`. This can either be a single value\nor a comma-delimited string of checkbox values. When the `type` of the group is `radio`\nand the group is uncontrolled, it is recommended to set this prop. Otherwise the first\nvalue of the `controls` prop will be used as the default value.",required:!1},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n]), 'onChange')",description:"An optional value to use for the `SelectionControlGroup`. This will make the component\ncontrolled and require the `onChange` prop to be defined. Like the `defaultValue`, this\ncan either be a single value or a comma-delimited list of checkbox values.",required:!1},{propName:"controls",type:"arrayOf(shape({\n  key: oneOfType([\n    number,\n    string\n  ]),\n  label: node.isRequired,\n  value: oneOfType([\n    bool,\n    number,\n    string\n  ]).isRequired\n}))",description:"A list of objects to create the `SelectionControl` components. The shape of the object\nis the `propTypes` of the `SelectionControl` component, except that `value` prop is\nnow required.\n\nThe `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.",required:!0},{propName:"inline",type:"bool",description:"Boolean if the `SelectionControl` should be displayed inline.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if all the selection controls in the group are disabled.",required:!1},{propName:"onKeyDown",type:"func",description:"An optional function to call when the keydown event is triggered.",required:!1},{propName:"checkedRadioIcon",type:"node",description:'An icon to use for a checked `radio` control. This will be applied to each\ncontrol that has a `type="radio"` in the `controls` list. This is just a simpler\nway of applying the custom icons for each radio in the list.\n\nThis will default to the `checkedRadioIcon` on the `SelectionControl`.\n\n@see [controls](#selection-control-group-proptypes-controls)\n@see [uncheckedRadioIcon](#selection-control-group-proptypes-unchecked-radio-icon)\n@see [SelectionControls#checkedRadioIcon](/components/selection-controls?tab=1#selection-controls-proptypes-checked-radio-icon)\n@see [SelectionControls#uncheckedRadioIcon](/components/selection-controls?tab=1#selection-controls-proptypes-unchecked-radio-icon)',required:!1},{propName:"uncheckedRadioIcon",type:"node",description:'An icon to use for an unchecked `radio` control. This will be applied to each\ncontrol that has a `type="radio"` in the `controls` list. This is just a simpler\nway of applying the custom icons for each radio in the list.\n\nThis will default to the `uncheckedRadioIcon` on the `SelectionControl`.\n\n@see [controls](#selection-control-group-proptypes-controls)\n@see [checkedRadioIcon](#selection-control-group-proptypes-checked-radio-icon)\n@see [SelectionControls#checkedRadioIcon](/components/selection-controls?tab=1#selection-controls-proptypes-checked-radio-icon)\n@see [SelectionControls#uncheckedRadioIcon](/components/selection-controls?tab=1#selection-controls-proptypes-unchecked-radio-icon)',required:!1},{propName:"checkedCheckboxIcon",type:"node",description:'An icon to use for a checked `checkbox` control. This will be applied to each\ncontrol that has a `type="checkbox"` in the `controls` list. This is just a simpler\nway of applying the custom icons for each checkbox in the list.\n\nThis will default to the `checkedCheckboxIcon` on the `SelectionControl`.\n\n@see [controls](#selection-control-group-proptypes-controls)\n@see [uncheckedCheckboxIcon](#selection-control-group-proptypes-unchecked-checkbox-icon)\n@see [SelectionControls#checkedCheckboxIcon](/components/selection-controls?tab=1#selection-controls-proptypes-checked-checkbox-icon)\n@see [SelectionControls#uncheckedCheckboxIcon](/components/selection-controls?tab=1#selection-controls-proptypes-unchecked-checkbox-icon)',required:!1},{propName:"uncheckedCheckboxIcon",type:"node",description:'An icon to use for an unchecked `checkbox` control. This will be applied to each\ncontrol that has a `type="checkbox"` in the `controls` list. This is just a simpler\nway of applying the custom icons for each checkbox in the list.\n\nThis will default to the `uncheckedCheckboxIcon` on the `SelectionControl`.\n\n@see [controls](#selection-control-group-proptypes-controls)\n@see [checkedCheckboxIcon](#selection-control-group-proptypes-checked-checkbox-icon)\n@see [SelectionControls#checkedCheckboxIcon](/components/selection-controls?tab=1#selection-controls-proptypes-checked-checkbox-icon)\n@see [SelectionControls#uncheckedCheckboxIcon](/components/selection-controls?tab=1#selection-controls-proptypes-unchecked-checkbox-icon)',required:!1}],description:"The `SelectionControlGroup` component is used to simplify the generation of a list\nof `SelectionControl`. Any common props are extracted to this component and passed\nto the `SelectionControl`."},{id:"checkbox",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SelectionControls/Checkbox.js",component:"Checkbox",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id to use with the checkbox. This is used for accessibility and so that the label\ntriggers the checkbox toggle.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the checkbox's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the checkbox's container.",required:!1},{propName:"label",type:"node",description:"A label to display with the checkbox. This is required for accessibility and triggering\nthe toggle.",required:!1},{propName:"labelBefore",type:"bool",description:"Boolean if the label should appear before the checkbox icon.",required:!1},{propName:"name",type:"custom",description:"A name to use for the `Checkbox`. This is required for accessibility. If the checkbox is\npart of a group, it is recommended to make this a string ending in `[]` so that the\nvalue can be found from `document.querySelector('input[name=\"someName[]\"]').value`.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the `Checkbox` is disabled.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the `checked` state of the `Checkbox` changes.\nThe callback will include the new checked state and the changeEvent.\n\n```js\nonChange(changeEvent.target.checked, changeEvent);\n```",required:!1},{propName:"value",type:"oneOfType([\n  bool,\n  number,\n  string\n])",description:"An optional value for the `Checkbox`. It is recommended to use a value though.",required:!1},{propName:"defaultChecked",type:"bool",description:"Boolean if the `Checkbox` is checked by default.",required:!1},{propName:"checked",type:"controlled(PropTypes.bool, 'onChange', 'defaultChecked')",description:"A boolean if the `Checkbox` is currently checked. This will required the `onChange` prop\nto be defined.",required:!1},{propName:"inline",type:"bool",description:"Boolean if the `Checkbox` should be displayed inline.",required:!1},{propName:"changeOnEnter",type:"bool",description:"Whether the `change` event should be triggered for `Checkbox` on pressing of `Enter` key.",required:!1},{propName:"checkedIcon",type:"node",description:"The icon to display when the checkbox is checked.",required:!1,defaultValue:"<FontIcon>check_box</FontIcon>"},{propName:"uncheckedIcon",type:"node",description:"The icon to display when the checkbox is unchecked.",required:!1,defaultValue:"<FontIcon>check_box_outline_blank</FontIcon>"},{propName:"checkedIconChildren",type:"deprecated(PropTypes.node)",description:"The `checkedIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `checkedIcon` instead.",required:!1},{propName:"checkedIconClassName",type:"deprecated(PropTypes.string)",description:"The `checkedIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `checkedIcon` instead.",required:!1},{propName:"uncheckedIconChildren",type:"deprecated(PropTypes.node)",description:"The `uncheckedIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `uncheckedIcon` instead.",required:!1},{propName:"uncheckedIconClassName",type:"deprecated(PropTypes.string)",description:"The `uncheckedIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `uncheckedIcon` instead.",required:!1}],description:"The `Checkbox` component is used for the selection of multiple options from a set."},{id:"radio",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SelectionControls/Radio.js",component:"Radio",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id to use with the radio. This is used for accessibility and so that the label\ntriggers the radio toggle.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the radio's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the radio's container.",required:!1},{propName:"label",type:"node",description:"A label to display with the radio. This is required for accessibility and triggering\nthe toggle.",required:!0},{propName:"labelBefore",type:"bool",description:"Boolean if the label should appear before the radio icon.",required:!1},{propName:"name",type:"custom",description:"A name to use for the `Radio`. This is required for accessibility.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the `Radio` is disabled.",required:!1},{propName:"onChange",type:"func",description:"A function to call when the `Radio` triggers the `change` event. The `onChange` callback\nwill include the current value of the checked `radio` and the change event.\n\n```js\nonChange(changeEvent.target.value, changeEvent);\n```",required:!1},{propName:"value",type:"oneOfType([\n  bool,\n  number,\n  string\n])",description:"The value for the `Radio` component.",required:!0},{propName:"checked",type:"bool",description:"A boolean if the `Radio` is currently checked.",required:!0},{propName:"inline",type:"bool",description:"Boolean if the `Radio` should be displayed inline.",required:!1},{propName:"changeOnEnter",type:"bool",description:"Whether the `change` event should be triggered for `Radio` on pressing of `Enter` key.",required:!1},{propName:"checkedIcon",type:"node",description:"The icon to display when the radio is checked/selected.",required:!0,defaultValue:"<FontIcon>radio_button_checked</FontIcon>"},{propName:"uncheckedIcon",type:"node",description:"The icon to display when the radio is not checked/selected.",required:!0,defaultValue:"<FontIcon>radio_button_unchecked</FontIcon>"},{propName:"checkedIconChildren",type:"deprecated(PropTypes.node)",description:"The `checkedIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `checkedIcon` instead.",required:!1},{propName:"checkedIconClassName",type:"deprecated(PropTypes.string)",description:"The `checkedIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `checkedIcon` instead.",required:!1},{propName:"uncheckedIconChildren",type:"deprecated(PropTypes.node)",description:"The `uncheckedIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse `uncheckedIcon` instead.",required:!1},{propName:"uncheckedIconClassName",type:"deprecated(PropTypes.string)",description:"The `uncheckedIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse `uncheckedIcon` instead.",required:!1}],description:"The `Radio` component is used for the selection of a single option from a set. Unfortunately\nthe `Radio` component must always be controlled because of the `FontIcon` toggles and how\nthe `radio` input type works. It is recommended to use the `SelectionControlGroup` component\nto manage the `radio`."},{id:"switch",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/SelectionControls/Switch.js",component:"Switch",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id to use with the switch. This is used for accessibility and so that the label\ntriggers the switch toggle.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the switch's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the switch's container.",required:!1},{propName:"label",type:"node",description:"A label to display with the switch. This is required for accessibility and triggering\nthe toggle.",required:!1},{propName:"labelBefore",type:"bool",description:"Boolean if the label should appear before the switch.",required:!1},{propName:"name",type:"custom",description:'A name to use for the `Switch`. This is required for accessibility since behind the scenes\nthe `Switch` is renders as an `<input type="checkbox" />`.',required:!1},{propName:"disabled",type:"bool",description:"Boolean if the `Switch` is disabled.",required:!1},{propName:"onChange",type:"func",description:"An optional function to call when the `checked` state of the `Switch` changes.\nThe callback will include the new checked state and the changeEvent.\n\n```js\nonChange(changeEvent.target.checked, changeEvent);\n```",required:!1},{propName:"value",type:"oneOfType([\n  bool,\n  number,\n  string\n])",description:"An optional value for the `Switch`. It is recommended to use a value though.",required:!1},{propName:"defaultChecked",type:"bool",description:"Boolean if the `Switch` is checked by default.",required:!1},{propName:"checked",type:"controlled(PropTypes.bool, 'onChange', 'defaultChecked')",description:"A boolean if the `Switch` is currently checked. This will required the `onChange` prop\nto be defined.",required:!1},{propName:"changeOnEnter",type:"bool",description:"Whether the `change` event should be triggered for `Switch` on pressing of `Enter` key.",required:!1},{propName:"defaultToggled",type:"deprecated(PropTypes.bool)",description:"The `defaultToggled` prop has been deprecated and will be removed in the next major release.\n    \nUse the `defaultChecked` prop instead.",required:!1},{propName:"toggled",type:"deprecated(PropTypes.bool)",description:"The `toggled` prop has been deprecated and will be removed in the next major release.\n    \nUse the `checked` prop instead.",required:!1}],description:""}],sliders:[{id:"slider",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Sliders/Slider.js",component:"Slider",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id to use for the `Slider`. This is required if the `label` prop\nis defined.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the slider's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the slider's container.",required:!1},{propName:"thumbStyle",type:"object",description:"An optional style to apply to the slider's thumb.",required:!1},{propName:"thumbClassName",type:"string",description:"An optional className to apply to the slider's thumb.",required:!1},{propName:"trackStyle",type:"object",description:"An optional style to apply to the slider's track.",required:!1},{propName:"trackClassName",type:"string",description:"An optional className to apply to the slider's track.",required:!1},{propName:"trackFillStyle",type:"object",description:"An optional style to apply to the slider's track fill.",required:!1},{propName:"trackFillClassName",type:"string",description:"An optional className to apply to the slider's track fill.",required:!1},{propName:"discreteValueStyle",type:"object",description:"An optional style to apply to a discrete slider's value.",required:!1},{propName:"discreteValueClassName",type:"string",description:"An optional className to apply to a discrete slider's value.",required:!1},{propName:"defaultValue",type:"number",description:"The default value for the slider. This number must be between the min and max values if\ndefined. If this is undefined, it's value will be set to the min value.",required:!1},{propName:"min",type:"custom",description:"The min value for the slider. This value **must** be less than the `max` value.",required:!1,defaultValue:"0"},{propName:"max",type:"custom",description:"The max value for the slider. This value **must** be greater than the `min` value.",required:!1,defaultValue:"100"},{propName:"disabled",type:"bool",description:"Boolean if the slider is disabled.",required:!1},{propName:"value",type:"controlled(PropTypes.number, 'onChange')",description:"An optional value for the slider. This will make the component controlled\nand require the `onChange` function.",required:!1},{propName:"onChange",type:"func",description:"This is called when the slider's value gets updated. The value can be updated\nby one of the following:\n\n- Clicking a section of the slider\n- Dragging the slider with the mouse\n- Touching a section of the slider.\n- Dragging the slider with touch\n- Using the text field to update the value either by typing or incrementing\n- Using the left or right arrow keys to increment/decrement the value.\n\nThe callback for this function is as follows:\n\n```js\nonChange(value, event);\n```\n\nwhere the event can either be:\n- a touch start event\n- a touch move event\n- a touch end event\n- a mouse down event\n- a mouse move event\n- a mouse up event\n- a key up event\n- a key down event",required:!1},{propName:"onDragChange",type:"func",description:"This is only called when the user is dragging the slider with either\nthe mouse or touch. Probably not really useful. It just includes the\nnew drag percentage while the `onChange` does not.\n\nThe callback for this function is defined as:\n\n```js\nonDragChange(dragPercentage, value, (touchMove || mouseMove) event);\n```",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when the slider's container has\nthe mousedown event.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the slider's container has\nthe touchstart event.",required:!1},{propName:"leftIcon",type:"element",description:"An optional icon or letter to place to the left of the slider.\nif you want to use a non-font icon or a letter, use the `md-slider-ind`\nclassName on your element.",required:!1},{propName:"rightIcon",type:"element",description:"An optional icon or letter to place to the right of the slider.\nif you want to use a non-font icon or a letter, use the `md-slider-ind`\nclassName on your element.\n\n> NOTE: This can not be used if the `editable` prop is true.",required:!1},{propName:"label",type:"node",description:"An optional label to display above the slider. If this prop\nis set, then an `id` must also be given.",required:!1},{propName:"step",type:"custom",description:"The incremental amount when the user hits left or right with the\nkeyboard arrows, or the user hits the up or down buttons in the\neditable number text field. This number must be a number between\n0 and 1 or a whole number above 1.",required:!1,defaultValue:"1"},{propName:"editable",type:"custom",description:"Boolean if the Slider should be editable. This will place a number text field\nto the right of the slider. If this prop is set to `true`, the `rightIcon`\nprop can not be set.",required:!1},{propName:"inputWidth",type:"oneOfType([\n  number,\n  string\n])",description:"The width for the number text field when the Slider is editable.",required:!0,defaultValue:"40"},{propName:"discrete",type:"custom",description:"Boolean if the slider should be discrete. This will update the slider to include a\n_balloon_ with the current value inside. It will also not allow the `Slider` to be\neditable.",required:!1},{propName:"tickWidth",type:"oneOfType([\n  number,\n  string\n])",description:"The width of each tick for a discrete slider with ticks. This can either be a number\nwhich gets converted to `px`, or a valid CSS unit.",required:!0,defaultValue:"6"},{propName:"discreteTicks",type:"custom",description:"This is number divisible by the total number of values included in the Slider. Every\nvalue that is divisible by this number will include a tick mark. It is common recommended\nto have this equal to the `step` prop.\n\nThis prop is completely optional.",required:!1},{propName:"discreteInkTransitionTime",type:"number",description:"The transition time for a discrete Slider's keyboard focus ink. This should match the\n`md-slider-discrete-ink-transition-time` value in your SCSS. This is used because\nthe ink is only visible temporarily for a discrete slider when keyboard focusing.",required:!0,defaultValue:"300"},{propName:"valuePrecision",type:"custom",description:"The precision that the value should be rounded to when the Slider is updated. This\nneeds to be a whole number greater than or equal to 0.",required:!1,defaultValue:"0"},{propName:"stepPrecision",type:"deprecated(PropTypes.number)",description:"The `stepPrecision` prop has been deprecated and will be removed in the next major release.\n    \nUse `step` and `valuePrecision` instead.",required:!1}],description:"The `Slider` component is used to let users select a value from a continuous\nor discrete range of values by moving the slider thumb.\n\nWhen the user has finished dragging the Slider or increments the value by using\nthe edit field/keyboard arrows, the value will be rounded to the nearest `step`."}],snackbars:[{id:"snackbar",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Snackbars/SnackbarContainer.js",component:"Snackbar",functions:[],enums:[],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An id for the Snackbar once a toast has been added and is visible. This is a recommended\nprop for accessibility concerns. If it is omitted, the id will become `'snackbar-alert'`\nwhen there is no action on the toast, or `'snackbar-alert-dialog'` when there is an action\non the toast.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the snackbar once it appears.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the snackbar once it appears.",required:!1},{propName:"toasts",type:"arrayOf(shape({\n  text: node.isRequired,\n  action: oneOfType([\n    node,\n        shape({\n      onClick: func,\n      children: node,\n      label: node\n    })\n  ])\n}))",description:"An immutable controlled queue of toasts that should appear in the snackbar.\nThe snackbar will always display the first toast in this list. When the user has\neither clicked the action of the toast, or the `autohideTimeout` has been reached,\nthe `onDismiss` function will be called. The `onDismiss` function should remove the\nfirst toast and return a new list of remaining toasts.\n\n```js\nlet toasts = [];\nconst onDismiss = () => {\n  const [, ...remainingToasts] = toasts;\n  toasts = remainingToasts;\n};\n```",required:!0,defaultValue:"[]"},{propName:"onDismiss",type:"func",description:"A function to call that will dismiss a toast. This will automatically be bound to\nany toast that has an `action` and it will also be called when the `autohideTimeout`\nhas been reached.",required:!0},{propName:"autohide",type:"bool",description:"Boolean if the snackbar's toasts should automatically be dismissed after the\n`autohideTimeout` has been reached.",required:!1,defaultValue:"true"},{propName:"autohideTimeout",type:"number",description:"The amount of time before the snackbar should be dequeued and the next toast\nshould be displayed.",required:!0,defaultValue:"3000"},{propName:"autoFocusAction",type:"bool",description:"When a toast has an action, it will automatically be focused when this prop is enabled.\nThis will require your action onClick handler to correctly focus an element on the page\nonce the toast is hidden. If this prop is disabled, it is recommended to add custom focus\nlogic so that keyboard users can interact with the snackbar.",required:!1,defaultValue:"false"},{propName:"transitionName",type:"string",description:"The transition name to use for the snackbar appearing and disappearing.",required:!0,defaultValue:"'md-snackbar'"},{propName:"transitionEnterTimeout",type:"number",description:"The transition time for the snackbar to enter. This should match the `$md-snackbar-transition-time`\nsass variable.",required:!0,defaultValue:"300"},{propName:"transitionLeaveTimeout",type:"number",description:"The transition time for the snackbar to leave. This should match the `$md-snackbar-transition-time`\nsass variable.",required:!0,defaultValue:"300"},{propName:"fab",type:"custom",description:"When the app contains a floating action button that is fixed to the bottom of the screen,\nyou should set this to be a ref of the floating action button. When a snackbar appears,\nthe FAB will be moved to not overlay the snackbar.",required:!1},{propName:"portal",type:"bool",description:"Boolean if the Portal's functionality of rendering in a separate react tree should be applied\nto the snackbar.\n\n@see [Portal](/components/helpers/portals?tab=1#portal-proptypes)",required:!1},{propName:"renderNode",type:"object",description:"An optional DOM node to render the Snackbar in. If this is omitted, it will render as the first\nchild in the `body`.",required:!1},{propName:"lastChild",type:"bool",description:"Boolean if the snackbar should render as the last child in the `renderNode` or `body` instead of\nas the first.",required:!1},{propName:"dismiss",type:"deprecated(PropTypes.func)",description:"The `dismiss` prop has been deprecated and will be removed in the next major release.\n    \nUse `onDismiss` instead.",required:!1}],description:"The `Snackbar` component is used for displaying a concise and small message to the user about\nan operation performed.\n\n> The main component for the `Snackbar` is actually named the `SnackbarContainer`, so you need\nto make sure the import is `react-md/lib/Snackbars` or `react-md/lib/Snackbars/SnackbarContainer`.\nThe first import is preferable."}],subheaders:[{id:"subheader",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Subheaders/Subheader.js",component:"Subheader",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the subheader.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the subheader.",required:!1},{propName:"primary",type:"bool",description:"Boolean if the subheader should be styled with the primary color.",required:!1},{propName:"inset",type:"bool",description:"Boolean if the subheader is inset in the list. This will add additional\nspacing to align the subheader.",required:!1},{propName:"primaryText",type:"node",description:"The primary text to use in the subheader.",required:!0},{propName:"children",type:"node",description:"Any optional children to display after the `primaryText`. This prop is\nnot recommended.",required:!1},{propName:"component",type:"oneOfType([\n  string,\n  func,\n  object\n])",description:"The component to render the Subheader as.",required:!0,defaultValue:"'li'"}],description:"The `Subheader` component is generally used inside of lists or menus."}],tabs:[{id:"tabs-container",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tabs/TabsContainer.js",component:"TabsContainer",functions:[],enums:[],getters:[],props:[{propName:"style",type:"object",description:"An optional style to apply to the container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the container.",required:!1},{propName:"panelStyle",type:"object",description:"An optional style to apply to each `TabPanel` that gets generated. Each tab's children\nwill get wrapped in a `TabPanel` component.",required:!1},{propName:"panelClassName",type:"string",description:"An optional className to apply to each each `TabPanel` that gets generated. Each tab's\nchildren will get wrapped in a `TabPanel` component.",required:!1},{propName:"headerStyle",type:"object",description:"An optional style to apply to the header component when the tabs are fixed to the top of the page.\nThe optional toolbar and tabs get wrapped in a `Paper` component.",required:!1},{propName:"headerClassName",type:"string",description:"An optional className to apply to the header component when the tabs are fixed to the top of the page.\nThe optional toolbar and tabs get wrapped in a `Paper` component.",required:!1},{propName:"swipeableViewsStyle",type:"object",description:"An optional style to apply to the `SwipeableViews`.\n\n@see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-",required:!1},{propName:"swipeableViewsClassName",type:"string",description:"An optional className to apply to the `SwipeableViews` container.",required:!1},{propName:"slideStyle",type:"oneOfType([\n  object,\n  func\n])",description:"An optional style to apply to each slide component or a function that returns such style.\n\nDefault style and height of slide component will be passed in the function.\nThe function should return a style that will be merged with default style, or `null`.\n\n@see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-",required:!1},{propName:"slideHeightProp",type:"oneOf([\n  'height',\n  'minHeight',\n  'maxHeight'\n])",description:"The property that should be used to set height of a slide component.",required:!1,defaultValue:"'height'"},{propName:"children",type:"element",description:"This should be a `Tabs` component with children of `Tab`. This is used to figure out which\ntab's content is currently visible.",required:!0},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the container as.",required:!0,defaultValue:"'section'"},{propName:"componentRef",type:"oneOfType([\n  func,\n  object\n])",description:"An optional ref callback to get reference to the top-most element of the rendered container.\nJust like other refs, this will provide null when it unmounts.\n\nThis is helpful if you'd like access the DOM node for a parent Component without needing to use\n`ReactDOM.findDOMNode`.",required:!1},{propName:"panelComponent",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render each `TabPanel` as.",required:!1},{propName:"toolbar",type:"element",description:"An optional toolbar to render above the tabs.",required:!1},{propName:"activeTabIndex",type:"controlled(PropTypes.number, 'onTabChange', 'defaultTabIndex')",description:"An optional active tab index to use. If this is defined, the component will be controlled\nand require the `onTabChange` prop to be defined.",required:!1},{propName:"onTabChange",type:"func",description:"An optional function to call when a new tab is selected by swiping or clicking a tab. When\na new tab has been clicked, the callback will include the active tab index, the tab's `id`,\nthe tab's `controlsId`, the tab's `children`, and the click event.\n\nIf the tab was changed by swiping, it will contain the new active tab index,\nthe tab's `id`, the tab's `controlsId` and the tab's `children`.\n\n```js\nonTabChange(newActiveTabIndex, tabId, tabControlsId, tabChildren, event);\n```",required:!1},{propName:"defaultTabIndex",type:"number",description:"The default tab index to use when the component is uncontrolled.",required:!0,defaultValue:"0"},{propName:"colored",type:"bool",description:"Boolean if the `toolbar` and `Tabs` should be cloned with `colored: true`.",required:!1},{propName:"themed",type:"bool",description:"Boolean if the `toolbar` should be applied with the theme color. This _really_ only\napplies when you create a `fixed` tabs container.",required:!1},{propName:"fixed",type:"bool",description:"Boolean if the tabs and the optional toolbar should be fixed to the top of the page.",required:!1},{propName:"labelAndIcon",type:"bool",description:"A boolean if a `fixed` `TabsContainer` has tabs with a label and an icon.",required:!1},{propName:"headerComponent",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"An optional component to render the fixed tabs header as.",required:!1},{propName:"headerZDepth",type:"between(PropTypes.number, 0, 5)",description:"The zDepth for the fixed tabs header.",required:!1,defaultValue:"1"},{propName:"swipeableViewsProps",type:"object",description:"Any additional props to apply to the SwipeableViews component. View the\n[SwipeableViews API](https://github.com/oliviertassinari/react-swipeable-views#api)\nfor valid attributes.\n\nYou will not be able to set the `style`, `className`, `slideStyle`, `index`,\nor `onChangeIndex` props for the SwipeableViews.\n\nThe styling and classnames can be updated with the other TabsContainer props.",required:!1}],description:"The `TabsContainer` component is used when you want to have your `Tabs` connected with\nthe `SwipeableViews`. This component will traverse the children subtree and extract out\nthe `children` from each tab, and render them in a swipeable container. However,\nsince this is using the `React.Children` traversal, You will have to keep the `Tabs`\nand `Tab` component as a direct descendent. You are unable to make a separate component\nthat encompasses the `Tab` component.\n\n```js\n// valid\n<TabsContainer>\n  <Tabs>\n    <Tab />\n  </Tabs>\n</TabsContainer>\n\n// invalid\n<TabsContainer>\n  <Tabs>\n    <MyCustomTab />\n  </Tabs>\n</TabsContainer>\n```\n\nThis is because it seems you are unable to access the `MyCustomTab`'s child Tab props correctly.\nYou can however have the tab's children as a separate component if you wish."},{id:"tabs",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tabs/Tabs.js",component:"Tabs",functions:[],enums:[],getters:[],props:[{propName:"tabId",type:"custom",description:"A base id to use for each `Tab`. When the child tabs are created, they are cloned\nwith some additional accessibility props. Each tab will get a prop with this and the\ncurrent index of the tab.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"activeTabClassName",type:"string",description:"The className to use when a tab is currently active. The default className does not\nactually apply any styles.\n\nIf this prop is set, it will override any `activeClassName` props applied to the child\n`Tab`s. Either set a custom `activeClassName` on each `Tab`, or use this prop to apply\nthe same `activeClassName` to each `Tab`.\n\n@see [Tab#activeClassName](/components/tabs?tab=1#tab-proptypes-active-class-name)",required:!1},{propName:"inactiveTabClassName",type:"string",description:"The className to use when the tab is not active and not selected. By default,\nthis will set inactive tabs' color to `$md-white-base`. This works great\nif the tabs are placed on a colored toolbar but fails when the tabs are not colored\nor on a white background. In these cases, it is recommended to change this value\nto `md-text--secondary` or some other class name.\n\nIf this prop is set, it will override any `inactiveClassName` props applied to the child\n`Tab`s. Either set a custom `inactiveClassName` on each `Tab`, or use this prop to apply\nthe same `inactiveClassName` to each `Tab`.\n\n@see [Tab#inactiveClassName](/components/tabs?tab=1#tab-proptypes-inactive-class-name)",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the tabs in.",required:!0,defaultValue:"'ul'"},{propName:"children",type:"oneOfType([\n  element,\n  arrayOf(element)\n])",description:"This should either be a single `Tab` component or a list of `Tab` components. Unfortunately,\nthe child *must* be exactly a `Tab` component because this is unable to extract the correct\n`label` and `children` from a custom `Tab` component.",required:!0},{propName:"centered",type:"bool",description:"Boolean if the tabs should be centered instead of aligned to the keyline. The tabs will\nonly be aligned to the keyline when there are more than 3 tabs and the `alignToKeyline`\nprop is `false`.",required:!1},{propName:"alignToKeyline",type:"bool",description:"Boolean if the tabs should align to a toolbar's title keyline. If this is undefined,\nthe tabs will try to align to the keyline when there are more than 3 tabs.",required:!1},{propName:"colored",type:"bool",description:"Boolean if the tabs should be colored with the primary color. If this is false or undefined,\nthe tabs will be colored for the light or dark theme.",required:!1},{propName:"overflowMenu",type:"bool",description:"A boolean if the overflow tabs on desktop displays should appear in a menu. If this is false,\nthe additional tabs will be available by using pagination buttons.",required:!1},{propName:"onTabChange",type:"func",description:"An optional function to call when the active tab is changed. The callback will include\nthe new active tab index and a click event.\n\n```js\nonTabChange(newTabIndex, event);\n```",required:!1},{propName:"activeTabIndex",type:"controlled(PropTypes.number, 'onTabChange', 'defaultTabIndex')",description:"An optional active tab index to use. If this is defined, it will make the component controlled\nand require the `onTabChange` prop to be defined.",required:!1},{propName:"defaultTabIndex",type:"number",description:"The default tab index to use when the component is uncontrolled.",required:!0,defaultValue:"0"},{propName:"nextIcon",type:"element",description:'When the `overflowMenu` prop is false, this will be used to render the "next slice of tabs"\nwhen there are too many tabs to display at once on desktop screens.',required:!1,defaultValue:"<FontIcon>keyboard_arrow_right</FontIcon>"},{propName:"previousIcon",type:"element",description:'When the `overflowMenu` prop is false, this will be used to render the "previous slice of tabs"\nwhen there are too many tabs to display at once on desktop screens.',required:!1,defaultValue:"<FontIcon>keyboard_arrow_left</FontIcon>"},{propName:"overflowMenuIcon",type:"element",description:"When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.\nThis will be to render the icon to the right of the label.",required:!1,defaultValue:"<FontIcon>arrow_drop_down</FontIcon>"},{propName:"overflowMenuLabel",type:"node",description:"When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.\nThis will be the text that displays as a tab.",required:!0,defaultValue:"'More'"},{propName:"indicatorHeight",type:"number",description:"This is the height for the active tab indicator underline. This should match the value of\n`$md-tab-indicator-height` set in SCSS.\n\n@see [$md-tab-indicator-height](/components/tabs?tab=2#variable-md-tab-indicator-height)",required:!1,defaultValue:"2"},{propName:"mobile",type:"bool",description:"Boolean if the tabs are currently rendered on a mobile or tablet device. This is used to calculate\noverflow/padding on the tabs.",required:!1},{propName:"defaultMedia",type:"deprecated(PropTypes.oneOf(['mobile')",description:"The `defaultMedia` prop has been deprecated and will be removed in the next major release.\n    \nmobile', 'tablet', 'desktop']), 'Use `mobile` instead.",required:!1},{propName:"desktopMinWidth",type:"deprecated(PropTypes.number)",description:"The `desktopMinWidth` prop has been deprecated and will be removed in the next major release.\n    \nUse `mobile` instead.",required:!1},{propName:"nextIconChildren",type:"deprecated(PropTypes.node)",description:"The `nextIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `nextIcon` prop instead.",required:!1},{propName:"nextIconClassName",type:"deprecated(PropTypes.string)",description:"The `nextIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `nextIcon` prop instead.",required:!1},{propName:"previousIconChildren",type:"deprecated(PropTypes.node)",description:"The `previousIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `previousIcon` prop instead.",required:!1},{propName:"previousIconClassName",type:"deprecated(PropTypes.string)",description:"The `previousIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `previousIcon` prop instead.",required:!1},{propName:"overflowMenuIconChildren",type:"deprecated(PropTypes.node)",description:"The `overflowMenuIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `overflowMenuIcon` prop instead.",required:!1},{propName:"overflowMenuIconClassName",type:"deprecated(PropTypes.string)",description:"The `overflowMenuIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `overflowMenuIcon` prop instead.",required:!1}],description:"The `Tabs` component is used to manage the state of which tab is currently active."},{id:"tab",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tabs/Tab.js",component:"Tab",functions:[],enums:[],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An id for the tab. This is required for a11y. If you use the `Tabs` component, this\nwill automatically be generated for you and injected into this component.",required:!1},{propName:"controlsId",type:"oneOfType([\n  number,\n  string\n])",description:"An id for a `TabPanel` that holds the children from this tab. This is required for a11y.\nIf you use the `Tabs` component, this will automatically be generated for you and injected\ninto this component.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"activeClassName",type:"string",description:"The className to use when the tab is currently active. The default className does\nnot actually apply any styles.\n\n@see [Tabs#activeTabClassName](/components/tabs?tab=1#tabs-proptypes-active-tab-class-name)",required:!1,defaultValue:"'md-tab--active'"},{propName:"inactiveClassName",type:"string",description:"The className to use when the tab is not active. By default, this will set inactive\ntabs' color to `$md-white-base`. This works great if the tabs are placed on a\ncolored toolbar but fails when the tabs are not colored or on a white background.\nIn these cases, it is recommended to change this value to `md-text--secondary`\nor some other class name.\n\n@see [Tabs#inactiveTabClassName](/components/tabs?tab=1#tabs-proptypes-inactive-tab-class-name)",required:!1,defaultValue:"'md-tab--inactive'"},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render as.",required:!0,defaultValue:"'li'"},{propName:"children",type:"node",description:"Any children to display once the tab has been selected.",required:!1},{propName:"icon",type:"element",description:"An optional icon to display in the tab. This can either be used alone, or it\nwill be placed above the `label` if both are given.",required:!1},{propName:"label",type:"oneRequired(PropTypes.node, 'icon')",description:"An optional label to display in the tab. This can either be used alone, or it\nwill be placed below the `icon` if both are given.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when the tab is clicked. The callback includes this tab's index,\nid, controlsId, children, and finally click event. All the additional parameters are included\nif you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed\nfor accessibility.\n\n```js\nonClick(index, id, controlsId, children, event);\n```",required:!1},{propName:"active",type:"bool",description:"Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically\ninjected.",required:!1},{propName:"index",type:"number",description:"Tab's index. If you use the `Tabs` component, this is automatically injected.",required:!1}],description:"The `Tab` component is used for rendering a single tab in the `Tabs` component.\nIt can optionally have either a `label`, an `icon` or both."},{id:"menu-tab",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tabs/MenuTab.js",component:"MenuTab",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id to give the tab's menu.",required:!1},{propName:"activeTabIndex",type:"number",description:"The current active tab index. This is used to determine which list item\nis active in the menu, and if the styles for an active tab should be applied\nto the menu.",required:!0},{propName:"overflowAtIndex",type:"number",description:"An tab index that caused the overflow to happen.",required:!0},{propName:"tabs",type:"arrayOf(oneOfType([\n  element,\n  string,\n    shape({\n    divider: bool,\n    subheader: bool,\n    primaryText: node\n  })\n]))",description:"A list of tabs that should be rendered in the menu once opened. This can either\nbe:\n\n- a `ListItem`, `Divider`, or `Subheader` component\n- a string to use as the `primaryText` for a list item\n- an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component",required:!0},{propName:"style",type:"object",description:"An optional style to apply to the menu.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the menu.",required:!1},{propName:"tabStyle",type:"object",description:"An optional style to apply to the tab in the menu.",required:!1},{propName:"tabClassName",type:"string",description:"An optional className to apply to the tab in the menu.",required:!1},{propName:"onClick",type:"func",description:"An optional function to call when the tab is clicked.",required:!1},{propName:"label",type:"node",description:"The label to display in the tab. This should normally be some text with\na drop down arrow next to it.",required:!0}],description:"The `MenuTab` component is used when there are too many desktop tabs\nto be displayed without any overflow. If the `Tabs` component is used,\nthis will automatically be included when the `menuOverflow` prop is true."},{id:"tab-panel",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tabs/TabPanel.js",component:"TabPanel",functions:[],enums:[],getters:[],props:[{propName:"id",type:"custom",description:"An id for the panel. This is used for a11y. This should equal the `controlsId`\nof whichever tab's children will be placed in here.",required:!1},{propName:"controlledById",type:"custom",description:"An id for the tab that owns this panel. This should equal the `id` of whichever\ntab's children will be placed in here.",required:!1},{propName:"style",type:"object",description:"An optional style to apply.",required:!1},{propName:"className",type:"string",description:"An optional className to apply.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the panel as.",required:!0,defaultValue:"'div'"},{propName:"active",type:"bool",description:"Boolean if the panel is currently active. This is used to generated the `aria-hidden`\nattribute.",required:!1},{propName:"children",type:"node",description:"Any children to display.",required:!1}],description:"This component is just a simple accessibility wrapper when using tabs. If you use the\n`TabsContainer` component, you *should* not manually use this as the `TabsContainer`\ngenerates this for you."}],"text-fields":[{id:"text-field",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/TextFields/TextField.js",component:"TextField",functions:[{name:"getField",type:"function",description:'A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\nThis is accessible if you use `refs`.\n\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label="Hello" />;\n\nthis._field.getField(); // `input` node\n```',returns:null,params:[]},{name:"focus",type:"function",description:'A helper function for focusing the `input` field or the `textarea` in the `TextField`.\nThis is accessibile if you use `refs`.\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label="Hello" />;\n\nthis._field.focus();\n```',returns:null,params:[]},{name:"blur",type:"function",description:'A helper function for blurring the `input` field or the `textarea` in the `TextField`.\nThis is accessible if you use `refs`.\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label="Hello" />;\n\nthis._field.blur();\n```',returns:null,params:[]}],enums:[],getters:[{name:"value",type:"getter",description:"Gets the current value from the text field. This is used when you have an uncontrolled\ntext field and simply need the value from a ref callback.",returns:{description:"the text field's value",type:"String"},params:[]}],props:[{propName:"id",type:"custom",description:"The id for a text field. This is required when using the `label` prop for accessibility,\nbut normally a good idea to include one anyways.",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the text field's container.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the text field's container.",required:!1},{propName:"inputStyle",type:"object",description:"An optional style to apply to the `input` or `textarea` tag.",required:!1},{propName:"inputClassName",type:"string",description:"An optional className to apply to the `input` or `textarea` tag.",required:!1},{propName:"value",type:"controlled(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n]), 'onChange')",description:"An optional value to apply to the text field. This will make the component\ncontrolled and require the `onChange` prop.",required:!1},{propName:"defaultValue",type:"oneOfType([\n  string,\n  number\n])",description:"An optional default value for the text field.",required:!1},{propName:"block",type:"bool",description:"Boolean if the text field should be displayed as a `block`. This is equivalent to\nthe `full width` text field in the Material Design specs. This view will disable\nfloating labels and remove the text divider from the component.",required:!1},{propName:"paddedBlock",type:"bool",description:"Boolean if the `block` text field should include padding to the left and right of\nthe text field.",required:!1},{propName:"disabled",type:"bool",description:"Boolean if the text field is currently disabled.",required:!1},{propName:"label",type:"invalidIf(PropTypes.node, 'block')",description:"An optional label to display with the text field. This will convert the text field\ninto a floating label text field. You can make it single line by only using the\n`placeholder` prop.",required:!1},{propName:"placeholder",type:"string",description:"An optional placeholder text to display in the text field. If there is no `label` prop,\nthe text field will be displayed as a single line text field. If there is a `label` prop,\nthis will only be visible when there is no value and the user focused the text field.",required:!1},{propName:"type",type:"oneOf([\n  'text',\n  'number',\n  'email',\n  'search',\n  'tel',\n  'url',\n  'password'\n])",description:"The type for the text field. This is one of the most import props for mobile accessibility\nas it will update the keyboard for the text type. This does not get applied on multiline\ntext fields.",required:!0,defaultValue:"'text'"},{propName:"onClick",type:"func",description:"An optional function to call when the text field's container triggers the `click` event.",required:!1},{propName:"onDoubleClick",type:"func",description:"An optional function to call when the text field's container triggers the `doubleclick`\nevent.",required:!1},{propName:"onTouchStart",type:"func",description:"An optional function to call when the text field's container triggers the `touchstart`\nevent.",required:!1},{propName:"onTouchMove",type:"func",description:"An optional function to call when the text field's container triggers the `touchmove`\nevent.",required:!1},{propName:"onTouchCancel",type:"func",description:"An optional function to call when the text field's container triggers the `touchcancel`\nevent.",required:!1},{propName:"onTouchEnd",type:"func",description:"An optional function to call when the text field's container triggers the `touchend`\nevent.",required:!1},{propName:"onMouseDown",type:"func",description:"An optional function to call when the text field's container triggers the `mousedown`\nevent.",required:!1},{propName:"onMouseUp",type:"func",description:"An optional function to call when the text field's container triggers the `mouseup`\nevent.",required:!1},{propName:"onMouseOver",type:"func",description:"An optional function to call when the text field's container triggers the `mouseover`\nevent.",required:!1},{propName:"onMouseLeave",type:"func",description:"An optional function to call when the text field's container triggers the `mouseleave`\nevent.",required:!1},{propName:"onChange",type:"func",description:"An optional onChange function to call. If the `value` prop is defined, this is\nrequired.\n\nWhen the value changes in the text field, this will be called with the new text\nfield's value and the change event.\n\n```js\nonChange(e.target.value, e);\n```",required:!1},{propName:"onBlur",type:"func",description:"An optional function to call when the text field is blurred.",required:!1},{propName:"onFocus",type:"func",description:"An optional function to call when the text field is focused.",required:!1},{propName:"active",type:"bool",description:"An optional boolean if the `active` state of the text field can be externally\nmodified as well. The text field is usually considered active when it gains focus.\n\nIf this prop is set, it will check both the active prop and the active state to\ndetermine if one is true.",required:!1},{propName:"error",type:"bool",description:"An optional boolean if the `error` state of the text field can be externally\nmodified as well. The text field is usually considered errored when it is required\nand there is no value or the current length of the text field's value is greater\nthan the `maxLength` prop.\n\nIf this prop is set, it will check both the error prop and the error state to\ndetermine if one is true.",required:!1},{propName:"floating",type:"bool",description:"An optional boolean if the `floating` state of the text field's floating label can be\nexternally modified as well. The floating state is true when the text field gains focus\nor there is a value in the text field.\n\nIf this prop is set, it will check both the floating prop and the floating state to\ndetermine if one is true.",required:!1},{propName:"required",type:"bool",description:"Boolean if the text field is required. If the user blurs the text field while there is\nno value and it is required, the `error` state will be set to true.",required:!1},{propName:"lineDirection",type:"oneOf([\n  'left',\n  'center',\n  'right'\n])",description:"The direction that the underline should appear from.",required:!0,defaultValue:"'left'"},{propName:"leftIcon",type:"element",description:"An optional icon to place to the left of the text field.",required:!1},{propName:"leftIconStateful",type:"bool",description:"Boolean if the left icon should be stateful. This means that the icon will\ngain the active or error colors with the text field.",required:!1,defaultValue:"true"},{propName:"rightIcon",type:"element",description:"An optional icon to place to the right of the text field.",required:!1},{propName:"rightIconStateful",type:"bool",description:"Boolean if the right icon should be stateful. This means that the icon will\ngain the active or error colors with the text field.",required:!1,defaultValue:"true"},{propName:"passwordIcon",type:"oneOfType([\n  element,\n    shape({\n    invisible: element,\n    visible: element\n  })\n])",description:"The icon to use for a password text field.\n\nAlternatively, two separate elements may be used to change between\nthem based on the value of the `passwordVisible` state variable.",required:!1,defaultValue:"<FontIcon>remove_red_eye</FontIcon>"},{propName:"passwordInitiallyVisible",type:"bool",description:"Boolean if the password is initially visible.",required:!1},{propName:"fullWidth",type:"bool",description:"Boolean if the text field should be displayed as full width.",required:!1,defaultValue:"true"},{propName:"rows",type:"minNumber(1, false)",description:"The number of rows for the `multiline` text field. This value must be greater than\nor equal to 1. When this value is set, the text field will be converted to a multiline\nfield.",required:!1},{propName:"maxRows",type:"number",description:"The maximum number of rows for a `multiline` text field. If this value is\n`undefined`, `0`, or a number less than `0`, the multiline text field will\ninfinitely expand.",required:!1},{propName:"customSize",type:"string",description:"An optional custom size to apply to the text field. This is used along with\nthe `$md-text-field-custom-sizes` variable. It basically applies a className of\n`md-text-field--NAME`.",required:!1},{propName:"errorText",type:"node",description:"An optional error text to display below the text field. This will only appear when\nthe text field has the `error` state through the `error` prop, the current length\nof the text field's value is greater than the `maxLength` prop, or the field is\nrequired and the user blurs the text field with no value.",required:!1},{propName:"helpText",type:"node",description:"An optional help text to display below the text field. This will always be visible\nunless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.",required:!1},{propName:"helpOnFocus",type:"bool",description:"Boolean if the help text should display on focus only.",required:!1},{propName:"maxLength",type:"number",description:"An optional max length for the text field. This will insert a counter underneath the\ntext field that appears on focus.",required:!1},{propName:"inlineIndicator",type:"element",description:"An optional element to display inside of the `TextField` to the farthest right. This will\nposition the indicator absolutely and add some additional padding to the `TextField`.",required:!1},{propName:"resize",type:"shape({\n  min: number,\n  max: number.isRequired,\n  disableShrink: bool\n})",description:"This prop allows the text field to resize its width to stay between the min and max sizes provided. By\ndefault, the field will expand and collapse based on the amount of text provided. The collapsing can\nbe disabled by providing `disableShrink` to the configuration object.\n\nIf the `min` prop is not provided, it will default to `180` which is about the same size as a default\ntext field.",required:!1},{propName:"toolbar",type:"bool",description:"Boolean if the TextField is in a toolbar and acting as a title. This will apply additional styles to the\ntext field to make it look like the toolbar's title.",required:!1},{propName:"passwordIconChildren",type:"deprecated(PropTypes.node)",description:"The `passwordIconChildren` prop has been deprecated and will be removed in the next major release.\n    \nUse the `passwordIcon` prop instead.",required:!1},{propName:"passwordIconClassName",type:"deprecated(PropTypes.string)",description:"The `passwordIconClassName` prop has been deprecated and will be removed in the next major release.\n    \nUse the `passwordIcon` prop instead.",required:!1},{propName:"icon",type:"deprecated(PropTypes.node)",description:"The `icon` prop has been deprecated and will be removed in the next major release.\n    \nUse the `leftIcon` or `rightIcon` prop instead.",required:!1},{propName:"floatingLabel",type:"deprecated(PropTypes.bool)",description:"The `floatingLabel` prop has been deprecated and will be removed in the next major release.\n    \nThe `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop.",required:!1},{propName:"adjustMinWidth",type:"deprecated(PropTypes.bool)",description:"The `adjustMinWidth` prop has been deprecated and will be removed in the next major release.\n    \nManually add a min width style instead.",required:!1}],description:"The `TextField` component can either be a single line `input` field or a multiline\n`textarea` field. `FontIcon`s, messages, and password indicators can also be added\nto this field.\n\nThe optional mouse and touch events will be added to the entire container while the\ntext specific events will be added to the `input` or `textarea` tags."}],toolbars:[{id:"toolbar",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Toolbars/Toolbar.js",component:"Toolbar",functions:[],enums:[],getters:[],props:[{propName:"id",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to provide to the toolbar. If this is specified and the `titleId` is not, the title\nwill gain an id of `${id}-title`. This will not be applied to the `titleMenu`.\n\n@see [titleId](#toolbar-proptypes-title-id)",required:!1},{propName:"style",type:"object",description:"An optional style to apply to the toolbar.",required:!1},{propName:"className",type:"string",description:"An optional className to apply to the toolbar,",required:!1},{propName:"titleStyle",type:"object",description:"",required:!1},{propName:"titleClassName",type:"string",description:"",required:!1},{propName:"prominent",type:"bool",description:"Boolean if the toolbar should more prominent. This will double the height of the toolbar.",required:!1},{propName:"prominentTitle",type:"bool",description:"Boolean if the toolbar's title should be more prominent. This will move the title to the\nsecond line of the toolbar. This only works when the `prominent` prop is true as well.",required:!1},{propName:"title",type:"invalidIf(PropTypes.node, 'titleMenu')",description:"The current title of the page to show in the toolbar. It is invalid to specify both a\n`title` and a `titleMenu`. Only one should be given.",required:!1},{propName:"titleId",type:"oneOfType([\n  number,\n  string\n])",description:"An optional id to give the main title in the toolbar. This will not be applied to the\n`titleMenu`.",required:!1},{propName:"titleMenu",type:"element",description:"An optional title menu to display instead of the title. This should be a `SelectField` component.\nIt is cloned with some additional props, so if the `SelectField` is separated into a separate\ncomponent, the following props must be passed to get the correct styling: `className`, `block`,\n`paddedBlock`, `position`.",required:!1},{propName:"nav",type:"element",description:"This prop is used for rendering an optional navigation button to the left of the `title`\nor the `titleMenu` component. This needs to be an icon `Button` because some additional props\nare cloned into it.",required:!1},{propName:"actions",type:"oneOfType([\n  element,\n  arrayOf(element)\n])",description:"Any additional actions to display to the right of the title. This should be a list or a single\n`Button` to display. The buttons get cloned with an additional className for toolbar styling.",required:!1},{propName:"children",type:"node",description:"Any children to display in the toolbar. This will be displayed between the optional title and\nactions.",required:!1},{propName:"fixed",type:"bool",description:"Boolean if the toolbar should be fixed to the top of the page. This will add some additional box shadow.",required:!1},{propName:"singleColor",type:"bool",description:"Boolean if the nav, actions, and title should share the same color. For a `colored` or dark `themed`\ntoolbar, they will all be colored white. For a transparent or light `themed` toolbar, the colors will\nbe the `rgba(0, 0, 0, .87)`. Setting this to false will only style the title to the specific color\nstated above.",required:!1,defaultValue:"true"},{propName:"themed",type:"bool",description:"Boolean if the toolbar should be colored based off the current theme. This will either style the background\nto be fairly white, or fairly black. You can not specify both `themed` and `colored`.",required:!1},{propName:"colored",type:"invalidIf(PropTypes.bool, 'themed')",description:"Boolean if the toolbar should be colored with the `$md-primary-color`.",required:!1},{propName:"component",type:"oneOfType([\n  func,\n  string,\n  object\n])",description:"The component to render the toolbar as.",required:!0,defaultValue:"'header'"},{propName:"inset",type:"bool",description:"Boolean if the toolbar is inset in the page. This will just add some margin around\nit.",required:!1},{propName:"zDepth",type:"between(PropTypes.number, 0, 5)",description:"An optional zDepth to enforce for the toolbar. This should be a number between 0 and 5.\nIf this is omitted, the toolbar will gain a zDepth of 2 when `fixed`.",required:!1},{propName:"containerStyle",type:"deprecated(PropTypes.object)",description:"The `containerStyle` prop has been deprecated and will be removed in the next major release.\n    \nThe `container` no longer exists in the `Toolbar`. Use the `style` prop instead.",required:!1},{propName:"containerClassName",type:"deprecated(PropTypes.string)",description:"The `containerClassName` prop has been deprecated and will be removed in the next major release.\n    \nThe `container` no longer exists in the `Toolbar`. Use the `className` prop instead.",required:!1},{propName:"primary",type:"deprecated(PropTypes.bool)",description:"The `primary` prop has been deprecated and will be removed in the next major release.\n    \nUse the `colored` prop instead.",required:!1},{propName:"secondary",type:"deprecated(PropTypes.bool)",description:"The `secondary` prop has been deprecated and will be removed in the next major release.\n    \nToolbars can no longer be themed to the secondary color. Use the `colored` prop instead.",required:!1},{propName:"actionLeft",type:"deprecated(PropTypes.element)",description:"The `actionLeft` prop has been deprecated and will be removed in the next major release.\n    \nUse the `nav` prop instead.",required:!1},{propName:"actionsRight",type:"deprecated(PropTypes.node)",description:"The `actionsRight` prop has been deprecated and will be removed in the next major release.\n    \nUse the `menu` prop and/or the `actions` prop instead.",required:!1}],description:""}],tooltips:[{id:"inject-tooltip",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tooltips/injectTooltip.js",component:"injectTooltip",functions:[{name:"getComposedComponent",type:"function",description:"Gets the composed component as a ref. This is useful if you need to access the ref of the\ncomposed component instead of the `injectTooltip` HOC to use some publicly accessible methods.\n\n```js\n<SomeTooltippedComponent\n  ref={tooltipHOC => {\n    tooltipHOC.getComposedComponent().focus();\n  }}\n/>\n```\n\n> NOTE: This can be `null`, so make sure to do a null check before using.",returns:null,params:[]}],enums:[],getters:[],props:[{propName:"tooltipContainerStyle",type:"object",description:"An optional style to apply to the tooltip container.",required:!1},{propName:"tooltipContainerClassName",type:"string",description:"An optional className to apply to the tooltip container.",required:!1},{propName:"tooltipStyle",type:"object",description:"An optional style to apply to the tooltip itself.",required:!1},{propName:"tooltipClassName",type:"string",description:"An optional className to the tooltip itself.",required:!1},{propName:"tooltipLabel",type:"node",description:"The tooltip to display. If omitted, the `tooltip` prop will not be injected.",required:!1},{propName:"tooltipDelay",type:"custom",description:"The amount of delay before the tooltip will appear on hover, touch, or keyboard focus.",required:!1},{propName:"tooltipPosition",type:"custom",description:"The position that the tooltip should appear related to the composed component.",required:!1},{propName:"tooltipTransitionEnterTimeout",type:"custom",description:"The transition time for the tooltip appearing.",required:!1},{propName:"tooltipTransitionLeaveTimeout",type:"custom",description:"The transition time for the tooltip disappearing.",required:!1}],description:"Takes any component and injects a tooltip container as a prop. The tooltip container\nwill add event listeners for touch, mouse, and keyboard events so that a tooltip will appear\nin the ComposedComponent.\n\nIf the `tooltipLabel` prop is omitted, the tooltip and event listeners will not\nbe included.\n\n```js\n@param {function} ComposedComponent the component to compose with the tooltip functionality.\n@return {function} the ComposedComponent with a tooltip.\n```"},{id:"tooltipped",source:"https://github.com/mlaursen/react-md/blob/v1.18.1/src/js/Tooltips/Tooltipped.js",component:"Tooltipped",functions:[],enums:[],getters:[],props:[{propName:"children",type:"element",description:"A component/element the tooltip should be linked to.",required:!0},{propName:"label",type:"node",description:"Tooltip's content.",required:!1},{propName:"setPosition",type:"bool",description:"Whether `position: relative` should be added to the `style` property of the wrapped component.",required:!1}],description:"Adds a tooltip for a component/element given as the only child.\n\nThe component should render its children, or the tooltip will not be shown.\nAlso the component should be positioned by `className` or `style`\n(CSS property `position` should have value `relative`, `absolute` or `fixed`),\nor the tooltip can appear incorrectly.\nUse `setPosition={true}` to automatically add `position: 'relative'` to the `style` of the wrapped component.\n\nBesides of `children` and `setPosition` all props set for `Tooltipped` component are passed through\nto `TooltipContainer` that is added as a child of the wrapped component and controls the tooltip.\n\n```js\n<Tooltipped\n  label=\"Tooltip for text\"\n  position=\"left\"\n  delay={1000}\n>\n  <span style={{position: 'absolute', top: '10px', left: '70%'}}>\n    Some text\n    <div>Another line of text</div>\n  </span>\n</Tooltipped>\n```\n\n```js\n<Tooltipped\n  setPosition={true}\n  label=\"Avatar's tooltip\"\n  position=\"top\"\n>\n  <span style={{marginLeft: '30px'}}>\n      <Avatar random>T</Avatar>\n  </span>\n</Tooltipped>\n```"}]}}});
//# sourceMappingURL=1.3e05760f.min.js.map