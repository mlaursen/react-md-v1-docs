[{"name":"Menu Completion View","type":"Autocomplete Example","description":"\nThis example shows how you can use the two built in filters or a 3rd party library to do text matching. When\nthe user starts typing, the `Autocomplete` will search the list of `data` for any text matching the current\nvalue. For this example, all the filtered data and results will appear in a drop down menu.\n  ","ref":"/components/autocompletes#menu-completion-view"},{"name":"Inline Completion View","type":"Autocomplete Example","description":"\nThis example shows how a completion can be done inline instead. By default, the autocomplete will find the first\nmatch and display it. It can be autocompleted by either:\n  - pressing the tab key on desktops\n  - tapping the selection text on touch devices\n\nThe default `findInlineSuggestion` function just does a simple ignore case matching. See the \n[propTypes tab](/components/autocompletes?tab=1#autocomplete-proptypes-find-inline-suggestion) for more information.\n  ","ref":"/components/autocompletes#inline-completion-view"},{"name":"Toolbar Search","type":"Autocomplete Example","description":"\nThis example will show how you can use Autocompletes in a toolbar for applications that have a primary function\nof searching and how you can modify the list items for highlighting search results.\n  ","ref":"/components/autocompletes#toolbar-search"},{"name":"Using \"Smart\" Menus","type":"Autocomplete Example","description":"\nStarting with 1.1.0, [Menus](/components/menus) have been updated with some additional logic to \"smartly\" position\nthemselves within the viewport. This feature is disabled by default due to weird mobile issues and backwards\ncompatibility.\n\nThe \"smart\" menus are pretty fantastic on desktop devices and works like a charm. The autocomplete menu will either\ndisplay below the text field (default) or above the text field if it is near the bottom of the page. As the user types,\nthe list size might shrink and automatically position itself below the text field when there is enough space below.\n\nMobile devices are a pain on the other hand. Android and iOS calculate the viewport height differently and iOS doesn't\nshrink the viewport height when the soft keyboard is visible while Android does. This means that the default behavior\nwould make Android devices automatically close their list or position the list off the screen when the user types or\nfocuses the text field. It _works_ decently on iOS but most of the list items will not be visible. It becomes even worse\nif the Autocomplete is fixed in a toolbar.  This website's search component actually uses the \"smart\" menu due to the\nfact that most of my traffic is developers and desktop users.\n\nSince I actually prefer the Android calculation of viewport height and the majority of this website's mobile traffic is\nAndroid, the main search works pretty well with some additional props applied to the \"smart\" menu. The Autocomplete can\nattempt to fill the entire viewport (left, right, top, bottom) by enabling the `fillViewportWidth` and `fillViewportHeight`\nprops. This will apply the following styles to the list (with some additional checks for page positioning):\n\n```js\nconst styles = {\n  left: this.props.minLeft,\n  right: this.props.minRight,\n  top: this.props.minTop,\n  bottom: this.props.minBottom,\n};\n```\n\nSince Android decreases the viewport height to exclude the soft keyboard, the autocomplete list will fill the entire viewport.\niOS will have the menu items flow underneath the keyboard limiting the amount of scrolling the user can do.\n\n### Summing it up\n- \"smart\" menus pretty great desktop\n- \"smart\" menus unpredictable between mobile OS due to viewport height calculation\n\nCheck out how this programming autocomplete interacts compared to the first example and the differences the main website\nworks on desktop vs mobile.\n  ","ref":"/components/autocompletes#using-smart-menus"},{"name":"Simple","type":"Avatar Example","description":"","ref":"/components/avatars#simple"},{"name":"Random","type":"Avatar Example","description":"","ref":"/components/avatars#random"},{"name":"Simple","type":"Badge Example","description":"\nThe main use case for the badge is to create a notification component.  When the badge\ncontent is set to a number, it will automatically be truncated to `max` prop value.\nIf the number is greater than the `max`, it will be displayed as ``${max}`+`.\nThis is really only done to get the number within the bubble. The bubble size can be\nchanged via Sass.\n\nEven though the main use case of the badge is for notifications, you can also float\nany content. However, it will be up to you to position correctly with additional styles\nor class names.\n","ref":"/components/badges#simple"},{"name":"Notification Dialog Example","type":"Badge Example","description":"\nThis is an example of how you might want to use the `Badge` component to display\nnotifications within you app. It links together with the `Dialog` component to\ndisplay a list of _new_ content that happened since the last visit.\n","ref":"/components/badges#notification-dialog-example"},{"name":"Fixed BottomNavigation","type":"BottomNavigation Example","description":"\nThis example shows a fixed BottomNavigation. This means that all the labels and icons will always be visible\ninstead of dynamically hiding when the user scrolls or only showing the label for the active tab. The\nactive tab will change its color to the `$md-primary-color` and increase the font size to show prominence.\nWhen a tab is clicked, the ink effect will only stay within the tab itself.\n\nWhen using the `BottomNavigation`, you can apply the `.md-bottom-navigation-offset` class name to an element\nto add `padding-bottom` to offset the content for the `BottomNavigation`.\n\n**When using an icon, the `inherit` prop will be cloned into it to get correct styling. If you do not use the base\n`FontIcon` or `SVGIcon`, make sure to pass props to your icon, or provide the `inherit` prop yourself.**\n  ","ref":"/components/bottom-navigations#fixed-bottom-navigation"},{"name":"Shifting BottomNavigation","type":"BottomNavigation Example","description":"\nThis example shows a shifting BottomNavigation. This means that only the active tab will display a label. With\nthe help of the `react-md-theme-bottom-navigations-colored` mixin, you can even have the theme of the bottom\nnavigation change with each click. Just for funs.\n\nIf you have a mobile device or an emulator, this example also shows off the `dynamic` version of the bottom navigation.\nWhen the user scrolls down the page, the navigation will hide. The navigation can be viewed again after a small scroll\nupwards.\n\n> NOTE: The `BottomNavigation` is a **MOBILE ONLY** component so it only has event listeners for touch events.\n  ","ref":"/components/bottom-navigations#shifting-bottom-navigation"},{"name":"React Router Example","type":"BottomNavigation Example","description":"\nSince this is a **navigation** component, the bottom navigation can be updated to be used with `react-router`.\nThis example will be exactly the same as the shifting example above, just using `react-router`'s `Link` and\n`Route` components to change the index and figure out which components to render.\n\nSince my site uses path params to fetch documentation/examples/SassDoc, you will need to navigate to a different\nroute to actually view the demo. Please click the link below to see this example in action. The code for the example\nis still available here by clicking the code expander button.\n  ","ref":"/components/bottom-navigations#react-router-example"},{"name":"Flat Buttons","type":"Button Example","description":"","ref":"/components/buttons#flat-buttons"},{"name":"Raised Buttons","type":"Button Example","description":"","ref":"/components/buttons#raised-buttons"},{"name":"Icon Buttons","type":"Button Example","description":"","ref":"/components/buttons#icon-buttons"},{"name":"Floating Buttons","type":"Button Example","description":"","ref":"/components/buttons#floating-buttons"},{"name":"Simple","type":"Card Example","description":"","ref":"/components/cards#simple"},{"name":"Card with Media","type":"Card Example","description":"\nThis example shows how you can use the `Card` components alongside the `Media`\ncomponents to display images or videos in a card.\n  ","ref":"/components/cards#card-with-media"},{"name":"Expandable","type":"Card Example","description":"\nOnly the `CardTitle` and `CardActions` have built-in support to act as expanders\nby injecting an icon button to toggle the expansion when the `expander` prop is\nenabled. When the user clicks the expander icon, any following top-level components\nthat have `expandable` enabled on them will be collapsed/visible.\n  ","ref":"/components/cards#expandable"},{"name":"Complex Example","type":"Card Example","description":"","ref":"/components/cards#complex-example"},{"name":"Simple","type":"Chip Example","description":"","ref":"/components/chips#simple"},{"name":"With Text Fields","type":"Chip Example","description":"","ref":"/components/chips#with-text-fields"},{"name":"Simple Plain Table","type":"DataTable Example","description":"\nWhen a table has the `plain` prop enabled on tables, it will just set the min-height of each cell\nto the [$md-data-table-plain-column-height](?tab=2#variable-md-data-table-plain-column-height),\nallow line wrapping, and centers the content vertically in the cell.\n  ","ref":"/components/data-tables#simple-plain-table"},{"name":"Simple Selectable Table","type":"DataTable Example","description":"\nThis example will showcase a selectable table. Checkboxes will be injected as the first cell into\neach row. To help with accessibility, the `baseId` prop is now required on the table so that each\ncheckbox is updated with a unique id and a common name. Non-plain data tables have a height set to\n[$md-data-table-column-height](?tab=2#variable-md-data-table-column-height)\nand prevent text wrapping.\n\nYou can also update the selectable table to be `indeterminate` which basically updates the \"select all\"\ncheckbox to be in an \"indeterminate\" state when not all the rows have been checked.\n  ","ref":"/components/data-tables#simple-selectable-table"},{"name":"Simple Pagination","type":"DataTable Example","description":"\nWhen you have large datasets, you can improve some of your app's performance by paginating your results and\nlimiting the number of rows displayed at a time. This example shows how you can work with the `TablePagination`\ncomponent and its API to easily accomplish this.\n\nThis component will be displayed at as a `<tfoot>` and attached to the bottom of the table. It will allow the user\nto paginate forwards or backwards by a preset number of rows. The default is to start at `10` rows per page and allows\nfor `10`, `20`, `30`, `40`, `50`, and `100` by default (both of these can be configured).\n\nIn addition, this example introduces a new styling prop: [selectable](?tab=1#table-row-proptypes-selectable). By default\nnon-plain DataTables are `selectable` which means the checkbox will be automatically injected into the first cell of\neach row. Sometimes you want the styles of a non-plain `DataTable` but without the checkboxes. By disabling the\n`selectable` prop on each row, the non-plain styles will be applied and checkboxes will not be shown.\n","ref":"/components/data-tables#simple-pagination"},{"name":"Sortable Tables","type":"DataTable Example","description":"\n`DataTable`s can become sortable by applying the `sorted` prop to one-to-many of the `TableColumn` that appear in the\n`TableHeader`. If the `sorted` prop is a `boolean`, it will inject a sort icon before the content in the column. When\nthe `sorted` prop is `true`, it will assume that the content is sorted \"ascending\" while `false` will assume \"descending\".\nThis will also update the column with the corresponding `aria-sort` value. You can then just add a simple `onClick` handler\nto your `TableColumn` to change the sort direction.\n  ","ref":"/components/data-tables#sortable-tables"},{"name":"Editable Content Tables","type":"DataTable Example","description":"\nThis example will show how you can create a table with editable content by using the additional\ntable components: `EditDialogColumn` and `SelectFieldColumn`. Both of these components will\nattempt to stay within the viewport and automatically close if they are scrolled out of view\nwhile open. In addition, this example showcases another styling prop: [grow](?tab=1#table-column-proptypes-grow).\n\nWhen you have many columns in your `DataTable` and it is not a plain table, it is recommended to\napply `grow` to **one** of your column headers. Due to how the html `<table>` automatically attempts\nto size each cell, you can end up the \"Select All Checkbox\" being offset from all the other cells.\nEnabling `grow` on one cell will allow it to fill all missing space in the table and only allow\ncells to be sized based on content and padding.\n\nThese two components utilize the `baseId` to automatically inject unique ids into each field.\nEach `SelectField` will gain an id of `${baseId}-${rowIndex}-${columnIndex}-select-field`.\nEach `EditDialogColumn` will generate an id of `${baseId}-${rowIndex}-${columnIndex}-edit-dialog`\nfor the dialog and `${baseId}-${rowIndex}-${columnIndex}-edit-dialog-field` for the field in\nthe dialog. If these do not suit your needs, you can still override them manually as props.\n\nThe `SelectFieldColumn` is just a simple wrapper of a `TableColumn` and a `SelectField` but\nit does some work behind the scenes to work with the `Layover` component. All of the props are\nbasically the same as the `SelectField` and can be used the same way.\n\nFor more information about the `EditDialogColumn` types, please see the [next example](#edit-dialog-examples).\n  ","ref":"/components/data-tables#editable-content-tables"},{"name":"Edit Dialog Examples","type":"DataTable Example","description":"\nEdit dialogs have some built in interactions for handling saves and keyboard support. By default,\nthe value in the dialog is saved automatically whenever the dialog is closed with any interaction\n**except** for pressing the escape key or hitting the cancel button in large edit dialogs. So this\nmeans that if the user clicks somewhere else on the page, presses enter, or scrolls the page, the\nvalue will be saved. The dialog can be updated so that the cancel action happens if a user presses\ntab, clicks somewhere else on the page, or scrolls the page instead.\n\n### Types\n**Edit Dialogs are a mainly desktop interface**. Due to the weirdness in how different mobile devices\nhandle keyboards, the `dialog` versions of the `EditDialogColumn` do not work on mobile devices.\nUse the `inline` mode stated below, or go for a better interface on mobile with a row card edit view.\n\n#### Default\nThe default `EditDialog` will just be a small dialog that displays a text field with minimal padding.\n\n#### Large\nA large `EditDialog` will require a `title` prop to display above the text field and then create\na footer including a cancel and ok button.\n\n#### Inline\nIf you want to keep the UI simple, you can create inline edit dialogs which just display a text field\nin the cell instead of creating a dialog (so the `EditDialog` is sort of a bad name by this point).\nBy default, a pencil icon will be added to the right side of the text field to indicate that it can\nbe typed into (this can also be removed via props).\n\n### Keyboard Interactions\nWhen the user tab-focuses the edit dialog column, the dialog will automatically be opened and the\ntext field will be focused for text edits. If the user presses tab in an `inline` or non-`large`\ndialog, the dialog will be closed and the save interaction will be triggered (unless it is switched to\ndo cancel on outside interactions described above). In any case, if the user presses the escape key,\nthe dialog will be closed and the cancel action will be called. Since it is sometimes better to not automatically\nopen the dialog immediately after tab-focus, the auto-open feature can be disabled by disabling `visibleOnFocus`\nso the user is required to press space or enter to open the edit dialog.\n\nWhen the dialog is set to `large`, the tab interactions will be \"trapped\" within the dialog until the\nuser selects the ok or cancel button (or presses enter on the text field). The dialog can still be closed\nby pressing the escape key to cancel any cell edits.\n\nWhen the dialog is set to `inline`, tabbing will always save the data and pressing escape will call the\ncancel action.\n\n\n### TextField\nThe `EditDialogColumn` uses the [TextField](/components/text-fields) behind the scenes and correctly\napplies all the props to the text field. This means you can integrate help text, error messages, counters,\nmultiline fields, etc for the this component as well.\n  ","ref":"/components/data-tables#edit-dialog-examples"},{"name":"Tables With Menus","type":"DataTable Example","description":"\nIf you want to use menus within the `DataTable`, it is recommended to use the provided helper components\nto help out. Since the `DataTable` is responsive by default and allows for scroll bars, there can be some\nweird behavior without them since they use the [Layover](/components/helpers/layovers). The helper components\nautomatically attempt to position themselves related to the `DataTable` as well as injecting unique ids\nlike the other form inputs for the table. Check out the example below to see how to use the `MenuButtonColumn`\nand `DropdownMenuColumn` components.\n  ","ref":"/components/data-tables#tables-with-menus"},{"name":"Dynamic Content Table","type":"DataTable Example","description":"\nOne of the use cases of tables is to have dynamic content that can be added or removed. There is a component built to\nhelp with this named the `TableCardHeader` which works well with the `DataTable`'s selectable rows. The `TableCardHeader`\nwas built to display an optional title and any children in a `CardTitle` component until it is toggled to a \"contextual\" view\nwhere another title and any additional actions can be displayed. A great example of this is when rows in the `DataTable` are\nselected and you would like to allow the user to delete them.\n\nThis example will show how you can integrate `DataTable`s into `Card`s (with built in styling changes) and allow the user\nto add/remove rows from the table.\n\n> NOTE: One of the problems with the built-in checkbox support is that it uses `React`'s `context` to push the changes\ndown to each component. However if you ever use `shouldComponentUpdate` or a `PureComponent`, these changes won't be\npersisted to the child components since they block context updates. It is recommended to take full control instead.\n  ","ref":"/components/data-tables#dynamic-content-table"},{"name":"Simple List Dialog","type":"Dialog Example","description":"\nA *simple* dialog is just a dialog that adds no additional functionality and just renders its children\nwhen visible. The most basic use case is to render a list of some sort.\n  ","ref":"/components/dialogs#simple-list-dialog"},{"name":"Dialog with Actions","type":"Dialog Example","description":"\nA dialog can be updated to have additional actions. These are normally some sort of cancel/confirm buttons that\nappear at the bottom of the dialog.\n  ","ref":"/components/dialogs#dialog-with-actions"},{"name":"Controlling Dialog Focus","type":"Dialog Example","description":"\nThe `Dialog` component uses the [FocusContainer](/components/helpers/focus-containers) to trap keyboard\nfocus in the dialog while it is visible. By default, it will attempt to focus the first \"focusable\" item\nin the dialog.\n\nThe following example shows how you can change some of the props to change the focus target, disable the focus\ntrapping, or manually focus something instead of relying on the component to focus on mount.\n","ref":"/components/dialogs#controlling-dialog-focus"},{"name":"Modal Dialog","type":"Dialog Example","description":"\nA dialog can be updated so that a user **must** click one of the actions to be able to hide the dialog. They will\nno longer be able to click the overlay to close it.\n  ","ref":"/components/dialogs#modal-dialog"},{"name":"Scrolling Content and Sizing","type":"Dialog Example","description":"\nWhen there is a lot of content in a `Dialog`, it will automatically attempt to update the height of the content\nso that only it scrolls. It will make it so that the `title` and `actions` will be fixed within the dialog\nand only the `children` of the `Dialog` will scroll. If you want to implement your own solution, you can\ndisable the `autosizeContent` prop.\n\nIn addition, the sizing of the dialogs can always be controlled globally at a CSS level, or a `className` level,\nbut there are one-off cases where it is simpler to just apply sizing for a specific dialog. This can be done by using\nthe `height` and `width` props which will just apply some inline-styles to set the size. These values will still\nstay within the `max-height` and `max-width` rules applied to dialogs, so you can set a large size for desktop and\nit will auto-scale down for mobile devices.\n  ","ref":"/components/dialogs#scrolling-content-and-sizing"},{"name":"Simple Full Page Dialog","type":"Dialog Example","description":"\nA dialog can be converted into a full-page dialog by enabling the `fullPage` prop. The dialog is \"dumbed\" down\nwhen displaying in full page and no longer allows for the `actions` prop to be provided. It will just display\nany content in the children instead.\n  ","ref":"/components/dialogs#simple-full-page-dialog"},{"name":"Static Dialog Usage","type":"Dialog Example","description":"\nThe default export from the dialogs module is a wrapper for dynamically displaying the dialog as a full page element,\nor creating some overlay and displaying the dialog inside. There is also the base `Dialog` element that can be used.\nThis element will always be visible and can be styled/placed with your own styles.\n  ","ref":"/components/dialogs#static-dialog-usage"},{"name":"Nested Dialogs","type":"Dialog Example","description":"\nOne of the features of the `Dialog` is to automatically prevent scrolling of all content underneath\nthe dialog. Normally this will just disable scrolling on the window and hide the scrollbars. However,\nthis can cause problems when dialogs are nested since it will prevent scrolling on the parent dialog which\napplies some styles that might mess up the layout.\n\nTo get nested dialogs working, you will need to apply:\n```jsx\nportal={true}\nlastChild={true}\ndisableScrollLocking={true}\nrenderNode={document.body} // or whatever render node you want\n```\n\nto the inner dialogs. Each of these props are applied to fix some part of the layout bug. Due to\neach browser calculationg view height and view-width differently, the dialog's size is based on\nfixing the dialog to a parent element. In most cases this will be the full window size and work as expected,\nhowever some browsers treat `position: fixed` as a new relative container for nested `position: fixed` elements.\nThis means that a nested dialog would have a max height and width of the parent dialog instead of the full page size.\nEnabling the `portal` prop and setting the `renderNode={document.body}` will make this inner dialog appear outside\nof the parent dialog and fully expand to the window size. The next problem is that now it has been portal-ed out, it\nwill appear underneath the parent dialog because it was created as the first element in the dom. Enabling `lastChild`\nwill make the portal created as the last child in the dom and thus appear over the parent dialog. Finally enabling\n`disableScrollLocking` will stop the unneeded scroll locking and fix the parent dialog being fixed to the top of the page.\n\n> The `renderNode` is really only needed at this point because there is built-in logic pre-1.1.0 for supporting nested dialogs\nthat automatically sets the `renderNode` to a parent dialog. This is useful for full-page dialogs, but not smaller ones.\n  ","ref":"/components/dialogs#nested-dialogs"},{"name":"Simple Examples","type":"Divider Example","description":"","ref":"/components/dividers#simple-examples"},{"name":"Using Styles Only","type":"Divider Example","description":"\nSince it can sometimes be useful to have borders without requiring a `div` or `hr`, dividers\ncan also be created by just using the provided class names.\n  ","ref":"/components/dividers#using-styles-only"},{"name":"Simple Example","type":"Drawer Example","description":"\nThe `Drawer` can be docked to the left or right of the screen. The size of the drawer depends on\nwhether it has been docked on the left or right of the screen and the device type or screen size.\n\n#### Docked Left\n- On mobile devices, the width of the drawer will be `calc(100vw - 56px)` and a max width of `320px`.\n- On tablets and desktop screens, the width will be equal to the `$md-drawer-tablet-width` and `$md-drawer-desktop-width`\nbut no more than `400px`.\n\n#### Docked Right\n- On mobile devices, the width of the drawer will be the entire viewport.\n- On tablets and desktops, the width of the drawer will be the size of its content.\n","ref":"/components/drawers#simple-example"},{"name":"Drawer with Content","type":"Drawer Example","description":"\nThe `Drawer` has some additional support built in for displaying navigation items, but it can also be\nused to render any content. This example will show how you can make a temporary right drawer to display\nmore information about images.\n  ","ref":"/components/drawers#drawer-with-content"},{"name":"React Router Example","type":"Drawer Example","description":"\nSince one of the main use cases of the `Drawer` is to act as navigation, there is _some_ support for integrating\nwith `react-router`.\n\nMy site uses path params to fetch documentation/examples/SassDocs, you will need to navigate to a different\nroute to actually view the demo. Please click the link below to see this example in action. The code for the example\nis still available here by clicking the code expander button.\n  ","ref":"/components/drawers#react-router-example"},{"name":"Simple Example","type":"ExpansionPanel Example","description":"\nThis is just a simple example showing how you can use the `ExpansionList` and `ExpansionPanel`\ncomponents to display content.\n  ","ref":"/components/expansion-panels#simple-example"},{"name":"Footer Content","type":"ExpansionPanel Example","description":"\nBy default, an `ExpansionPanel` will display a save and cancel button with very simple flat button props in\na footer component. These buttons can be updated to display icons, or any other Button props by providing the\n`saveProps`/`cancelProps` which will override the defaults.\n\nSometimes you might just want to leverage the animation properties and have dynamic content appear. To accomplish\nthis, you can set the `footer` prop to `null` to completely hide the footer.\n\nIn other cases, you might want to define your own footer with different actions instead. When the `footer`\nprop is set to a valid react element/node, it will render that instead of the default save/cancel buttons.\n  ","ref":"/components/expansion-panels#footer-content"},{"name":"Complex Example","type":"ExpansionPanel Example","description":"\nThis example is a bit more in-depth about how you can make a trip planner type of interface. This touches\non some of the other points about the two components.\n\n1. The `ExpansionList` clones required props into the `ExpansionPanel` component.\n2. You can display a different label once the `ExpansionPanel` has been opened.\n3. Providing arrays instead of a single node has different behaviors.\n\nThe `ExpansionList` clones multiple props into the `ExpansionPanel` to handle styles and keyboard accessibility.\nThis is normally not a problem if your interface is simple and does not require separate files for your different components.\nIf you create a separate component/file for each panel, you will need to manually provide those injected props to the panel.\n\nYou can update the `ExpansionPanel` so that it can optional display a different secondary label while open. This can be useful\nwhen the content requires some additional context only when visible.\n\nFinally, providing lists instead of a single node/string can format the `ExpansionPanel`'s labels. When a list is provided to\nthe `label` prop, it will start checking if the content is two lines and update the height a bit. When you want some additional\nsub text for the main label, you should create a node with the className of `md-panel-secondary-label` to get some additional\nstyles and positioning. When an list is provided to the `secondaryLabel` prop, it will attempt to create a new column for each\nindex.\n  ","ref":"/components/expansion-panels#complex-example"},{"name":"Simple FileInput Examples","type":"FileInput Example","description":"\nThe `FileInput` is a very simple wrapper for a `<label>` and `<input type=\"file\" />`\nto gain the styles of the `Button` component. All of the styling props on a button are\navailable on the `FileInput`.\n  ","ref":"/components/file-inputs#simple-file-input-examples"},{"name":"FileUpload Example","type":"FileInput Example","description":"\nThe `FileUpload` component is a wrapper of the `FileInput` that has some additional hooks\nfor handling uploading a file to a **browser**, **not** a **server**.\n\nThis example shows how you can hook into the upload progress props to display a progress bar\nand optional abort the upload. This will really only be effect if you choose big files since\nit is pretty fast to upload small files to the browser.\n  ","ref":"/components/file-inputs#file-upload-example"},{"name":"Uploading to a Server","type":"FileInput Example","description":"\nThis example shows how you can use the `FileUpload` component along with `FormData` to \"upload\"\na file to my documentation server.\n  ","ref":"/components/file-inputs#uploading-to-a-server"},{"name":"Allowing Duplicates","type":"FileInput Example","description":"\nSince the `FileInput` is a simple wrapper of the `<input type=\"file\" />` element, this means that the native\nbehavior is enabled by default. Once a user selects a file, they will not be able to select that file again\nimmediately. They will need to select a different file and then select the file again if they want to upload/select\nit again. This is because the file input stores the path of the files as its value and does not trigger the `onChange`\nevent again.\n\nThis behavior can be overridden by enabling the `allowDuplicates` prop to never store the `value` of the file's path\nand triggering the `onChange` event every time a file is selected.\n  ","ref":"/components/file-inputs#allowing-duplicates"},{"name":"Simple Examples","type":"FontIcon Example","description":"\nThe `FontIcon` component is used to work with _hopefully_ all existing font icon\nlibraries. By default every icon in this library will user material-icons to be\ndisplayed but you can change the icon with the `iconClassName` prop.\n\nTo be able to display any icons at all, you will need to manually include the font library\nwith a `<link>` or anything else for it to be displayed.\n  ","ref":"/components/font-icons#simple-examples"},{"name":"With Colors","type":"FontIcon Example","description":"\nThe `FontIcon` also has support to gain theme, disabled, or error colors as well as inheriting\ncolors from its parents.\n  ","ref":"/components/font-icons#with-colors"},{"name":"Simple","type":"Grid Example","description":"\nThis example showcases some of the very simple sizing that can be applied to grids. Resize\nthe page to see how the grid resizes and positions itself based on media size.\n  ","ref":"/components/grids#simple"},{"name":"HOC Usage (Higher order component)","type":"Grid Example","description":"\nSince it can be undesired to have additional divs just for creating a layout system, the\n`Grid` and `Cell` components can act as higher order components and return a `className`\nto apply to a child component instead of rendering as a `div`. To get this functionality,\nyou just need to create a callback function as the `children` of the `Grid` or `Cell`\nthat accepts an object containing `style` (optional) and `className`. You can then apply\nthese class names to whichever child component you would like.\n\nIn addition, the `Grid` and `Cell` components have a static function named `getClassName`\nthat can be used instead. It is basically the same as the HOC version except that it is not a\nrenderable component.\n\n```jsx\n// These two are equivalent\n<Cell size={1}>{({ className }) => <div className={className} />}</Cell>\n<div className={Cell.getClassName({ size: 1 })} />\n```\n\nThis example also showcases how you can use the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container)\nand [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) to make a grid that has different\nmax widths based on media sizes and only allowing 3 columns in the grid for all media sizes.\n  ","ref":"/components/grids#hoc-usage-higher-order-component"},{"name":"Simple Grid List","type":"Grid Example","description":"\nSince there are times that a grid will have equal sized cells and just reapplying the same class names over\nand over again, a `GridList` component has been made to easily apply styles. This component will wrap the\n`className` functionality from both `Grid` and `Cell` into a single API and then clone the correct\n`className` into each child component in the `GridList`. All of the components within `react-md` will\nwork with this by default, but if you create a custom component, you **must** correctly apply the `className`\nprop to your child element.\n\nThis example will be the same as the example above, but just using the `GridList` component instead to showcase\nthe boilerplate it removes.\n  ","ref":"/components/grids#simple-grid-list"},{"name":"Simple Examples","type":"AccessibleFakeButtons Example","description":"","ref":"/components/helpers/accessible-fake-buttons#simple-examples"},{"name":"Simple Example","type":"Collapses Example","description":"","ref":"/components/helpers/collapses#simple-example"},{"name":"Contained Form Example","type":"FocusContainers Example","description":"\nThis example will show how you can trap keyboard focus inside of a form. The tab focus will\nonly be allowed on non-disabled cells and components that are considered tabbable.\n\n> A few components use this behind the scenes for keyboard accessibility.\n  ","ref":"/components/helpers/focus-containers#contained-form-example"},{"name":"Simple Example","type":"IconSeparators Example","description":"","ref":"/components/helpers/icon-separators#simple-example"},{"name":"Context Menu Layover","type":"Layovers Example","description":"","ref":"/components/helpers/layovers#context-menu-layover"},{"name":"Simple Overlay","type":"Portals Example","description":"\nThis component is considered part of an \"advanced API\" should not be used in most cases. Any bugs\nencountered are most likely due to not setting the correct `renderNode` or context blocking updates\nin parent components by `shouldComponentUpdate` or `PureComponent`. If this doesn't dissuade you,\nthis example shows an example usage by creating an overlay.\n  ","ref":"/components/helpers/portals#simple-overlay"},{"name":"Advanced Usage: Markdown Previewer","type":"Portals Example","description":"","ref":"/components/helpers/portals#advanced-usage-markdown-previewer"},{"name":"Simple Example","type":"ResizeObservers Example","description":"\nThis is a simple example that shows how you can hook into the `ResizeObserver` to watch and display\nchanges in `height` or `width` of a single element. The component below will randomly change\n`max-height` and `max-width` values to show live updates. You can also manually resize the browser\nto see how outside changes can also affect the size.\n\nBy default, the `ResizeObserver` **will not listen to any resize events**. You will need to enable `watchHeight`\nand/or `watchWidth` for the `onResize` callback to be called.\n  ","ref":"/components/helpers/resize-observers#simple-example"},{"name":"Simple Examples","type":"Ink Example","description":"\nInk can be created with the HOC (higher order component) that will provide\nan `ink` prop to the child component. If the component is `disabled` or\n`inkDisabled` is provided to the component, the ink will not be injected.\nIn addition, the 'touch', 'mouse', and/or 'keyboard' triggers can be disabled.\n\nTo get an ink displayed correctly, your component **must** specify `position: relative`\nso that the ink will be contained.\n  ","ref":"/components/inks#simple-examples"},{"name":"Disabling Ink","type":"Ink Example","description":"\nThis example will show how you can disable ink at an application level by defining context that will\ndisable it. This can not be done dynamically since there are many ways to block context updates on\nchild components. When the ink is disabled, most of the components will have no keyboard indication\nthat it is focused, so it is up to you to display something.\n  ","ref":"/components/inks#disabling-ink"},{"name":"Simple Examples","type":"List Example","description":"","ref":"/components/lists#simple-examples"},{"name":"Simple List Controls","type":"List Example","description":"\nSometimes you want to have an additional action built into your `ListItem`. This\ncan be accomplished with the `ListItemControl` component that will accept a\n`primaryAction` or a `secondaryAction` and inject additional props into it.\n  ","ref":"/components/lists#simple-list-controls"},{"name":"Simple Examples","type":"Media Example","description":"\nYou can use the `Media` component to display images scaled to a specific aspect ratio. The default included\naspect ratios are `16-9`, `4-3`, and `1-1`. You can add more by either using the `react-md-media-aspect-ratio`\nmixin, or updating the `md-media-aspect-ratios` variable with additional values.\n\nThe `Media` component will scale to whatever the size of its container is and maintain the aspect ratio.\n  ","ref":"/components/media#simple-examples"},{"name":"Other Media Types","type":"Media Example","description":"\nBy default, `img`, `iframe`, `svg`, `video`, `embed`, and `object` elements will be\nscaled correctly within a `Media` component. These defaults can be changed  by updating the\n[md-media-embedded-selectors](/components/media?tab=2#variable-md-media-embedded-selectors).\n\nThe `MediaOverlay` component can even be used above videos, even though that might not really be\nthe best idea.\n  ","ref":"/components/media#other-media-types"},{"name":"Menu Button Examples","type":"Menu Example","description":"\nThe `MenuButton` and `DropdownMenu` components require a list of `menuItems` to display as `ListItem`.\nThe menu items can either be:\n- `number`\n- `string`\n- `object`\n- `ListItem`\n\nIf the item is a `number` or a `string`, it will be displayed as a `ListItem`'s `primaryText`.\nIf the item is an `object`, it will consider it an object of `ListItem` `props` and just pass it\nto the `ListItem` component. Finally, if it is the `ListItem`, it will be displayed as-is.\n  ","ref":"/components/menus#menu-button-examples"},{"name":"Dropdown Menu Examples","type":"Menu Example","description":"\nThe `DropdownMenu` component is a bit lower level than the `MenuButton` because you will need to create\nyour own `toggle` component for the `Menu` to attach to. It is useful since it allows you to create\nsome more interesting components than what is only available with the `MenuButton`.\n  ","ref":"/components/menus#dropdown-menu-examples"},{"name":"\"Smart\" Positioning Menus","type":"Menu Example","description":"\nStarting from `react-md@1.1.0`, menus can be updated to use \"smart\" positioning to move their location\nto stay within the viewport. If a user attempts to open a menu that is near the bottom of the screen, the\nmenu will now appear above instead of below. When the user scrolls the page while the menu is open, the\nmenu will move with the page until it can no longer be displayed in the viewport and then automatically hides.\nIf it is possible to switch the location of the menu from top to bottom or bottom to top, it will do so. The\nmenu can also be hidden automatically if the user attempts to scroll instead by disabling the `repositionOnScroll`\nprop.\n\nThe biggest difference between these menus and the default version is that their positioning is handled by inline\nstyles instead of external CSS. Because of the inline styling, it might be better to keep the non-\"smart\" menus\nenabled in general cases when complex positioning is required or the menus are tied to text fields.\n\n> See the Autocomplete example below for more details about problems with \"smart\" menus and text fields.\n\nTry scrolling around the page before and after opening the menus below to see how the \"smart\" menus can reposition\nor hide based on screen location. You can also check out these examples:\n- [Autocomplete \"Smart\" Menus](/components/autocompletes#using-smart-menus)\n- [SelectField \"Smart\" Menus](/components/select-fields#using-smart-menus)\n  ","ref":"/components/menus#smart-positioning-menus"},{"name":"Google Docs Clone","type":"Menu Example","description":"\nThe following example is a Google docs clone with about 0.01% of the functionality! It is quite amazing\nif I do say so myself. The main purpose of this demo is to show how you can create cascading menus and\ncustom context menus.\n\n> NOTE: This is a **very complex** example and there is a lot of code (1500+ lines). This should really only\nbe viewed if you have a good understanding of the majority of the components in react-md\n  ","ref":"/components/menus#google-docs-clone"},{"name":"Simple Example","type":"NavigationDrawer Example","description":"\nIf you saw the [Drawer](/components/drawers) examples before this example, hopefully the\n`NavigationDrawer` example will be simple since it is just a wrapper. It exposes props\nto pass to both the `Drawer` and `Toolbar` components.\n  ","ref":"/components/navigation-drawers#simple-example"},{"name":"This App's NavigationDrawer","type":"NavigationDrawer Example","description":"\nYou can also look at how this entire website was set up by checking the source code here. It\nmight be a bit more helpful to look through on [GitHub](https://github.com/mlaursen/react-md/tree/v1.18.1/docs/src/components/App) though.\n  ","ref":"/components/navigation-drawers#this-apps-navigation-drawer"},{"name":"React Router Example","type":"NavigationDrawer Example","description":"\nThis example will be almost exactly as the [Drawer](/components/drawers#react-router-example)\nexcept it will show how much boilerplate the `NavigationDrawer` removes for you.\n\nMy site uses path params to fetch documentation/examples/SassDoc, you will need to navigate to a different\nroute to actually view the demo. Please click the link below to see this example in action. The code for the example\nis still available here by clicking the code expander button.\n  ","ref":"/components/navigation-drawers#react-router-example"},{"name":"Simple Examples","type":"Paper Example","description":"","ref":"/components/papers#simple-examples"},{"name":"Orientation Examples","type":"DatePicker Example","description":"\nDate pickers will attempt to follow the correct display mode of the current\nscreen size through the media queries. You can also force a display mode if\nyou want.\n\n> Forcing a display mode is not enabled by default since it is recommended to\nalways allow the orientation to determine the display mode. However it can be\nenabled by setting `$md-picker-include-forceful-classes: true`.\n","ref":"/components/pickers/date#orientation-examples"},{"name":"Inline Example","type":"DatePicker Example","description":"\nWhen the user is primarily using a desktop display, it might be better to display\nan inline picker instead of opening a full dialog. This can be accomplished by\nproviding the `inline` prop to the picker.\n  ","ref":"/components/pickers/date#inline-example"},{"name":"Custom Date Rendering Example","type":"DatePicker Example","description":"\nDatePicker can be used as static month calendar with custom date rendering.\n  ","ref":"/components/pickers/date#custom-date-rendering-example"},{"name":"Additional Display Settings","type":"DatePicker Example","description":"\nThe Calendar can be updated with some additional display settings to disable dates,\nshow dates from other months, and setting a custom first day of the week. In addition,\nyou can specify a min and max date for the picker to display. The user can navigate\nthrough the months like normal until the min or max date is reached. The invalid dates\nwill be disabled and dulled to prevent selection as well as preventing the user from\nseeing any other months that are past the min or max dates. Combine these props as much\nas you desire.\n  ","ref":"/components/pickers/date#additional-display-settings"},{"name":"Formatting","type":"DatePicker Example","description":"\nAs stated above, the date and time formatting is done with the `Intl.DateTimeFormat`\nformatter. The examples below will show the default formatting differences between:\n- the browser's locale\n- an en-US locale\n- a da-DK locale\n\nThe `DatePicker` can also be updated with any of the\n[configuration options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat#Parameters)\n  ","ref":"/components/pickers/date#formatting"},{"name":"Text Field Styling","type":"DatePicker Example","description":"\nSince the `DatePicker` uses the `TextField` component behind the scenes, the `DatePicker` will pass most of the text field\nprops to the `TextField` itself so you can add error messages, help text, line directions, etc to the `DatePicker`.\n  ","ref":"/components/pickers/date#text-field-styling"},{"name":"Controlled","type":"DatePicker Example","description":"\nThere are times where it is helpful to fully control all aspects of the `DatePicker` (`visibility`, `value`). This can be done by\nproviding the `value` prop and an `onChange` prop or `visible` with `onVisibilityChange`.\n  ","ref":"/components/pickers/date#controlled"},{"name":"Intl Polyfill","type":"DatePicker Example","description":"","ref":"/components/pickers/date#intl-polyfill"},{"name":"Orientation Examples","type":"TimePicker Example","description":"\nTime pickers will attempt to follow the correct display mode of the current\nscreen size through the media queries. You can also force a display mode if\nyou want.\n\n> Forcing a display mode is not enabled by default since it is recommended to\nalways allow the orientation to determine the display mode. However it can be\nenabled by setting `$md-picker-include-forceful-classes: true`.\n","ref":"/components/pickers/time#orientation-examples"},{"name":"Inline Example","type":"TimePicker Example","description":"\nWhen the user is primarily using a desktop display, it might be better to display\nan inline picker instead of opening a full dialog. This can be accomplished by\nproviding the `inline` prop to the picker.\n  ","ref":"/components/pickers/time#inline-example"},{"name":"Formatting","type":"TimePicker Example","description":"\nAs stated above, the date and time formatting is done with the `Intl.DateTimeFormat`\nformatter. The examples below will show the default formatting differences between:\n- the browser's locale\n- an en-US locale\n- a da-DK locale\n\nThe `TimePicker` can also be updated with any of the\n[configuration options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat#Parameters)\n  ","ref":"/components/pickers/time#formatting"},{"name":"Auto OK, Hover Modes, and Showing Seconds","type":"TimePicker Example","description":"\nThe `TimePicker` can be updated so that when a user touches/clicks an hour, it will automatically select the hour\nand switch to the minute view. When the user touches/clicks a minute, it will automatically select the minute and\ncall the \"OK\" action to close the dialog.\n\nThere is an additional \"hover mode\" that can be enabled for time pickers that will make it a bit simpler on desktop\nscreens so that hovering around the clock would be the same as dragging.\n\nFinally, you can enable allowing the user to select seconds in the `TimePicker` as well by enabling the `showSeconds`\nprop. The picker will default to starting with the user selecting hours first, but this can be configured with the\n[defaultTimeMode](?tab=1#time-picker-proptypes-default-time-mode) prop.\n  ","ref":"/components/pickers/time#auto-ok-hover-modes-and-showing-seconds"},{"name":"Text Field Styling","type":"TimePicker Example","description":"\nSince the `TimePicker` uses the `TextField` component behind the scenes, the `TimePicker` will pass most of the text field\nprops to the `TextField` itself so you can add error messages, help text, line directions, etc to the `TimePicker`.\n  ","ref":"/components/pickers/time#text-field-styling"},{"name":"Controlled","type":"TimePicker Example","description":"\nThere are times where it is helpful to fully control all aspects of the `TimePicker` (`visibility`, `value`). This can be done by\nproviding the `value` prop and an `onChange` prop or `visible` with `onVisibilityChange`.\n  ","ref":"/components/pickers/time#controlled"},{"name":"Indeterminate Example","type":"CircularProgress Example","description":"\nAs stated above, `indeterminate` progress bars should be used when an action's progress can not be measurable.\nThis example will show how you can create a fake feed of data and show a progress indicator while that data is\nbeing \"fetched\" from a server or if the page was refreshed.\n  ","ref":"/components/progress/circular#indeterminate-example"},{"name":"Determinate","type":"CircularProgress Example","description":"\nThis example is basically the same as above. The only difference is that the progress will now be \"measurable\". This\nwill update the progress so that it does not spin infinitely and will grow related to its `value` prop.\n  ","ref":"/components/progress/circular#determinate"},{"name":"Indeterminate Example","type":"LinearProgress Example","description":"\nAs stated above, `indeterminate` progress bars should be used when an action's progress can not be measurable.\nThis example will show how you can create a fake feed of data and show a progress indicator while that data is\nbeing \"fetched\" from a server or if the page was refreshed.\n  ","ref":"/components/progress/linear#indeterminate-example"},{"name":"Determinate","type":"LinearProgress Example","description":"\nThis example is basically the same as above. The only difference is that the progress will now be \"measurable\". This\nwill update the progress so that it does not spin infinitely and will grow related to its `value` prop.\n  ","ref":"/components/progress/linear#determinate"},{"name":"Query Indeterminate","type":"LinearProgress Example","description":"\nThe query indeterminate progress is only available on `LinearProgress`. It will display a \"reverse\" loading indicator\nuntil a progress value has been applied to the progress bar.\n\nSince the example below isn't really the best example of a real world example, here are the steps that are happening:\n1. Render the `LinearProgress` with `query={true}` and the `value` prop to either `null` or `undefined`\n2. Once the \"measurable\" progress can begin, set the `value` prop to your progress amount and keep\nincrementing until it reaches `100`.\n  ","ref":"/components/progress/linear#query-indeterminate"},{"name":"Additional Styling Control","type":"LinearProgress Example","description":"\nIf it is desired to have additional control over the progress bar's style, you can use the `progressStyle` and `progressClassName`\nprops. These two props can either be a static style object or className that gets applied to the progress bar, or they can be functions\nthat return the style or className based on the current value.\n  ","ref":"/components/progress/linear#additional-styling-control"},{"name":"Simple Example","type":"SVGIcon Example","description":"\nThis example will show how you can use the `SVGIcon` component to create inline SVG icons and showcase\nsome of the styling and sizing props.\n  ","ref":"/components/svg-icons#simple-example"},{"name":"Using Sprite Maps","type":"SVGIcon Example","description":"\nOne of the problems with inline SVGs is that all your icons are not cacheable and reusable. If this is your goal,\nyou can end up using the `use` prop instead of `children` to define your icons.\n\nTo get SVGIcons working for this documentation site, I am using the [svg-sprite-loader](https://github.com/kisenka/svg-sprite-loader)\nand this additional webpack config:\n\n```js\n  }, {\n    test: /\\.svg$/,\n    include: path.join(src, 'icons'),\n    use: [{\n      loader: 'svg-sprite-loader',\n      options: {\n        extract: true,\n        spriteFilename: 'icon-sprites.[hash:8].svg',\n      },\n    }, {\n      loader: 'svgo-loader',\n    }],\n  }, {\n```\n\nThis allows any SVG that I import from `src/icons` to be converted to an external URL with a direct link to the SVG I want to use.\nIf your app needs to support IE11 or Edge < 12, you will need to also polyfill the `<use>` in SVG with\n[svgxuse](https://github.com/Keyamoon/svgxuse) or [svg4everybody](https://github.com/jonathantneal/svg4everybody) since they do not\nsupport `<use xlink:href>` and external SVG sprite maps. It is most likely simpler to not use the `extract` options when using\nthe `extract` option when IE11 and Edge < 12 need to be supported. Check out the source code below for some more info.\n  ","ref":"/components/svg-icons#using-sprite-maps"},{"name":"Simple Examples","type":"SelectField Example","description":"\nWhen creating a `SelectField`, the minimal requirements is to provide a unique `id` and\nthe `menuItems` prop. Each menu item will attempt to be converted into a `ListItem`. The\n`SelectField` accepts any of the following data types for a menu item:\n- a number\n- a string\n- an object\n\nWhen the item is a number or a string, both the `value` and `label` will be that number or\nstring.  This means that the `SelectField`'s list would show these values as the `primaryText`\nand when one of those items are selected, the `SelectField`'s value would be updated to that\nlabel as well.\n\nIf the item is an object, it will extract the `itemLabel`, `itemValue` and `itemProps` from the object and\napply all the remaining keys to the `ListItem` component. Additional keys can be removed by\nspecifying the `deleteKeys` prop.\n\nBy default, the `SelectField` will be rendered like a `TextField`, but it can also be updated\nto be like a \"button\". This will add some additional padding, add ink, and not allow the `label`\nprop. The \"button\" version will also remove the currently selected item from the list. See\n[stripActiveItem](/components/select-fields?tab=1#select-field-proptypes-strip-active-item) for\nmore information.\n  ","ref":"/components/select-fields#simple-examples"},{"name":"Elements and Disabling Items","type":"SelectField Example","description":"\nThere are times where it is helpful to be able to render additional elements like `Divider`s or `Subheader`s\nin the selection list or disable specific items. If you want to render any additional elements, just add them to\nthe `menuItem` list and they will be rendered. Any items that do not match the `string`, `number` or `object`\nshape **will be ignored** as valid selection targets for clicking, touching, or keyboard events.\n\nTo disable an item, all that is required is to make sure it is an `object`, and add a key `disabled: true` to it.\nWhen the item is `disabled`, it will not be focusable or selectable.\n  ","ref":"/components/select-fields#elements-and-disabling-items"},{"name":"Default Values and Controlling","type":"SelectField Example","description":"\nThe `SelectField` can be updated to have a `defaultValue` that is initially selected. When this value\nis set, it will search all the `menuItems` for an item that matches that value by using the `itemValue`\nprop or if it exactly matches the string or number when it is not an object item.\n\nSometimes, you need greater control over the value of the `SelectField`, so you can control it by providing\na `value` and `onChange` prop to set these yourself. In addition, if you add a menu item that is just the\nempty string to your `menuItems` list, that can be used to \"reset\" the value of your `SelectField`.\n  ","ref":"/components/select-fields#default-values-and-controlling"},{"name":"Text Field Styling","type":"SelectField Example","description":"\nThe `SelectField` gains most of the styling abilities as the `TextField` so you can display\nhelp text, error text/error states and others.\n  ","ref":"/components/select-fields#text-field-styling"},{"name":"Using \"Smart\" Menus","type":"SelectField Example","description":"\nThis example shows how you can enable the \"smart\" menu feature that was introduced in `react-md@1.1.0`. This\nwill allow the select field list to automatically position itself within the viewport. For more information and\ndocumentation, see [the Menus examples](/components/menus#smart-positioning-menus).\nThe code for this example is exactly the same as the first example except that the `simplifiedMenu` prop is disabled.\n  ","ref":"/components/select-fields#using-smart-menus"},{"name":"Simple Checkboxes and Switches","type":"SelectionControl Example","description":"\nWhen creating a selection control, the `id`, `name`, and `type` are required to render the control. It is\n*recommended* to always supply a `value` and either a `label` or `aria-label` as well.\n\nThe base `SelectionControl` component is probably all that you will need, but there are simple wrappers for the\n`Radio`, `Checkbox`, and `Switch` components so that you don't need to specify a `type`.\n  ","ref":"/components/selection-controls#simple-checkboxes-and-switches"},{"name":"Radio Example","type":"SelectionControl Example","description":"\nSince the radios need to be controlled to toggle the icons, there is a helper component\n`SelectionControlGroup` that will help keep the selected state for you. This component\nwill also add keyboard functionality so that it matches the native `<input type=\"radio\">`\nelements.\n\nThe user will only be able to tab-focus the selected radio button. If the user presses tab again,\nit will select the next focusable element on the page. To select different values, the user can\npress the up or left arrow keys to select the previous radio button and the down or right arrow\nkeys to select the next button. Just like the native `<input type=\"radio\">` elements, the selection\nwill immediately select the radio, trigger the `onChange` event, and loop around.\n  ","ref":"/components/selection-controls#radio-example"},{"name":"SelectionControlGroup custom SelectionControl component","type":"SelectionControl Example","description":"\nIf the default `SelectionControl` component does not work with your needs, it is possible to provide a custom\nimplementation to the `SelectionControlGroup` component. This example will not go into a lot of details, but you\ncan check out the [controlComponent prop](?tab=1#selection-control-group-proptypes-control-component) for all the\nprops that are provided.\n  ","ref":"/components/selection-controls#selection-control-group-custom-selection-control-component"},{"name":"Using Custom Icons","type":"SelectionControl Example","description":"\nBy default, the `Checkbox` and `Radio` components will use `FontIcon` to display the checked/unchecked icons.\nIf you want to change the displayed icon, you can use the `checkedIcon`/`uncheckedIcon` props on the `Checkbox`\nor provide the correct `checkedCheckboxIcon`, `checkedRadioIcon`, `uncheckedCheckboxIcon`, and `uncheckedRadioIcon`\non the `SelectionControl`.\n\nThe `SelectionControlGroup` has also been updated to apply these icons across the entire `controls` list. It is possible\nto update the icon either at the `SelectionControlGroup` level or the `control` level by applying the correct props. Check\nout the code and the following example to see how it in action. \n\n> This example also shows how you can easily make lists of checkboxes with the `SelectionControlGroup` component as well. It is not\nlimited to only rendering radios.\n  ","ref":"/components/selection-controls#using-custom-icons"},{"name":"Simple Continuous Sliders","type":"Slider Example","description":"\nContinuous sliders show no real indication of what the `value` is for the range. They are normally\nused when precision isn't fully required. The basic props required for a `Slider` is the `id` prop\nfor accessibility and linking the slider with the `<input type=\"range\">` hidden behind the scenes. You\ncan also provide a `label` that will get displayed above the slider.\n\nWhen a keyboard user tab-focuses this slider, a ring will appear around the slider and the user can select\nvalues with the left or right arrow keys. Once they tab away, that value will be set.\n  ","ref":"/components/sliders#simple-continuous-sliders"},{"name":"Simple Discrete Sliders","type":"Slider Example","description":"\nDiscrete sliders are used when more precision is required for the sliding range. When the user touches\nor clicks the slider, a \"balloon\" will appear that displays the current value. While the user drags the\nslider, the value will update in real time to show the value. Once the user clicks or touches away from\nthe slider, the \"balloon\" will be hidden again.\n\nWhen a keyboard user tab-focuses the slider, it will show the balloon and a small ring for a second to indicate\nfocus. They can then select values just like the continuous slider by using the left and right arrow keys.\n  ","ref":"/components/sliders#simple-discrete-sliders"},{"name":"Custom Range and Ticks","type":"Slider Example","description":"\nBy default the slider uses a 0-100 scale and \"step\" increments of 1, but you can update this by setting a `min`,\n`max`, and/or `step` prop. Right now, I only support a min and max range on the same side of 0 (so just don't\ndo a negative to positive range) because I couldn't get the maths right.\n\nIt is generally recommended to use a larger range for the slider as it will appear more \"fluid\". When there is a smaller\nrange, the slider will attempt to fix itself to the closest value after stops dragging.\n\nWhen using discrete sliders, you can also add tick marks at certain points to help show the progress of the slider.\n  ","ref":"/components/sliders#custom-range-and-ticks"},{"name":"Sliders with icons","type":"Slider Example","description":"\nSliders have been updated to also have support for displaying icons inline with the slider. I'm not sure what the major use-case\nis for it, but it looks neat.\n  ","ref":"/components/sliders#sliders-with-icons"},{"name":"Editable Sliders","type":"Slider Example","description":"\nIn some cases, it can be easier for users to specifically state the number they want in the range by using a text field. If\nthe `editable` prop is provided, a number text field will be placed to the right of the slider and allow for real-time updates\nif the user changes the value using that field.\n  ","ref":"/components/sliders#editable-sliders"},{"name":"Simple Examples","type":"Snackbar Example","description":"\nTo create a new toast in the snackbar, you must create an object for displaying the toast. The object\n**must** contain a `text` key and then an optional `action` key. The action can either be a string,\nnumber, or an object of props to provide to a button.\n  ","ref":"/components/snackbars#simple-examples"},{"name":"Interactive Demo","type":"Snackbar Example","description":"\nThis following example will allow you to set different props on the Snackbar and see how it affects the\nresulting toast.\n  ","ref":"/components/snackbars#interactive-demo"},{"name":"Simple Example","type":"Subheader Example","description":"","ref":"/components/subheaders#simple-example"},{"name":"Simple Example","type":"Tab Example","description":"\nThis will be the most simple example of showing how you can use the `TabsContainer`, `Tabs`, and `Tab`\ncomponents together to display some content. When using tabs, you need to provide a unique id to each `Tab`\nor provide a `tabId` to the `Tabs` component. These ids are required for accessibility and help when\nyou need additional control of the content (see next example).\n  ","ref":"/components/tabs#simple-example"},{"name":"As a Page Layout (and icons)","type":"Tab Example","description":"\nSince `Tabs` _normally_ are a full page layout type of thing, the `TabsContainer` can be updated to include\na toolbar and be fixed to the top of the page. This will apply some additional styles and class names to offset\nthe tab panels and fix the toolbar + tabs to the top of the page.\n  ","ref":"/components/tabs#as-a-page-layout-and-icons"},{"name":"Custom Usage","type":"Tab Example","description":"\nThere are times where you don't need the `TabsContainer` component to handle selecting\nactive tab content for you and adding swiping. For these cases, you can just use the `Tabs`\nwith a list of `Tab` that have no children. For this documentation site, I am using\nthe `Tabs` component with `react-router` to change the route and display different\ncontent in the `NavigationDrawer`'s content.\n\nCheck out the source code in this card to see how the `DocumentationTabs` was added.\n  ","ref":"/components/tabs#custom-usage"},{"name":"Floating Label Text Fields","type":"TextField Example","description":"\nWhen a `TextField` provides a `label` prop, the field will be updated with a label\nthat is displayed over the text field until the user focuses the field. Then the label\nwill float above the field to remind users of what they are filling out. If the `TextField`\nalso has a `placeholder`, it will now be visible. Once the user blurs the field, the label\nwill float back down if there is no content to indicate that it has not been filled. Otherwise\nthe label will remain above the input.\n  ","ref":"/components/text-fields#floating-label-text-fields"},{"name":"Placeholder Only Text Fields","type":"TextField Example","description":"\nWhen you want the text fields to take up less space, you can omit the `label` prop and only\nprovide a `placeholder`. This will shrink the height of the text field by `34px - 37px`\n(based on media size).\n\n> NOTE: It has been proven that it is normally better to always display labels even if it takes\nup more room as it makes it easier for the user to understand the content they have entered or\nare entering.\n  ","ref":"/components/text-fields#placeholder-only-text-fields"},{"name":"Text Fields with inline Icons","type":"TextField Example","description":"\nText fields can be updated to provide additional visual cues by providing inline icons to be\ndisplayed with the field. These icons can either be displayed to the left or right of the field.\nThe user can touch the text field or the icon to focus the text field.\n\nThe icon can also be displayed on the inner-left of the text field just like the password field\ntoggle button.\n  ","ref":"/components/text-fields#text-fields-with-inline-icons"},{"name":"Separate Icons for Password Visibility","type":"TextField Example","description":"\nThe `passwordIcon` prop may alternatively be supplied two separate icons by setting the prop as an object.\nIt should have two keys, `invisible` and `visible`, with an element for each key's value.\n\nWhen password is visible, the visible icon will load, and likewise the invisible icon will load when password is not visible.\n","ref":"/components/text-fields#separate-icons-for-password-visibility"},{"name":"Disabled Text Fields","type":"TextField Example","description":"\nText fields can be disabled as well. This will update the field to have different styles that tone\ndown the field to help show no interactions can happen.\n  ","ref":"/components/text-fields#disabled-text-fields"},{"name":"Counters and Help/Error Text","type":"TextField Example","description":"\nText fields can be updated to display a counter when the `maxLength` prop has been specified. The\ncounter will update when the user types to display the remaining characters available for the field.\nWhen the `maxLength` has been exceeded, the field will gain the error state.\n\nSometimes it is helpful to add additional information about a field for the user, so you can apply some\nadditional `helpText` that will appear below the field. The text should automatically wrap to be the\nsame size as the field. It is also possible to hide the help text until the user focuses the field by\nenabling the `helpOnFocus` prop.\n\nThe text field can gain the error state either by:\n- being `required` and the user blurs the text field without adding any content\n- the `maxLength` prop is provided and the user types more characters than the length\n- the `error` prop is enabled.\n\nWhen the text field gains the `error` state via props or internally, it will attempt to display the\n`errorText` prop and it will apply the error status color to the floating label, text field underline,\nand the error text if it exists.\n\nThe text field can display help/error text along with a counter.\n  ","ref":"/components/text-fields#counters-and-help-error-text"},{"name":"Auto Resizing Examples","type":"TextField Example","description":"\nThe `TextField` can be updated to automatically resize its width to be the size of its text content. It will\nbe a tiny bit off for some browsers (2-3 pixels) because of how they calculate text width, but it should be fairly\naccurate.\n\nWhen the user types, the text field should automatically expand to match the text and when the user removes text,\nthe width will shrink.\n  ","ref":"/components/text-fields#auto-resizing-examples"},{"name":"Blocked Fields","type":"TextField Example","description":"\nBlocked text fields are called the full-width fields in the material design spec. They are mostly used on\nmobile devices along with the `Divider` component. The blocked text field removes the underline and only\nallows placeholder text to be displayed.\n  ","ref":"/components/text-fields#blocked-fields"},{"name":"Form Example and misc.","type":"TextField Example","description":"\nThis is just a simple example showcasing a simple form using text fields and selection controls to submit some\nnew item to an application. This example shows off two new features of the text field:\n- custom sizing\n- limiting the max rows for a multiline text field.\n\nText fields can be updated to use custom font sizes by either updating the `$md-text-field-custom-sizes` map\nor the provided mixins. Once the styles have been created, you can use the `customSize` prop to apply that\nsize to the field. By default, there will be a \"title\" text field included. See the [SassDoc tab](/components/text-fields?tab=2)\nfor more information.\n\nMutliline text fields automatically grow to display all the content by default. In some cases, it can be helpful to allow it to\ngrown to a certain point and then stop growing. This can be accomplished by providing a `maxRows` prop.\n  ","ref":"/components/text-fields#form-example-and-misc"},{"name":"Simple Examples","type":"Toolbar Example","description":"\nThis will showcase some of the styling that you can apply to a toolbar and example usage\nof adding a navigation button or additional actions.\n\nWhen the `nav` prop is provided, a positioning `className` will be cloned into your element,\nso if your component does not accept and apply a `className` prop, it might display weirdly.\nIf you use any component in `react-md`, this should not be a problem. It will only be for custom\ncomponents.\n\nThe same happens to the `actions` prop.\n  ","ref":"/components/toolbars#simple-examples"},{"name":"Using a Title Menu","type":"Toolbar Example","description":"\nThere are cases where the main title should be a dropdown menu of different actions instead of some\nplain text. If you supply a `titleMenu` instead of `title`, you can get some additional styling\nto get these menus to work.\n  ","ref":"/components/toolbars#using-a-title-menu"},{"name":"Fixed Toolbars","type":"Toolbar Example","description":"\nThis example shows how you can update toolbars to be considered \"App Bars\" by fixing them to the top of the page.\nThere are some positioning CSS classes provided by react-md to help with this.\n\n### Positioning CSS\nSince the toolbar is normally used as a fixed component, some additional helper class names have been\ncreated to help position content relative to a toolbar.\n\n#### `md-toolbar-relative`\nThis class name will apply a `margin-top` to whatever element or component it has been applied to for the current\nmedia's toolbar height.\n\n#### `md-toolbar-relative--prominent`\nThis class name is similar to the `md-toolbar-relative` except that it is used with prominent toolbars instead.\n\n#### `md-btn--toolbar`\nThis applies additional margin to buttons to center them vertically in the toolbar. This should only be used if\nthe buttons are not occurring in the `actions` or `nav` props.\n\n#### `md-toolbar--action-left`\nThis applies additional `margin-left` to any elements to position to the left keyline in a toolbar. This should really\nonly be used if not using the `nav` and `title` props in a toolbar.\n\n#### `md-toolbar--action-right`\nThis applies additional `margin-right` to any elements to position to the left keyline in a toolbar. This should really\nonly be used if not using the `actions` props in a toolbar.\n\n#### `md-title--toolbar`\nThis applies additional styles for a title in the toolbar. This should only be used if not using the `title` prop\non a toolbar.\n\n#### `md-title--toolbar-offset`\nThis applies additional margin-left to the title in the toolbar to match the current keyline. This should probably\nonly be used if not using the `title` prop on a toolbar.\n\n#### `md-title--toolbar-prominent`\nThis applies additional styles to move the title to a more prominent section in the toolbar. This should probably\nonly be used if not using the `title` prop on a toolbar.\n  ","ref":"/components/toolbars#fixed-toolbars"},{"name":"Button Examples","type":"Tooltip Example","description":"\nTooltips are automatically built in to the `Button` component and will be displayed\nif the `tooltipLabel` prop is defined.\n  ","ref":"/components/tooltips#button-examples"},{"name":"Custom Examples","type":"Tooltip Example","description":"\nThis example will show how you can create your own versions of tooltipped components\nwith the usage of the `injectTooltip` HOC.\n  ","ref":"/components/tooltips#custom-examples"},{"name":"Tooltipped Examples","type":"Tooltip Example","description":"\nThis example will show how you can link a tooltip to a component with the usage of the `Tooltipped` component.\n  ","ref":"/components/tooltips#tooltipped-examples"}]