[
    {
        "comment": "/** @module Drawers/DrawerTypes */",
        "meta": {
            "filename": "DrawerTypes.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {}
        },
        "kind": "module",
        "name": "Drawers/DrawerTypes",
        "longname": "module:Drawers/DrawerTypes"
    },
    {
        "comment": "/**\n * An enum for all the different type of drawers.\n *\n * @readonly\n * @enum {string}\n */",
        "meta": {
            "range": [
                134,
                2298
            ],
            "filename": "DrawerTypes.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000003",
                "name": "DrawerTypes",
                "type": "ObjectExpression",
                "value": "{\"FULL_HEIGHT\":\"full-height\",\"CLIPPED\":\"clipped\",\"FLOATING\":\"floating\",\"PERSISTENT\":\"persistent\",\"PERSISTENT_MINI\":\"persistent-mini\",\"TEMPORARY\":\"temporary\",\"TEMPORARY_MINI\":\"temporary-mini\"}"
            }
        },
        "description": "An enum for all the different type of drawers.",
        "readonly": true,
        "kind": "constant",
        "isEnum": true,
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "DrawerTypes",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "inner",
        "memberof": "module:Drawers/DrawerTypes",
        "params": [],
        "properties": [
            {
                "comment": "/**\n   * This is the default drawer type. It will always be on the screen and takes\n   * up the entire height. This is very helpful for main navigation on desktops\n   * when you do not need an expandable workspace.\n   */",
                "meta": {
                    "range": [
                        398,
                        424
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 16,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000006",
                        "name": "FULL_HEIGHT",
                        "type": "Literal",
                        "value": "full-height"
                    }
                },
                "description": "This is the default drawer type. It will always be on the screen and takes\nup the entire height. This is very helpful for main navigation on desktops\nwhen you do not need an expandable workspace.",
                "name": "FULL_HEIGHT",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.FULL_HEIGHT",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "full-height"
            },
            {
                "comment": "/**\n   * This drawer type will always be on the screen, but it will appear under the\n   * main toolbar.\n   */",
                "meta": {
                    "range": [
                        541,
                        559
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 22,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000008",
                        "name": "CLIPPED",
                        "type": "Literal",
                        "value": "clipped"
                    }
                },
                "description": "This drawer type will always be on the screen, but it will appear under the\nmain toolbar.",
                "name": "CLIPPED",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.CLIPPED",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "clipped"
            },
            {
                "comment": "/**\n   * This drawer type will always be on the screen, but it will appear under the\n   * main toolbar and have a transparent background. This is useful if you want\n   * a persistent drawer on desktop screens, but do not want the main focus to be\n   * the drawer.\n   */",
                "meta": {
                    "range": [
                        836,
                        856
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 30,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000010",
                        "name": "FLOATING",
                        "type": "Literal",
                        "value": "floating"
                    }
                },
                "description": "This drawer type will always be on the screen, but it will appear under the\nmain toolbar and have a transparent background. This is useful if you want\na persistent drawer on desktop screens, but do not want the main focus to be\nthe drawer.",
                "name": "FLOATING",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.FLOATING",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "floating"
            },
            {
                "comment": "/**\n   * A persistent drawer changes between being hidden and being fixed on the page like\n   * a permanent drawer. When it is visible, it will take up the same amount of room\n   * as a permanent drawer, and will not go away until closed.\n   *\n   * This drawer type is helpful when you need to have a dynamic workspace size.\n   */",
                "meta": {
                    "range": [
                        1218,
                        1242
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 40,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000012",
                        "name": "PERSISTENT",
                        "type": "Literal",
                        "value": "persistent"
                    }
                },
                "description": "A persistent drawer changes between being hidden and being fixed on the page like\na permanent drawer. When it is visible, it will take up the same amount of room\nas a permanent drawer, and will not go away until closed.\n\nThis drawer type is helpful when you need to have a dynamic workspace size.",
                "name": "PERSISTENT",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.PERSISTENT",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "persistent"
            },
            {
                "comment": "/**\n   * This is a modification of the persistent drawer. It will behave as the persistent drawer\n   * but it will always have a \"mini\" drawer visible. This is helpful when you want to have\n   * a dynamic workspace size and keep certain actions available at all times.\n   */",
                "meta": {
                    "range": [
                        1524,
                        1558
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 47,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000014",
                        "name": "PERSISTENT_MINI",
                        "type": "Literal",
                        "value": "persistent-mini"
                    }
                },
                "description": "This is a modification of the persistent drawer. It will behave as the persistent drawer\nbut it will always have a \"mini\" drawer visible. This is helpful when you want to have\na dynamic workspace size and keep certain actions available at all times.",
                "name": "PERSISTENT_MINI",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.PERSISTENT_MINI",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "persistent-mini"
            },
            {
                "comment": "/**\n   * A temporary drawer will not be visible by default. When it is visible, it will overlay\n   * the page to get the main focus on the drawer. When the user touches the overlay or\n   * one of the navigation items, the drawer will be closed. The overlay can be disabled on\n   * desktop and tablets.\n   */",
                "meta": {
                    "range": [
                        1888,
                        1910
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 56,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000016",
                        "name": "TEMPORARY",
                        "type": "Literal",
                        "value": "temporary"
                    }
                },
                "description": "A temporary drawer will not be visible by default. When it is visible, it will overlay\nthe page to get the main focus on the drawer. When the user touches the overlay or\none of the navigation items, the drawer will be closed. The overlay can be disabled on\ndesktop and tablets.",
                "name": "TEMPORARY",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.TEMPORARY",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "temporary"
            },
            {
                "comment": "/**\n   * This is a modification of the temporary drawer. It will behave like a temporary drawer,\n   * but it will always have a \"mini\" drawer visible. Just like the `PERSISTENT_MINI` drawer\n   * type, this is useful when certain actions should be available at all times but additional\n   * actions are available when the drawer is visible.\n   */",
                "meta": {
                    "range": [
                        2263,
                        2295
                    ],
                    "filename": "DrawerTypes.js",
                    "lineno": 64,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
                    "code": {
                        "id": "astnode100000018",
                        "name": "TEMPORARY_MINI",
                        "type": "Literal",
                        "value": "temporary-mini"
                    }
                },
                "description": "This is a modification of the temporary drawer. It will behave like a temporary drawer,\nbut it will always have a \"mini\" drawer visible. Just like the `PERSISTENT_MINI` drawer\ntype, this is useful when certain actions should be available at all times but additional\nactions are available when the drawer is visible.",
                "name": "TEMPORARY_MINI",
                "longname": "module:Drawers/DrawerTypes~DrawerTypes.TEMPORARY_MINI",
                "kind": "member",
                "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "temporary-mini"
            }
        ]
    },
    {
        "comment": "/**\n   * This is the default drawer type. It will always be on the screen and takes\n   * up the entire height. This is very helpful for main navigation on desktops\n   * when you do not need an expandable workspace.\n   */",
        "meta": {
            "range": [
                398,
                424
            ],
            "filename": "DrawerTypes.js",
            "lineno": 16,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000006",
                "name": "FULL_HEIGHT",
                "type": "Literal",
                "value": "full-height"
            }
        },
        "description": "This is the default drawer type. It will always be on the screen and takes\nup the entire height. This is very helpful for main navigation on desktops\nwhen you do not need an expandable workspace.",
        "name": "FULL_HEIGHT",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.FULL_HEIGHT",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "full-height"
    },
    {
        "comment": "/**\n   * This drawer type will always be on the screen, but it will appear under the\n   * main toolbar.\n   */",
        "meta": {
            "range": [
                541,
                559
            ],
            "filename": "DrawerTypes.js",
            "lineno": 22,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000008",
                "name": "CLIPPED",
                "type": "Literal",
                "value": "clipped"
            }
        },
        "description": "This drawer type will always be on the screen, but it will appear under the\nmain toolbar.",
        "name": "CLIPPED",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.CLIPPED",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "clipped"
    },
    {
        "comment": "/**\n   * This drawer type will always be on the screen, but it will appear under the\n   * main toolbar and have a transparent background. This is useful if you want\n   * a persistent drawer on desktop screens, but do not want the main focus to be\n   * the drawer.\n   */",
        "meta": {
            "range": [
                836,
                856
            ],
            "filename": "DrawerTypes.js",
            "lineno": 30,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000010",
                "name": "FLOATING",
                "type": "Literal",
                "value": "floating"
            }
        },
        "description": "This drawer type will always be on the screen, but it will appear under the\nmain toolbar and have a transparent background. This is useful if you want\na persistent drawer on desktop screens, but do not want the main focus to be\nthe drawer.",
        "name": "FLOATING",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.FLOATING",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "floating"
    },
    {
        "comment": "/**\n   * A persistent drawer changes between being hidden and being fixed on the page like\n   * a permanent drawer. When it is visible, it will take up the same amount of room\n   * as a permanent drawer, and will not go away until closed.\n   *\n   * This drawer type is helpful when you need to have a dynamic workspace size.\n   */",
        "meta": {
            "range": [
                1218,
                1242
            ],
            "filename": "DrawerTypes.js",
            "lineno": 40,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000012",
                "name": "PERSISTENT",
                "type": "Literal",
                "value": "persistent"
            }
        },
        "description": "A persistent drawer changes between being hidden and being fixed on the page like\na permanent drawer. When it is visible, it will take up the same amount of room\nas a permanent drawer, and will not go away until closed.\n\nThis drawer type is helpful when you need to have a dynamic workspace size.",
        "name": "PERSISTENT",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.PERSISTENT",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "persistent"
    },
    {
        "comment": "/**\n   * This is a modification of the persistent drawer. It will behave as the persistent drawer\n   * but it will always have a \"mini\" drawer visible. This is helpful when you want to have\n   * a dynamic workspace size and keep certain actions available at all times.\n   */",
        "meta": {
            "range": [
                1524,
                1558
            ],
            "filename": "DrawerTypes.js",
            "lineno": 47,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000014",
                "name": "PERSISTENT_MINI",
                "type": "Literal",
                "value": "persistent-mini"
            }
        },
        "description": "This is a modification of the persistent drawer. It will behave as the persistent drawer\nbut it will always have a \"mini\" drawer visible. This is helpful when you want to have\na dynamic workspace size and keep certain actions available at all times.",
        "name": "PERSISTENT_MINI",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.PERSISTENT_MINI",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "persistent-mini"
    },
    {
        "comment": "/**\n   * A temporary drawer will not be visible by default. When it is visible, it will overlay\n   * the page to get the main focus on the drawer. When the user touches the overlay or\n   * one of the navigation items, the drawer will be closed. The overlay can be disabled on\n   * desktop and tablets.\n   */",
        "meta": {
            "range": [
                1888,
                1910
            ],
            "filename": "DrawerTypes.js",
            "lineno": 56,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000016",
                "name": "TEMPORARY",
                "type": "Literal",
                "value": "temporary"
            }
        },
        "description": "A temporary drawer will not be visible by default. When it is visible, it will overlay\nthe page to get the main focus on the drawer. When the user touches the overlay or\none of the navigation items, the drawer will be closed. The overlay can be disabled on\ndesktop and tablets.",
        "name": "TEMPORARY",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.TEMPORARY",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "temporary"
    },
    {
        "comment": "/**\n   * This is a modification of the temporary drawer. It will behave like a temporary drawer,\n   * but it will always have a \"mini\" drawer visible. Just like the `PERSISTENT_MINI` drawer\n   * type, this is useful when certain actions should be available at all times but additional\n   * actions are available when the drawer is visible.\n   */",
        "meta": {
            "range": [
                2263,
                2295
            ],
            "filename": "DrawerTypes.js",
            "lineno": 64,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000018",
                "name": "TEMPORARY_MINI",
                "type": "Literal",
                "value": "temporary-mini"
            }
        },
        "description": "This is a modification of the temporary drawer. It will behave like a temporary drawer,\nbut it will always have a \"mini\" drawer visible. Just like the `PERSISTENT_MINI` drawer\ntype, this is useful when certain actions should be available at all times but additional\nactions are available when the drawer is visible.",
        "name": "TEMPORARY_MINI",
        "longname": "module:Drawers/DrawerTypes~DrawerTypes.TEMPORARY_MINI",
        "kind": "member",
        "memberof": "module:Drawers/DrawerTypes~DrawerTypes",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "temporary-mini"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2301,
                2328
            ],
            "filename": "DrawerTypes.js",
            "lineno": 67,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Drawers",
            "code": {
                "id": "astnode100000020",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "module:Drawers/DrawerTypes",
        "longname": "module:Drawers/DrawerTypes",
        "kind": "member"
    },
    {
        "comment": "/** @module Helpers/HorizontalAnchors */",
        "meta": {
            "filename": "HorizontalAnchors.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {}
        },
        "kind": "module",
        "name": "Helpers/HorizontalAnchors",
        "longname": "module:Helpers/HorizontalAnchors"
    },
    {
        "comment": "/**\n * An enum for all the different types of horizontal anchors on a layover.\n *\n * @readonly\n * @enum {string}\n */",
        "meta": {
            "range": [
                165,
                918
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000025",
                "name": "HorizontalAnchors",
                "type": "ObjectExpression",
                "value": "{\"LEFT\":\"left\",\"INNER_LEFT\":\"inner left\",\"CENTER\":\"center\",\"RIGHT\":\"right\",\"INNER_RIGHT\":\"inner right\"}"
            }
        },
        "description": "An enum for all the different types of horizontal anchors on a layover.",
        "readonly": true,
        "kind": "constant",
        "isEnum": true,
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "HorizontalAnchors",
        "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
        "scope": "inner",
        "memberof": "module:Helpers/HorizontalAnchors",
        "params": [],
        "properties": [
            {
                "comment": "/**\n   * Positions the layover to the outside left on the toggle component\n   * so that it does not overlap.\n   */",
                "meta": {
                    "range": [
                        306,
                        318
                    ],
                    "filename": "HorizontalAnchors.js",
                    "lineno": 14,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000028",
                        "name": "LEFT",
                        "type": "Literal",
                        "value": "left"
                    }
                },
                "description": "Positions the layover to the outside left on the toggle component\nso that it does not overlap.",
                "name": "LEFT",
                "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.LEFT",
                "kind": "member",
                "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "left"
            },
            {
                "comment": "/**\n   * Positions the layover to the inner left of the toggle component so\n   * that it will overlap.\n   */",
                "meta": {
                    "range": [
                        434,
                        458
                    ],
                    "filename": "HorizontalAnchors.js",
                    "lineno": 20,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000030",
                        "name": "INNER_LEFT",
                        "type": "Literal",
                        "value": "inner left"
                    }
                },
                "description": "Positions the layover to the inner left of the toggle component so\nthat it will overlap.",
                "name": "INNER_LEFT",
                "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.INNER_LEFT",
                "kind": "member",
                "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "inner left"
            },
            {
                "comment": "/**\n   * Positions the layover so that it overlaps the toggle component\n   * by positioning itself in the cetner of the toggle component's width.\n   */",
                "meta": {
                    "range": [
                        617,
                        633
                    ],
                    "filename": "HorizontalAnchors.js",
                    "lineno": 26,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000032",
                        "name": "CENTER",
                        "type": "Literal",
                        "value": "center"
                    }
                },
                "description": "Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",
                "name": "CENTER",
                "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.CENTER",
                "kind": "member",
                "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "center"
            },
            {
                "comment": "/**\n   * Positions the layover to the outside right on the toggle component\n   * so that it does not overlap.\n   */",
                "meta": {
                    "range": [
                        756,
                        770
                    ],
                    "filename": "HorizontalAnchors.js",
                    "lineno": 32,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000034",
                        "name": "RIGHT",
                        "type": "Literal",
                        "value": "right"
                    }
                },
                "description": "Positions the layover to the outside right on the toggle component\nso that it does not overlap.",
                "name": "RIGHT",
                "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.RIGHT",
                "kind": "member",
                "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "right"
            },
            {
                "comment": "/**\n   * Positions the layover to the outside right on the toggle component\n   * so that it will overlap.\n   */",
                "meta": {
                    "range": [
                        889,
                        915
                    ],
                    "filename": "HorizontalAnchors.js",
                    "lineno": 38,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000036",
                        "name": "INNER_RIGHT",
                        "type": "Literal",
                        "value": "inner right"
                    }
                },
                "description": "Positions the layover to the outside right on the toggle component\nso that it will overlap.",
                "name": "INNER_RIGHT",
                "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.INNER_RIGHT",
                "kind": "member",
                "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "inner right"
            }
        ]
    },
    {
        "comment": "/**\n   * Positions the layover to the outside left on the toggle component\n   * so that it does not overlap.\n   */",
        "meta": {
            "range": [
                306,
                318
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 14,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000028",
                "name": "LEFT",
                "type": "Literal",
                "value": "left"
            }
        },
        "description": "Positions the layover to the outside left on the toggle component\nso that it does not overlap.",
        "name": "LEFT",
        "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.LEFT",
        "kind": "member",
        "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "left"
    },
    {
        "comment": "/**\n   * Positions the layover to the inner left of the toggle component so\n   * that it will overlap.\n   */",
        "meta": {
            "range": [
                434,
                458
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 20,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000030",
                "name": "INNER_LEFT",
                "type": "Literal",
                "value": "inner left"
            }
        },
        "description": "Positions the layover to the inner left of the toggle component so\nthat it will overlap.",
        "name": "INNER_LEFT",
        "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.INNER_LEFT",
        "kind": "member",
        "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "inner left"
    },
    {
        "comment": "/**\n   * Positions the layover so that it overlaps the toggle component\n   * by positioning itself in the cetner of the toggle component's width.\n   */",
        "meta": {
            "range": [
                617,
                633
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 26,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000032",
                "name": "CENTER",
                "type": "Literal",
                "value": "center"
            }
        },
        "description": "Positions the layover so that it overlaps the toggle component\nby positioning itself in the cetner of the toggle component's width.",
        "name": "CENTER",
        "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.CENTER",
        "kind": "member",
        "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "center"
    },
    {
        "comment": "/**\n   * Positions the layover to the outside right on the toggle component\n   * so that it does not overlap.\n   */",
        "meta": {
            "range": [
                756,
                770
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 32,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000034",
                "name": "RIGHT",
                "type": "Literal",
                "value": "right"
            }
        },
        "description": "Positions the layover to the outside right on the toggle component\nso that it does not overlap.",
        "name": "RIGHT",
        "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.RIGHT",
        "kind": "member",
        "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "right"
    },
    {
        "comment": "/**\n   * Positions the layover to the outside right on the toggle component\n   * so that it will overlap.\n   */",
        "meta": {
            "range": [
                889,
                915
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 38,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000036",
                "name": "INNER_RIGHT",
                "type": "Literal",
                "value": "inner right"
            }
        },
        "description": "Positions the layover to the outside right on the toggle component\nso that it will overlap.",
        "name": "INNER_RIGHT",
        "longname": "module:Helpers/HorizontalAnchors~HorizontalAnchors.INNER_RIGHT",
        "kind": "member",
        "memberof": "module:Helpers/HorizontalAnchors~HorizontalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "inner right"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                921,
                954
            ],
            "filename": "HorizontalAnchors.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000038",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "module:Helpers/HorizontalAnchors",
        "longname": "module:Helpers/HorizontalAnchors",
        "kind": "member"
    },
    {
        "comment": "/** @module Helpers/Positions */",
        "meta": {
            "filename": "Positions.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {}
        },
        "kind": "module",
        "name": "Helpers/Positions",
        "longname": "module:Helpers/Positions"
    },
    {
        "comment": "/**\n * An enum for all the animation positions for a layover appearing.\n *\n * @readonly\n * @enum {string}\n */",
        "meta": {
            "range": [
                150,
                806
            ],
            "filename": "Positions.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000043",
                "name": "Positions",
                "type": "ObjectExpression",
                "value": "{\"TOP_LEFT\":\"tl\",\"TOP_RIGHT\":\"tr\",\"BOTTOM_LEFT\":\"bl\",\"BOTTOM_RIGHT\":\"br\",\"BELOW\":\"below\"}"
            }
        },
        "description": "An enum for all the animation positions for a layover appearing.",
        "readonly": true,
        "kind": "constant",
        "isEnum": true,
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "Positions",
        "longname": "module:Helpers/Positions~Positions",
        "scope": "inner",
        "memberof": "module:Helpers/Positions",
        "params": [],
        "properties": [
            {
                "comment": "/**\n   * The layover will appear by transitioning from the top left and expand\n   * down right.\n   */",
                "meta": {
                    "range": [
                        270,
                        284
                    ],
                    "filename": "Positions.js",
                    "lineno": 14,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000046",
                        "name": "TOP_LEFT",
                        "type": "Literal",
                        "value": "tl"
                    }
                },
                "description": "The layover will appear by transitioning from the top left and expand\ndown right.",
                "name": "TOP_LEFT",
                "longname": "module:Helpers/Positions~Positions.TOP_LEFT",
                "kind": "member",
                "memberof": "module:Helpers/Positions~Positions",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "tl"
            },
            {
                "comment": "/**\n   * The layover will appear by transitioning from the top right and expand\n   * down left.\n   */",
                "meta": {
                    "range": [
                        393,
                        408
                    ],
                    "filename": "Positions.js",
                    "lineno": 20,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000048",
                        "name": "TOP_RIGHT",
                        "type": "Literal",
                        "value": "tr"
                    }
                },
                "description": "The layover will appear by transitioning from the top right and expand\ndown left.",
                "name": "TOP_RIGHT",
                "longname": "module:Helpers/Positions~Positions.TOP_RIGHT",
                "kind": "member",
                "memberof": "module:Helpers/Positions~Positions",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "tr"
            },
            {
                "comment": "/**\n   * The layover will appear by transitioning from the bottom left and expand\n   * top right.\n   */",
                "meta": {
                    "range": [
                        519,
                        536
                    ],
                    "filename": "Positions.js",
                    "lineno": 26,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000050",
                        "name": "BOTTOM_LEFT",
                        "type": "Literal",
                        "value": "bl"
                    }
                },
                "description": "The layover will appear by transitioning from the bottom left and expand\ntop right.",
                "name": "BOTTOM_LEFT",
                "longname": "module:Helpers/Positions~Positions.BOTTOM_LEFT",
                "kind": "member",
                "memberof": "module:Helpers/Positions~Positions",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "bl"
            },
            {
                "comment": "/**\n   * The layover will appear by transitioning from the bottom right and expand\n   * top left.\n   */",
                "meta": {
                    "range": [
                        647,
                        665
                    ],
                    "filename": "Positions.js",
                    "lineno": 32,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000052",
                        "name": "BOTTOM_RIGHT",
                        "type": "Literal",
                        "value": "br"
                    }
                },
                "description": "The layover will appear by transitioning from the bottom right and expand\ntop left.",
                "name": "BOTTOM_RIGHT",
                "longname": "module:Helpers/Positions~Positions.BOTTOM_RIGHT",
                "kind": "member",
                "memberof": "module:Helpers/Positions~Positions",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "br"
            },
            {
                "comment": "/**\n   * The layover will appear by just transitioning downwards from the bottom\n   * of the toggle component.\n   */",
                "meta": {
                    "range": [
                        789,
                        803
                    ],
                    "filename": "Positions.js",
                    "lineno": 38,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000054",
                        "name": "BELOW",
                        "type": "Literal",
                        "value": "below"
                    }
                },
                "description": "The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",
                "name": "BELOW",
                "longname": "module:Helpers/Positions~Positions.BELOW",
                "kind": "member",
                "memberof": "module:Helpers/Positions~Positions",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "below"
            }
        ]
    },
    {
        "comment": "/**\n   * The layover will appear by transitioning from the top left and expand\n   * down right.\n   */",
        "meta": {
            "range": [
                270,
                284
            ],
            "filename": "Positions.js",
            "lineno": 14,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000046",
                "name": "TOP_LEFT",
                "type": "Literal",
                "value": "tl"
            }
        },
        "description": "The layover will appear by transitioning from the top left and expand\ndown right.",
        "name": "TOP_LEFT",
        "longname": "module:Helpers/Positions~Positions.TOP_LEFT",
        "kind": "member",
        "memberof": "module:Helpers/Positions~Positions",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "tl"
    },
    {
        "comment": "/**\n   * The layover will appear by transitioning from the top right and expand\n   * down left.\n   */",
        "meta": {
            "range": [
                393,
                408
            ],
            "filename": "Positions.js",
            "lineno": 20,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000048",
                "name": "TOP_RIGHT",
                "type": "Literal",
                "value": "tr"
            }
        },
        "description": "The layover will appear by transitioning from the top right and expand\ndown left.",
        "name": "TOP_RIGHT",
        "longname": "module:Helpers/Positions~Positions.TOP_RIGHT",
        "kind": "member",
        "memberof": "module:Helpers/Positions~Positions",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "tr"
    },
    {
        "comment": "/**\n   * The layover will appear by transitioning from the bottom left and expand\n   * top right.\n   */",
        "meta": {
            "range": [
                519,
                536
            ],
            "filename": "Positions.js",
            "lineno": 26,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000050",
                "name": "BOTTOM_LEFT",
                "type": "Literal",
                "value": "bl"
            }
        },
        "description": "The layover will appear by transitioning from the bottom left and expand\ntop right.",
        "name": "BOTTOM_LEFT",
        "longname": "module:Helpers/Positions~Positions.BOTTOM_LEFT",
        "kind": "member",
        "memberof": "module:Helpers/Positions~Positions",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "bl"
    },
    {
        "comment": "/**\n   * The layover will appear by transitioning from the bottom right and expand\n   * top left.\n   */",
        "meta": {
            "range": [
                647,
                665
            ],
            "filename": "Positions.js",
            "lineno": 32,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000052",
                "name": "BOTTOM_RIGHT",
                "type": "Literal",
                "value": "br"
            }
        },
        "description": "The layover will appear by transitioning from the bottom right and expand\ntop left.",
        "name": "BOTTOM_RIGHT",
        "longname": "module:Helpers/Positions~Positions.BOTTOM_RIGHT",
        "kind": "member",
        "memberof": "module:Helpers/Positions~Positions",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "br"
    },
    {
        "comment": "/**\n   * The layover will appear by just transitioning downwards from the bottom\n   * of the toggle component.\n   */",
        "meta": {
            "range": [
                789,
                803
            ],
            "filename": "Positions.js",
            "lineno": 38,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000054",
                "name": "BELOW",
                "type": "Literal",
                "value": "below"
            }
        },
        "description": "The layover will appear by just transitioning downwards from the bottom\nof the toggle component.",
        "name": "BELOW",
        "longname": "module:Helpers/Positions~Positions.BELOW",
        "kind": "member",
        "memberof": "module:Helpers/Positions~Positions",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "below"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                809,
                834
            ],
            "filename": "Positions.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000056",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "module:Helpers/Positions",
        "longname": "module:Helpers/Positions",
        "kind": "member"
    },
    {
        "comment": "/** @module Helpers/VerticalAnchors */",
        "meta": {
            "filename": "VerticalAnchors.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {}
        },
        "kind": "module",
        "name": "Helpers/VerticalAnchors",
        "longname": "module:Helpers/VerticalAnchors"
    },
    {
        "comment": "/**\n * An enum for all the different types of horizontal anchors on a layover.\n *\n * @readonly\n * @enum {string}\n */",
        "meta": {
            "range": [
                163,
                788
            ],
            "filename": "VerticalAnchors.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000061",
                "name": "VerticalAnchors",
                "type": "ObjectExpression",
                "value": "{\"TOP\":\"top\",\"CENTER\":\"center\",\"OVERLAP\":\"overlap\",\"BOTTOM\":\"bottom\"}"
            }
        },
        "description": "An enum for all the different types of horizontal anchors on a layover.",
        "readonly": true,
        "kind": "constant",
        "isEnum": true,
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "VerticalAnchors",
        "longname": "module:Helpers/VerticalAnchors~VerticalAnchors",
        "scope": "inner",
        "memberof": "module:Helpers/VerticalAnchors",
        "params": [],
        "properties": [
            {
                "comment": "/**\n   * Positions the layover to be placed over the toggle component so that\n   * it will never overlay the toggle component.\n   */",
                "meta": {
                    "range": [
                        320,
                        330
                    ],
                    "filename": "VerticalAnchors.js",
                    "lineno": 14,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000064",
                        "name": "TOP",
                        "type": "Literal",
                        "value": "top"
                    }
                },
                "description": "Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",
                "name": "TOP",
                "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.TOP",
                "kind": "member",
                "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "top"
            },
            {
                "comment": "/**\n   * Positions the layover so that it will be centered over the toggle component\n   * based on the layover's height.\n   */",
                "meta": {
                    "range": [
                        464,
                        480
                    ],
                    "filename": "VerticalAnchors.js",
                    "lineno": 20,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000066",
                        "name": "CENTER",
                        "type": "Literal",
                        "value": "center"
                    }
                },
                "description": "Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",
                "name": "CENTER",
                "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.CENTER",
                "kind": "member",
                "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "center"
            },
            {
                "comment": "/**\n   * Positions the layover so that it will overlap the toggle component by\n   * fixing to the top of the toggle.\n   */",
                "meta": {
                    "range": [
                        610,
                        628
                    ],
                    "filename": "VerticalAnchors.js",
                    "lineno": 26,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000068",
                        "name": "OVERLAP",
                        "type": "Literal",
                        "value": "overlap"
                    }
                },
                "description": "Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",
                "name": "OVERLAP",
                "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.OVERLAP",
                "kind": "member",
                "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "overlap"
            },
            {
                "comment": "/**\n   * Positions the layover to be placed below the toggle component so that\n   * it will never overlay the toggle component.\n   */",
                "meta": {
                    "range": [
                        769,
                        785
                    ],
                    "filename": "VerticalAnchors.js",
                    "lineno": 32,
                    "columnno": 2,
                    "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
                    "code": {
                        "id": "astnode100000070",
                        "name": "BOTTOM",
                        "type": "Literal",
                        "value": "bottom"
                    }
                },
                "description": "Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",
                "name": "BOTTOM",
                "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.BOTTOM",
                "kind": "member",
                "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
                "scope": "static",
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "bottom"
            }
        ]
    },
    {
        "comment": "/**\n   * Positions the layover to be placed over the toggle component so that\n   * it will never overlay the toggle component.\n   */",
        "meta": {
            "range": [
                320,
                330
            ],
            "filename": "VerticalAnchors.js",
            "lineno": 14,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000064",
                "name": "TOP",
                "type": "Literal",
                "value": "top"
            }
        },
        "description": "Positions the layover to be placed over the toggle component so that\nit will never overlay the toggle component.",
        "name": "TOP",
        "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.TOP",
        "kind": "member",
        "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "top"
    },
    {
        "comment": "/**\n   * Positions the layover so that it will be centered over the toggle component\n   * based on the layover's height.\n   */",
        "meta": {
            "range": [
                464,
                480
            ],
            "filename": "VerticalAnchors.js",
            "lineno": 20,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000066",
                "name": "CENTER",
                "type": "Literal",
                "value": "center"
            }
        },
        "description": "Positions the layover so that it will be centered over the toggle component\nbased on the layover's height.",
        "name": "CENTER",
        "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.CENTER",
        "kind": "member",
        "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "center"
    },
    {
        "comment": "/**\n   * Positions the layover so that it will overlap the toggle component by\n   * fixing to the top of the toggle.\n   */",
        "meta": {
            "range": [
                610,
                628
            ],
            "filename": "VerticalAnchors.js",
            "lineno": 26,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000068",
                "name": "OVERLAP",
                "type": "Literal",
                "value": "overlap"
            }
        },
        "description": "Positions the layover so that it will overlap the toggle component by\nfixing to the top of the toggle.",
        "name": "OVERLAP",
        "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.OVERLAP",
        "kind": "member",
        "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "overlap"
    },
    {
        "comment": "/**\n   * Positions the layover to be placed below the toggle component so that\n   * it will never overlay the toggle component.\n   */",
        "meta": {
            "range": [
                769,
                785
            ],
            "filename": "VerticalAnchors.js",
            "lineno": 32,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000070",
                "name": "BOTTOM",
                "type": "Literal",
                "value": "bottom"
            }
        },
        "description": "Positions the layover to be placed below the toggle component so that\nit will never overlay the toggle component.",
        "name": "BOTTOM",
        "longname": "module:Helpers/VerticalAnchors~VerticalAnchors.BOTTOM",
        "kind": "member",
        "memberof": "module:Helpers/VerticalAnchors~VerticalAnchors",
        "scope": "static",
        "type": {
            "names": [
                "string"
            ]
        },
        "defaultvalue": "bottom"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                791,
                822
            ],
            "filename": "VerticalAnchors.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/Helpers",
            "code": {
                "id": "astnode100000072",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "module:Helpers/VerticalAnchors",
        "longname": "module:Helpers/VerticalAnchors",
        "kind": "member"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                112,
                187
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000084",
                "name": "Test",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Test",
        "longname": "Test",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                151,
                185
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 6,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000090",
                "name": "Test#render",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "Test#render",
        "kind": "function",
        "memberof": "Test",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                310,
                350
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 14,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000111",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                599,
                639
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 21,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000148",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                876,
                916
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 28,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000185",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1152,
                1175
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 35,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000223",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[1,11,111]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1388,
                1458
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 42,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000258",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"Apple\\\"}\",\"{\\\"name\\\":\\\"Banana\\\"}\",\"{\\\"name\\\":\\\"Orange\\\"}\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1402,
                1415
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 42,
            "columnno": 24,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000262",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1421,
                1435
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 42,
            "columnno": 43,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000265",
                "name": "name",
                "type": "Literal",
                "value": "Banana"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1441,
                1455
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 42,
            "columnno": 63,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000268",
                "name": "name",
                "type": "Literal",
                "value": "Orange"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1533,
                1546
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 44,
            "columnno": 72,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000283",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1671,
                1686
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 48,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000292",
                "name": "test",
                "type": "JSXElement",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "<anonymous>~test",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1698,
                1747
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 49,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000298",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"Apple\\\"}\",\"Banana\",3,\"test\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1712,
                1725
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 49,
            "columnno": 24,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000302",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1818,
                1831
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 51,
            "columnno": 68,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000320",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1998,
                2144
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 56,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000344",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"undefined\",\"\",null,0,100,\"{\\\"name\\\":\\\"\\\"}\",\"{\\\"name\\\":\\\"\\\"}\",\"{\\\"name\\\":null}\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2078,
                2093
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 62,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000353",
                "name": "name",
                "type": "Identifier",
                "value": "undefined"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2105,
                2113
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 63,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000356",
                "name": "name",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2125,
                2135
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000359",
                "name": "name",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                98,
                173
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000384",
                "name": "Test",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Test",
        "longname": "Test",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                137,
                171
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 6,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000390",
                "name": "Test#render",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "Test#render",
        "kind": "function",
        "memberof": "Test",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                307,
                347
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 13,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000411",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                508,
                548
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 19,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000435",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                776,
                816
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 26,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000470",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1058,
                1098
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 33,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000505",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1305,
                1328
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 40,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000540",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[1,2,3,4]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1466,
                1536
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 46,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000565",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"Apple\\\"}\",\"{\\\"name\\\":\\\"Banana\\\"}\",\"{\\\"name\\\":\\\"Orange\\\"}\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1480,
                1493
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 46,
            "columnno": 24,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000569",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1499,
                1513
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 46,
            "columnno": 43,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000572",
                "name": "name",
                "type": "Literal",
                "value": "Banana"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1519,
                1533
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 46,
            "columnno": 63,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000575",
                "name": "name",
                "type": "Literal",
                "value": "Orange"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1725,
                1740
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 52,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000596",
                "name": "test",
                "type": "JSXElement",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "<anonymous>~test",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1752,
                1801
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 53,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000602",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"Apple\\\"}\",\"Banana\",3,\"test\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1766,
                1779
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 53,
            "columnno": 24,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000606",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93,
                168
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000645",
                "name": "Test",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Test",
        "longname": "Test",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                166
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 7,
            "columnno": 2,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000651",
                "name": "Test#render",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "Test#render",
        "kind": "function",
        "memberof": "Test",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                273,
                313
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 14,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000672",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                509,
                549
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 21,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000707",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Apple\",\"Banana\",\"Orange\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                702,
                733
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 27,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000733",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[1,315,814325,82]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                946,
                1016
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 34,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000774",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"Apple\\\"}\",\"{\\\"name\\\":\\\"Banana\\\"}\",\"{\\\"name\\\":\\\"Orange\\\"}\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                960,
                973
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 34,
            "columnno": 24,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000778",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                979,
                993
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 34,
            "columnno": 43,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000781",
                "name": "name",
                "type": "Literal",
                "value": "Banana"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                999,
                1013
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 34,
            "columnno": 63,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000784",
                "name": "name",
                "type": "Literal",
                "value": "Orange"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1078,
                1091
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 36,
            "columnno": 59,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000799",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1097,
                1111
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 36,
            "columnno": 78,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000802",
                "name": "name",
                "type": "Literal",
                "value": "Orange"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1237,
                1252
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 40,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000811",
                "name": "test",
                "type": "JSXElement",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "<anonymous>~test",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1264,
                1313
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 41,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000817",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"Apple\\\"}\",\"Banana\",3,\"test\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1278,
                1291
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 41,
            "columnno": 24,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000821",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1374,
                1387
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 43,
            "columnno": 58,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000839",
                "name": "name",
                "type": "Literal",
                "value": "Apple"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1544,
                1690
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 48,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000863",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"undefined\",\"\",null,0,100,\"{\\\"name\\\":\\\"\\\"}\",\"{\\\"name\\\":\\\"\\\"}\",\"{\\\"name\\\":null}\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1624,
                1639
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 54,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000872",
                "name": "name",
                "type": "Identifier",
                "value": "undefined"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1651,
                1659
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 55,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000875",
                "name": "name",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1671,
                1681
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 56,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000878",
                "name": "name",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1843,
                2010
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 63,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__",
            "code": {
                "id": "astnode100000901",
                "name": "haystack",
                "type": "ArrayExpression",
                "value": "[\"Ap^p[]e\",\"$What\",\"(Now!)\",\"Who?\",\"Through-Stuff.\",\"What's \\\\ That?\",\"Pipe | Pipe\",\"You **\"]"
            }
        },
        "undocumented": true,
        "name": "haystack",
        "longname": "<anonymous>~haystack",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/** @module utils/caseInsensitiveFilter */",
        "meta": {
            "filename": "caseInsensitiveFilter.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {}
        },
        "kind": "module",
        "name": "utils/caseInsensitiveFilter",
        "longname": "module:utils/caseInsensitiveFilter"
    },
    {
        "comment": "/**\n * This function does a simple ignore case search of some `filterText` for every\n * item in a `haystack`. It will only include items that are:\n *  - not null or undefined\n *  - valid React Components\n *  - a number or string that contains each letter/number in exact order ignoring case\n *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\n *\n * Example:\n *\n * ```js\n * const haystack = ['Apple', 'Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'ae') // []\n * ```\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\n * @param {string} filterText - the filter text to use.\n * @param {string=} dataLabel - the data label to use if the element is an object.\n *\n * @return {Array.<string|number|Object|function>} a filtered list.\n */",
        "meta": {
            "range": [
                960,
                1518
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001086",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "haystack",
                    "filterText",
                    "dataLabel"
                ]
            }
        },
        "description": "This function does a simple ignore case search of some `filterText` for every\nitem in a `haystack`. It will only include items that are:\n - not null or undefined\n - valid React Components\n - a number or string that contains each letter/number in exact order ignoring case\n - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\n\nExample:\n\n```js\nconst haystack = ['Apple', 'Banana', 'Orange'];\ncaseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\ncaseInsensitiveFilter(haystack, 'ae') // []\n```",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<(string|number|Object|function())>"
                    ]
                },
                "description": "the haystack to search",
                "name": "haystack"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the filter text to use.",
                "name": "filterText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the data label to use if the element is an object.",
                "name": "dataLabel"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<(string|number|Object|function())>"
                    ]
                },
                "description": "a filtered list."
            }
        ],
        "name": "module:utils/caseInsensitiveFilter",
        "longname": "module:utils/caseInsensitiveFilter",
        "kind": "function"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                975,
                1518
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 26,
            "columnno": 15,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001087",
                "name": "caseInsensitiveFilter",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "haystack",
                    "filterText",
                    "dataLabel"
                ]
            },
            "vars": {
                "needle": "module:utils/caseInsensitiveFilter~caseInsensitiveFilter~needle",
                "": null
            }
        },
        "undocumented": true,
        "name": "caseInsensitiveFilter",
        "longname": "module:utils/caseInsensitiveFilter~caseInsensitiveFilter",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:utils/caseInsensitiveFilter",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1049,
                1082
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001094",
                "name": "needle",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "needle",
        "longname": "module:utils/caseInsensitiveFilter~caseInsensitiveFilter~needle",
        "kind": "constant",
        "memberof": "module:utils/caseInsensitiveFilter~caseInsensitiveFilter",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1271,
                1276
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 36,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001130",
                "name": "value"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1354,
                1376
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 40,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001140",
                "name": "value",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:utils/caseInsensitiveFilter~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:utils/caseInsensitiveFilter"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1416,
                1438
            ],
            "filename": "caseInsensitiveFilter.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001149",
                "name": "value",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "hay[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:utils/caseInsensitiveFilter~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:utils/caseInsensitiveFilter"
    },
    {
        "comment": "/** @module utils/findIgnoreCase */",
        "meta": {
            "filename": "findIgnoreCase.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {}
        },
        "kind": "module",
        "name": "utils/findIgnoreCase",
        "longname": "module:utils/findIgnoreCase"
    },
    {
        "comment": "/**\n * This function finds the first item in a `haystack` that starts with every\n * letter of the `value` in order. It will ignore:\n *  - null or undefined\n *  - valid React components\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search.\n * @param {string} value - the current value to use.\n * @param {string=} dataLabel - the object key to use to extract the comparing value.\n *\n * @return {string} the found element or the empty string.\n */",
        "meta": {
            "range": [
                542,
                1075
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 16,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001174",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "haystack",
                    "value",
                    "dataLabel"
                ]
            }
        },
        "description": "This function finds the first item in a `haystack` that starts with every\nletter of the `value` in order. It will ignore:\n - null or undefined\n - valid React components",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<(string|number|Object|function())>"
                    ]
                },
                "description": "the haystack to search.",
                "name": "haystack"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the current value to use.",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the object key to use to extract the comparing value.",
                "name": "dataLabel"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the found element or the empty string."
            }
        ],
        "name": "module:utils/findIgnoreCase",
        "longname": "module:utils/findIgnoreCase",
        "kind": "function"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                557,
                1075
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 16,
            "columnno": 15,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001175",
                "name": "findIgnoreCase",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "haystack",
                    "value",
                    "dataLabel"
                ]
            },
            "vars": {
                "needle": "module:utils/findIgnoreCase~findIgnoreCase~needle",
                "suggestion": "module:utils/findIgnoreCase~findIgnoreCase~suggestion",
                "": null
            }
        },
        "undocumented": true,
        "name": "findIgnoreCase",
        "longname": "module:utils/findIgnoreCase~findIgnoreCase",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:utils/findIgnoreCase",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                619,
                660
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001182",
                "name": "needle",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "needle",
        "longname": "module:utils/findIgnoreCase~findIgnoreCase~needle",
        "kind": "constant",
        "memberof": "module:utils/findIgnoreCase~findIgnoreCase",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                704,
                719
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 21,
            "columnno": 6,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001198",
                "name": "suggestion",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "suggestion",
        "longname": "module:utils/findIgnoreCase~findIgnoreCase~suggestion",
        "kind": "member",
        "memberof": "module:utils/findIgnoreCase~findIgnoreCase",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                866,
                932
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 27,
            "columnno": 10,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001228",
                "name": "hayStr",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "hayStr",
        "longname": "<anonymous>~hayStr",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                995,
                1014
            ],
            "filename": "findIgnoreCase.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001255",
                "name": "suggestion",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "hayStr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "suggestion",
        "longname": "module:utils/findIgnoreCase~suggestion",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:utils/findIgnoreCase"
    },
    {
        "comment": "/** @module utils/fuzzyFilter */",
        "meta": {
            "filename": "fuzzyFilter.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {}
        },
        "kind": "module",
        "name": "utils/fuzzyFilter",
        "longname": "module:utils/fuzzyFilter"
    },
    {
        "comment": "/**\n * This function does a simple fuzzy search of some `needle` for every\n * item in a `haystack`. It will only include items that are:\n *  - not null or undefined\n *  - valid React Components\n *  - a number or string that contains each letter/number in order ignoring case\n *  - an object's `dataLabel` value that contains each letter/number in order ignoring case.\n *\n * Example:\n * ```js\n * const haystack = ['Apple', 'Banana', 'Orange'];\n * fuzzyFilter(haystack, 'An') // ['Banana', 'Orange'];\n * fuzzyFilter(haystack, 'ae') // ['Apple']\n * ```\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\n * @param {string} needle - the filter text to use.\n * @param {string=} dataLabel - the data label to use if the element is an object.\n *\n * @return {Array.<string|number|Object|function>} a filtered list.\n */",
        "meta": {
            "range": [
                908,
                1781
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 25,
            "columnno": 0,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001268",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "haystack",
                    "needle",
                    "dataLabel"
                ]
            }
        },
        "description": "This function does a simple fuzzy search of some `needle` for every\nitem in a `haystack`. It will only include items that are:\n - not null or undefined\n - valid React Components\n - a number or string that contains each letter/number in order ignoring case\n - an object's `dataLabel` value that contains each letter/number in order ignoring case.\n\nExample:\n```js\nconst haystack = ['Apple', 'Banana', 'Orange'];\nfuzzyFilter(haystack, 'An') // ['Banana', 'Orange'];\nfuzzyFilter(haystack, 'ae') // ['Apple']\n```",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<(string|number|Object|function())>"
                    ]
                },
                "description": "the haystack to search",
                "name": "haystack"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the filter text to use.",
                "name": "needle"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the data label to use if the element is an object.",
                "name": "dataLabel"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<(string|number|Object|function())>"
                    ]
                },
                "description": "a filtered list."
            }
        ],
        "name": "module:utils/fuzzyFilter",
        "longname": "module:utils/fuzzyFilter",
        "kind": "function"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                923,
                1781
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 25,
            "columnno": 15,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001269",
                "name": "fuzzyFilter",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "haystack",
                    "needle",
                    "dataLabel"
                ]
            },
            "vars": {
                "reg": "module:utils/fuzzyFilter~fuzzyFilter~reg",
                "": null
            }
        },
        "undocumented": true,
        "name": "fuzzyFilter",
        "longname": "module:utils/fuzzyFilter~fuzzyFilter",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:utils/fuzzyFilter",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1106,
                1371
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 28,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001276",
                "name": "reg",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reg",
        "longname": "module:utils/fuzzyFilter~fuzzyFilter~reg",
        "kind": "constant",
        "memberof": "module:utils/fuzzyFilter~fuzzyFilter",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1560,
                1565
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001333",
                "name": "value"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1643,
                1665
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 48,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001343",
                "name": "value",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:utils/fuzzyFilter~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:utils/fuzzyFilter"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1705,
                1727
            ],
            "filename": "fuzzyFilter.js",
            "lineno": 51,
            "columnno": 8,
            "path": "/Users/mlaursen/code/old-react-md/src/js/utils",
            "code": {
                "id": "astnode100001352",
                "name": "value",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "hay[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:utils/fuzzyFilter~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:utils/fuzzyFilter"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/mlaursen/code/old-react-md/src/js/Drawers/DrawerTypes.js",
            "/Users/mlaursen/code/old-react-md/src/js/Helpers/HorizontalAnchors.js",
            "/Users/mlaursen/code/old-react-md/src/js/Helpers/Positions.js",
            "/Users/mlaursen/code/old-react-md/src/js/Helpers/VerticalAnchors.js",
            "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__/caseInsensitiveFilter.js",
            "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__/findIgnoreCase.js",
            "/Users/mlaursen/code/old-react-md/src/js/utils/__tests__/fuzzyFilter.js",
            "/Users/mlaursen/code/old-react-md/src/js/utils/caseInsensitiveFilter.js",
            "/Users/mlaursen/code/old-react-md/src/js/utils/findIgnoreCase.js",
            "/Users/mlaursen/code/old-react-md/src/js/utils/fuzzyFilter.js"
        ]
    }
]
